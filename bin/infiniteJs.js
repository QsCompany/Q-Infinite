var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define("sys/System", ["require", "exports", "sys/Corelib", "context"], function (require, exports, Corelib_1, context_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _services = {};
    var _defualt;
    var apis = new Corelib_1.collection.Dictionary("Apis", false);
    var Controller;
    (function (Controller) {
        function Register(service) {
            Object.freeze(service);
            Object.defineProperty(_services, service.Name, {
                configurable: false,
                enumerable: false,
                value: service,
                writable: false
            });
        }
        Controller.Register = Register;
        function decorator(ClassDefinition) {
            return ClassDefinition;
        }
        Controller.decorator = decorator;
        var Api = (function () {
            function Api(reg) {
                this._methodsShema = {};
                apis.Set(this.GetType(), this);
            }
            Api.prototype.Register = function (method) {
                method.Name = method.Name.toUpperCase();
                if (typeof method.ParamsFormat === 'string')
                    method.ParamsFormat = Corelib_1.basic.CompileString(method.ParamsFormat);
                this._methodsShema[method.Name] = method;
            };
            Api.prototype.ERegister = function (method, name, paramsFormat, sendData) {
                this.Register({ Method: method, Name: name, ParamsFormat: paramsFormat && Corelib_1.basic.CompileString(paramsFormat), SendData: sendData });
            };
            Api.prototype.GetMethodShema = function (m) {
                if (typeof m === 'string')
                    return this._methodsShema[m.toUpperCase()];
                if (typeof m === 'number') {
                    var x = this._methodsShema[Corelib_1.net.WebRequestMethod[m].toUpperCase()];
                    if (x != null)
                        return x;
                    for (var i in this._methodsShema) {
                        var v = this._methodsShema[i];
                        if (v.Method === m)
                            return v;
                    }
                    return;
                }
                else if (m) {
                    if (!m.Name)
                        return m;
                }
                for (var i in this._methodsShema) {
                    return this._methodsShema[i];
                }
            };
            return Api;
        }());
        Controller.Api = Api;
        var CostumeApi = (function (_super) {
            __extends(CostumeApi, _super);
            function CostumeApi(_type, _getRequest, _onResponse) {
                var _this = _super.call(this) || this;
                _this._type = _type;
                _this._getRequest = _getRequest;
                _this._onResponse = _onResponse;
                return _this;
            }
            CostumeApi.prototype.GetType = function () { return this._type; };
            CostumeApi.prototype.GetRequest = function (data) { return this._getRequest(data); };
            CostumeApi.prototype.OnResponse = function (response, data) { return this._onResponse(response, data); };
            return CostumeApi;
        }(Api));
        Controller.CostumeApi = CostumeApi;
        var mt;
        function messageType() { return mt || (mt = context_1.context.GetType('models.Message')); }
        var ProxyCallback = (function (_super) {
            __extends(ProxyCallback, _super);
            function ProxyCallback(data, param, api, context, callBack, method) {
                var _this = _super.call(this, null, data, true) || this;
                _this.param = param;
                _this.api = api;
                _this.context = context;
                _this.callBack = callBack;
                _this.method = method;
                return _this;
            }
            ProxyCallback.parse = function (json) {
                if (json == null || json.trim() == "")
                    return null;
                try {
                    return JSON.parse(json);
                }
                catch (e) {
                    return null;
                }
            };
            ProxyCallback.prototype.Callback = function (sender, result) {
                var iss = true;
                try {
                    var r = sender.Request.IsSuccess ? ProxyCallback.parse(result.Response) : null;
                    if (r && r.hasOwnProperty('__service__')) {
                        var sr = r;
                        if (sr.__service__) {
                            var s = _services[sr.__service__];
                            if (s)
                                s.OnResponse(this, sender, sr);
                            if (sr.dropRequest)
                                return;
                        }
                        iss = sr.iss;
                        r = sr.rdata;
                    }
                    if (this.api)
                        this.api.OnResponse(r, this.data, this.context || Corelib_1.encoding.SerializationContext.GlobalContext);
                }
                catch (ee) {
                    iss = false;
                }
                if (this.callBack)
                    this.callBack(this, r, iss && this.IsSuccess, result);
            };
            ProxyCallback.prototype.OutputData = function () {
                if ('string' === typeof this.data)
                    return this.data;
                if (this.data instanceof ArrayBuffer)
                    return this.data;
                var r = this.context == null;
                var e = r ? new Corelib_1.encoding.SerializationContext(true) : this.context.reset();
                var d = e.ToJson(this.data);
                if (r)
                    e.Dispose();
                return JSON.stringify(d);
            };
            return ProxyCallback;
        }(Corelib_1.net.RequestParams));
        Controller.ProxyCallback = ProxyCallback;
        var ProxyData = (function () {
            function ProxyData(crpt, isCostume) {
                this.quee = [];
                if (_defualt != null)
                    throw null;
                this.http = new Corelib_1.net.QueeDownloader(crpt);
                this.apis = isCostume ? new Corelib_1.collection.Dictionary("Apis", false) : apis;
            }
            ProxyData.prototype.SetAuth = function (uid, pwd) {
                this.http.Uid = uid;
                this.http.Pwd = pwd;
            };
            Object.defineProperty(ProxyData.prototype, "Crypto", {
                set: function (v) {
                    this.http.Crypto = v;
                },
                enumerable: true,
                configurable: true
            });
            ProxyData.prototype.Register = function (api) {
                this.apis.Set(api.GetType(), api);
            };
            ProxyData.getMethod = function (api, m) {
                if (typeof m === 'number')
                    return m;
                if (typeof m === 'string') {
                    var x = api.GetMethodShema(m);
                    return x ? x.Method : 0;
                }
                if (x.Name)
                    return Corelib_1.net.WebRequestMethod[m.Name] || 0;
                return 0;
            };
            ProxyData.prototype.Costume = function (url, data, parms, callback, objectStat) {
                return this.http.Push(url, new ProxyCallback(data, objectStat, void 0, Corelib_1.encoding.SerializationContext.GlobalContext, callback), parms);
            };
            ProxyData.prototype.Request = function (type, method, data, params, callback, costumize, beforRequest, objectStat) {
                var api = this.apis.Get(type != null ? type : data.constructor);
                var t = new ProxyCallback(data, objectStat, api, Corelib_1.encoding.SerializationContext.GlobalContext, callback, ProxyData.getMethod(api, method));
                var req = api.GetRequest(data, method, params);
                req.beforRequest = beforRequest;
                if (costumize)
                    costumize(req, t);
                this.http.Push(req, t, null);
            };
            ProxyData.prototype.Push = function (type, data, param, callBack, method, costumize, serializer, beforRequest, params) {
                var api = this.apis.Get(type != null ? type : data.constructor);
                var t = new ProxyCallback(data, param, api, serializer || new Corelib_1.encoding.SerializationContext(true) || Corelib_1.encoding.SerializationContext.GlobalContext, callBack);
                var req = api.GetRequest(data, null, params);
                req.HasBody = true;
                req.beforRequest = beforRequest;
                if (method != undefined)
                    req.Method = method;
                if (costumize)
                    costumize(req, t);
                this.http.Push(req, t, params);
            };
            ProxyData.prototype.Post = function (type, data, param, callBack, costumize, serializer, params) {
                var api = this.apis.Get(type != null ? type : data.constructor);
                var t = new ProxyCallback(data, param, api, serializer || Corelib_1.encoding.SerializationContext.GlobalContext, callBack);
                var req = api.GetRequest(data, null, params);
                req.HasBody = true;
                req.Method = Corelib_1.net.WebRequestMethod.Post;
                if (costumize)
                    costumize(req, t);
                this.http.Push(req, t, params);
            };
            ProxyData.prototype.Put = function (type, data, param, callBack, costumize, serializer, params) {
                var api = this.apis.Get(type != null ? type : data.constructor);
                var t = new ProxyCallback(data, param, api, serializer || Corelib_1.encoding.SerializationContext.GlobalContext, callBack);
                var req = api.GetRequest(data, null, params);
                req.HasBody = true;
                req.Method = Corelib_1.net.WebRequestMethod.Put;
                if (costumize)
                    costumize(req, t);
                this.http.Push(req, t, params);
            };
            ProxyData.prototype.Get = function (type, data, param, callBack, costumize, serializer, params) {
                var api = this.apis.Get(type != null ? type : data.constructor);
                var t = new ProxyCallback(data, param, api, serializer || Corelib_1.encoding.SerializationContext.GlobalContext, callBack);
                var req = api.GetRequest(data, null, params);
                req.Method = Corelib_1.net.WebRequestMethod.Get;
                if (costumize)
                    costumize(req, t);
                this.http.Push(req, t, params);
            };
            ProxyData.prototype.Delete = function (type, data, param, callBack, costumize, serializer, params) {
                var api = this.apis.Get(type != null ? type : data.constructor);
                var t = new ProxyCallback(data, param, api, serializer || Corelib_1.encoding.SerializationContext.GlobalContext, callBack);
                var req = api.GetRequest(data, null, params);
                req.Method = Corelib_1.net.WebRequestMethod.Delete;
                if (costumize)
                    costumize(req, t);
                this.http.Push(req, t, params);
                return req;
            };
            Object.defineProperty(ProxyData, "Default", {
                get: function () { return _defualt || (_defualt = new ProxyData(Corelib_1.basic.Crypto, false)); },
                enumerable: true,
                configurable: true
            });
            return ProxyData;
        }());
        Controller.ProxyData = ProxyData;
    })(Controller = exports.Controller || (exports.Controller = {}));
    var sdata;
    (function (sdata) {
        var DataStat;
        (function (DataStat) {
            DataStat[DataStat["IsNew"] = 0] = "IsNew";
            DataStat[DataStat["Modified"] = 1] = "Modified";
            DataStat[DataStat["Saved"] = 2] = "Saved";
            DataStat[DataStat["Updating"] = 4] = "Updating";
            DataStat[DataStat["Uploading"] = 8] = "Uploading";
            DataStat[DataStat["Updated"] = 16] = "Updated";
            DataStat[DataStat["Frozed"] = 32] = "Frozed";
        })(DataStat = sdata.DataStat || (sdata.DataStat = {}));
        var dic = new Corelib_1.collection.Dictionary('sd');
        var DataRow = (function (_super) {
            __extends(DataRow, _super);
            function DataRow(id) {
                var _this = _super.call(this) || this;
                var st = _this.getStore();
                if (id && st) {
                    if (st.Get(id) != null)
                        return st.Get(id);
                    _this.set(DataRow.DPId, id);
                }
                return _this;
            }
            Object.defineProperty(DataRow.prototype, "Stat", {
                get: function () { return this.get(DataRow.DPStat); },
                set: function (s) { this.set(DataRow.DPStat, s); },
                enumerable: true,
                configurable: true
            });
            DataRow.CreateFromJson = function (json, type, requireNew) {
                if (requireNew)
                    return null;
                var id = (typeof json === 'number' ? json : json.Id);
                if (!requireNew)
                    if (typeof id === 'number')
                        var x = type.getById(id, type);
                if (!x) {
                    var c = dic.Get(type);
                    if (c)
                        x = c.CreateNew(id);
                    if (!x)
                        x = new type(id);
                }
                return x;
            };
            DataRow.prototype.OnIdChanged = function (old, nw) {
                var store = this.getStore();
                if (old)
                    store.Remove(old);
                if (nw)
                    store.Set(nw, this);
            };
            Object.defineProperty(DataRow.prototype, "Id", {
                get: function () {
                    return this.get(DataRow.DPId);
                },
                set: function (v) {
                    this.set(DataRow.DPId, v);
                },
                enumerable: true,
                configurable: true
            });
            DataRow.__fields__ = function () {
                return [
                    DataRow.DPId, this.DPLastModified, DataRow.DPStat
                ];
            };
            DataRow.getById = function (id, type) {
                return undefined;
            };
            DataRow.prototype.FromJson = function (json, context, update) {
                var _this = this;
                if (typeof json === 'number') {
                    if (this.Stat >= DataStat.Updating)
                        return this;
                    this.Id = json;
                    this.set(DataRow.DPStat, DataStat.Updating);
                    Controller.ProxyData.Default.Request(this.constructor, "UPDATE", this, this, function () { if (_this.Stat > DataStat.Updating) {
                        return false;
                    } return true; });
                }
                else {
                    this.set(DataRow.DPStat, DataStat.Updated);
                    _super.prototype.FromJson.call(this, json, context, update);
                    if (json != null && json.IsFrozen == true) {
                        this.Freeze();
                    }
                }
                return this;
            };
            Object.defineProperty(DataRow.prototype, "TableName", {
                get: function () {
                    return context_1.context.NameOf(this.constructor).replace("models.", "");
                },
                enumerable: true,
                configurable: true
            });
            DataRow.DPId = Corelib_1.bind.DObject.CreateField("Id", Number, 0, function (e) {
                e.__this.OnIdChanged(e._old, e._new);
            }, function (e) {
                if (e._new == null || e._new === 0)
                    e._new = Corelib_1.basic.New();
            }, Corelib_1.bind.PropertyAttribute.IsKey);
            DataRow.DPStat = Corelib_1.bind.DObject.CreateField("Stat", Number, 0, null, null, Corelib_1.bind.PropertyAttribute.Private | Corelib_1.bind.PropertyAttribute.NonSerializable);
            DataRow.DPLastModified = Corelib_1.bind.DObject.CreateField("LastModified", Date);
            return DataRow;
        }(Corelib_1.bind.DObject));
        sdata.DataRow = DataRow;
        var QShopRow = (function (_super) {
            __extends(QShopRow, _super);
            function QShopRow(id) {
                return _super.call(this, id) || this;
            }
            QShopRow.__fields__ = function () { return []; };
            QShopRow.prototype.GenType = function () { return QShopRow; };
            Object.defineProperty(QShopRow, "QueryApi", {
                get: function () {
                    return this._QueryApi;
                },
                enumerable: true,
                configurable: true
            });
            QShopRow.prototype.Update = function () {
            };
            QShopRow.prototype.Upload = function () {
            };
            return QShopRow;
        }(sdata.DataRow));
        sdata.QShopRow = QShopRow;
        var DataTable = (function (_super) {
            __extends(DataTable, _super);
            function DataTable(_parent, argType, ctor, array) {
                var _this = _super.call(this, argType, array) || this;
                _this._parent = _parent;
                _this.ctor = ctor;
                _this.Owner = _parent;
                return _this;
            }
            DataTable.__fields__ = function () {
                return [DataTable.DPOwner];
            };
            Object.defineProperty(DataTable.prototype, "Owner", {
                get: function () { return this.get(DataTable.DPOwner); },
                set: function (v) { this.set(DataTable.DPOwner, v); },
                enumerable: true,
                configurable: true
            });
            DataTable.prototype.CreateNewItem = function (id) {
                return DataRow.getById(id, this.ArgType) || this.ctor(id);
            };
            DataTable.prototype.FromJson = function (json, x, update, callback) {
                if (this.Stat == sdata.DataStat.Frozed)
                    return;
                this.set(DataTable.DPStat, DataStat.Updating);
                var obj = _super.prototype.FromJson.call(this, json, x, update, callback);
                this.set(DataTable.DPStat, DataStat.Updated);
                if (json == null)
                    return this;
                if (json != null && json.IsFrozen == true)
                    this.Freeze();
                return this;
            };
            DataTable.prototype.GetById = function (id) {
                var t = this.AsList();
                var _ = DataRow.DPId;
                for (var i = 0, l = t.length; i < l; i++)
                    if (t[i].GetValue(_) === id)
                        return t[i];
                return undefined;
            };
            DataTable.prototype.Update = function () {
            };
            DataTable.prototype.Upload = function () {
            };
            DataTable.prototype.Add = function (item) {
                return (this._list.indexOf(item) == -1) ? _super.prototype.Add.call(this, item) : this;
            };
            DataTable.prototype.FromCsv = function (input, context, parser) {
                var csv = new Corelib_1.encoding.CSV(input, true, true);
                var key = csv.ColumnIndex("Id");
                if (key == -1)
                    key = void 0;
                context = context || Corelib_1.encoding.SerializationContext.GlobalContext;
                var lst = [];
                while (csv.Next(parser)) {
                    var c = csv.Current;
                    var t = this.CreateNewItem(key === void 0 ? Corelib_1.basic.New() : c.Id || Corelib_1.basic.New());
                    lst.push(t.FromJson(c, context));
                }
                this.AddRange(lst);
            };
            DataTable.DPOwner = DataTable.CreateField('Owner', DataRow, null, null, null, Corelib_1.bind.PropertyAttribute.SerializeAsId);
            DataTable.DPStat = Corelib_1.bind.DObject.CreateField('Stat', Number, 0, null, null, Corelib_1.bind.PropertyAttribute.Private);
            return DataTable;
        }(Corelib_1.collection.List));
        sdata.DataTable = DataTable;
        var stp = true;
    })(sdata = exports.sdata || (exports.sdata = {}));
    var base;
    (function (base) {
        var DateVecteur = (function (_super) {
            __extends(DateVecteur, _super);
            function DateVecteur() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(DateVecteur.prototype, "From", {
                get: function () { return this.get(DateVecteur.DPFrom); },
                set: function (v) { this.set(DateVecteur.DPFrom, v); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DateVecteur.prototype, "To", {
                get: function () { return this.get(DateVecteur.DPTo); },
                set: function (v) { this.set(DateVecteur.DPTo, v); },
                enumerable: true,
                configurable: true
            });
            DateVecteur.__fields__ = function () { return [DateVecteur.DPFrom, DateVecteur.DPTo]; };
            DateVecteur.prototype.Check = function (date) {
                if (!sdata)
                    return true;
                var f = this.From;
                var t = this.To;
                var val = date.getTime();
                return (f == null || f.getTime() <= val) && (t == null || t.getTime() >= val);
            };
            DateVecteur.DPFrom = Corelib_1.bind.DObject.CreateField('From', Date);
            DateVecteur.DPTo = Corelib_1.bind.DObject.CreateField('To', Date);
            return DateVecteur;
        }(Corelib_1.bind.DObject));
        base.DateVecteur = DateVecteur;
        var NumberVecteur = (function (_super) {
            __extends(NumberVecteur, _super);
            function NumberVecteur() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(NumberVecteur.prototype, "From", {
                get: function () { return this.get(NumberVecteur.DPFrom); },
                set: function (v) { this.set(NumberVecteur.DPFrom, v); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NumberVecteur.prototype, "To", {
                get: function () { return this.get(NumberVecteur.DPTo); },
                set: function (v) { this.set(NumberVecteur.DPTo, v); },
                enumerable: true,
                configurable: true
            });
            NumberVecteur.__fields__ = function () { return [NumberVecteur.DPFrom, NumberVecteur.DPTo]; };
            NumberVecteur.prototype.Check = function (val) {
                if (!val)
                    return true;
                return (this.From == null || this.From <= val) && (this.To == null || this.To >= val);
            };
            NumberVecteur.DPFrom = Corelib_1.bind.DObject.CreateField('From', Number);
            NumberVecteur.DPTo = Corelib_1.bind.DObject.CreateField('To', Number);
            return NumberVecteur;
        }(Corelib_1.bind.DObject));
        base.NumberVecteur = NumberVecteur;
    })(base = exports.base || (exports.base = {}));
    var System;
    (function (System) {
        var co;
        var Color = (function () {
            function Color() {
            }
            Color.prototype.toHex = function (t, e) {
                t = parseInt(t, 10);
                for (var i = ""; t > 0;)
                    i = co[t % 16] + i, t = Math.floor(t / 16);
                for (; i.length < e;)
                    i = "0" + i;
                return i;
            };
            Color.prototype.hexToDec = function (t) {
                return parseInt(t, 16);
            };
            Color.prototype.toRgb = function (t) {
                var e, i, s, n;
                return "string" != typeof t
                    ? (e = t[0], i = t[1], s = t[2])
                    : -1 != t.indexOf("rgb")
                        ? (n = t.substr(t
                            .indexOf("(") +
                            1, t.lastIndexOf(")") - t.indexOf("(") - 1)
                            .split(","), e = n[0], i = n[1], s = n[2])
                        : ("#" == t.substr(0, 1) && (t = t.substr(1)), e = this.hexToDec(t.substr(0, 2)), i = this
                            .hexToDec(t.substr(2, 2)), s = this
                            .hexToDec(t
                            .substr(4, 2))), e = parseInt(e, 10) || 0, i = parseInt(i, 10) || 0, s =
                    parseInt(s, 10) || 0,
                    (0 > e || e > 255) && (e = 0), (0 > i || i > 255) && (i = 0), (0 > s || s > 255) && (s = 0), [e, i, s];
            };
            Color.prototype.hsvToRgb = function (t, e, i) {
                var s, n, a, r, h, o, l, c;
                switch (s = Math
                    .floor(t / 60) %
                    6, n = t / 60 - s, a = i * (1 - e), r = i * (1 - n * e), h = i * (1 - (1 - n) * e), o = 0, l = 0,
                    c = 0, s) {
                    case 0:
                        o = i, l = h, c = a;
                        break;
                    case 1:
                        o = r, l = i, c = a;
                        break;
                    case 2:
                        o = a, l = i, c = h;
                        break;
                    case 3:
                        o = a, l = r, c = i;
                        break;
                    case 4:
                        o = h, l = a, c = i;
                        break;
                    case 5:
                        o = i, l = a, c = r;
                }
                return o = Math.floor(255 * o), l = Math.floor(255 * l), c = Math.floor(255 * c), [o, l, c];
            };
            Color.prototype.rgbToHsv = function (t, e, i) {
                var s, n, a, r, h, o, l, c;
                return s = t / 255, n = e / 255, a = i / 255, r = Math.min(s, n, a), h = Math
                    .max(s, n, a), l = 0, o = 0 === h ? 0 : 1 - r / h, c = h,
                    h == r
                        ? l = 0
                        : h == s && n >= a
                            ? l = 60 * (n - a) / (h - r) + 0
                            : h == s && a > n
                                ? l = 60 * (n - a) / (h - r) + 360
                                : h == n ? l = 60 * (a - s) / (h - r) + 120 : h == a && (l = 60 * (s - n) / (h - r) + 240),
                    [l, o, c];
            };
            return Color;
        }());
    })(System = exports.System || (exports.System = {}));
});
define("sys/Filters", ["require", "exports", "sys/Corelib"], function (require, exports, Corelib_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var filters;
    (function (filters) {
        var scopic;
        (function (scopic) {
            var ListFilter = (function (_super) {
                __extends(ListFilter, _super);
                function ListFilter(s, m, p, fl) {
                    var _this = _super.call(this, s, 1) || this;
                    _this.p = p;
                    _this.fl = fl;
                    return _this;
                }
                ListFilter.prototype.getFilter = function (s) {
                    return null;
                };
                ListFilter.prototype.getSource = function (s) {
                    if (s instanceof Array) {
                        this.fl.Source = new Corelib_2.collection.List(Object, s);
                        this.isConst = true;
                    }
                    return null;
                };
                ListFilter.prototype.getPatent = function (s) {
                    return s;
                };
                ListFilter.prototype.Convert = function (data) {
                    if (this.isConst)
                        return;
                    if (this.fl == null)
                        this.fl = new Corelib_2.collection.ExList(Object);
                    this.fl.Source = data;
                    return this.fl;
                };
                ListFilter.prototype.ConvertBack = function (data) {
                    return data.Source;
                };
                ListFilter.prototype.Initialize = function () {
                    var fl = this.fl;
                    var p = this.p;
                    if (!fl)
                        this.fl = fl = new Corelib_2.collection.ExList(Object);
                    if (p) {
                        var x = JSON.parse(decodeURI(p));
                        for (var i in x) {
                            if (i === 'filter')
                                fl.Filter = this.getFilter(x[i]);
                            if (i === 'source')
                                fl.Source = this.getSource(x[i]);
                            if (i === 'patent') {
                                if (fl.Filter == null)
                                    fl.Filter = new list.LStringFilter();
                                fl.Filter.Patent = this.getPatent(x[i]);
                            }
                            if (i === 'max')
                                fl.MaxResult = parseInt(i);
                            if (i === 'shift')
                                fl.Shift = parseInt(i);
                        }
                    }
                    if (fl.Filter == null)
                        fl.Filter = new list.LStringFilter();
                    if (fl.Source == null && this.source)
                        fl.Source = this.source.Value;
                    _super.prototype.Initialize.call(this);
                };
                return ListFilter;
            }(Corelib_2.bind.Filter));
            scopic.ListFilter = ListFilter;
            Corelib_2.bind.RegisterFilter({
                BindingMode: 1, Name: 'listfilter', CreateNew: function (s, m, p) {
                    return new ListFilter(s, m, p);
                }
            });
        })(scopic = filters.scopic || (filters.scopic = {}));
        var list;
        (function (list) {
            var SubListPatent = (function () {
                function SubListPatent(start, end) {
                    if (start > end) {
                        this.Start = end;
                        this.End = start;
                    }
                    else {
                        this.Start = start;
                        this.End = end;
                    }
                }
                SubListPatent.prototype.Check = function (i) {
                    return i <= this.End && i >= this.Start;
                };
                SubListPatent.prototype.equals = function (p) {
                    return this.Start == p.Start && this.End == p.End;
                };
                return SubListPatent;
            }());
            list.SubListPatent = SubListPatent;
            var StringPatent = (function () {
                function StringPatent(s) {
                    this.o = s = s.trim().toLowerCase();
                    this.p = s === '' ? [] : s.split(' ');
                }
                StringPatent.prototype.Check = function (s) {
                    if (!s)
                        return true;
                    var p = this.p;
                    s = s.toLowerCase();
                    for (var i = 0, l = p.length; i < l; i++)
                        if (s.indexOf(p[i]) === -1)
                            return false;
                    return true;
                };
                StringPatent.prototype.equals = function (p) {
                    return p.o === this.o;
                };
                return StringPatent;
            }());
            list.StringPatent = StringPatent;
            var PropertyPatent = (function () {
                function PropertyPatent(s) {
                    this.s = s;
                }
                PropertyPatent.prototype.Check = function (s) {
                    return this.s === undefined ? true : s === this.s;
                };
                PropertyPatent.prototype.equals = function (p) {
                    return p.s === this.s;
                };
                return PropertyPatent;
            }());
            list.PropertyPatent = PropertyPatent;
            var PropertyFilter = (function (_super) {
                __extends(PropertyFilter, _super);
                function PropertyFilter(DP) {
                    var _this = _super.call(this) || this;
                    _this.DP = DP;
                    return _this;
                }
                PropertyFilter.prototype.Begin = function (deb, count) {
                    if (!this._patent)
                        this._skip = true;
                    if (!this._patent.s)
                        this._skip = true;
                    this._skip = false;
                };
                PropertyFilter.prototype.IsMatch = function (i, item) {
                    return (this._skip || !item) || this._patent.Check(item.GetValue(this.DP));
                };
                PropertyFilter.prototype.convertFromString = function (x) {
                    return null;
                };
                return PropertyFilter;
            }(Corelib_2.utils.Filter));
            list.PropertyFilter = PropertyFilter;
            var StringFilter = (function (_super) {
                __extends(StringFilter, _super);
                function StringFilter() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                StringFilter.prototype.Begin = function (deb, count) {
                };
                StringFilter.prototype.IsMatch = function (i, item) {
                    return (this._patent == null) || this._patent.Check(item.toString());
                };
                StringFilter.prototype.convertFromString = function (x) {
                    var p = new StringPatent(x);
                    return (this._patent && this._patent.equals(p)) ? this._patent : p;
                };
                return StringFilter;
            }(Corelib_2.utils.Filter));
            list.StringFilter = StringFilter;
            var BoundStringFilter = (function (_super) {
                __extends(BoundStringFilter, _super);
                function BoundStringFilter() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BoundStringFilter.prototype.Begin = function (deb, count) {
                    this.deb = deb;
                    this.fin = deb + count;
                };
                BoundStringFilter.prototype.IsMatch = function (i, item) {
                    return i >= this.deb && i < this.fin ? (this._patent == null) || this._patent.Check(item.toString()) : null;
                };
                BoundStringFilter.prototype.convertFromString = function (x) {
                    var p = new StringPatent(x);
                    return (this._patent && this._patent.equals(p)) ? this._patent : p;
                };
                return BoundStringFilter;
            }(Corelib_2.utils.Filter));
            list.BoundStringFilter = BoundStringFilter;
            var DObjectPatent = (function () {
                function DObjectPatent(s) {
                    this.o = s = s.trim().toLowerCase();
                    this.p = s === '' ? [] : s.split(' ');
                }
                DObjectPatent.prototype.Check = function (s) {
                    if (!s)
                        return true;
                };
                DObjectPatent.prototype.equals = function (p) {
                    return p.o === this.o;
                };
                return DObjectPatent;
            }());
            list.DObjectPatent = DObjectPatent;
            var DObjectFilter = (function (_super) {
                __extends(DObjectFilter, _super);
                function DObjectFilter() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                DObjectFilter.prototype.Begin = function (deb, count) {
                };
                DObjectFilter.prototype.IsMatch = function (i, item) {
                    return (this._patent == null) || this._patent.Check(item.toString());
                };
                DObjectFilter.prototype.convertFromString = function (x) {
                    var p = new StringPatent(x);
                    return (this._patent && this._patent.equals(p)) ? this._patent : p;
                };
                return DObjectFilter;
            }(Corelib_2.utils.Filter));
            list.DObjectFilter = DObjectFilter;
            var PatentGroup = (function () {
                function PatentGroup(left, right) {
                    this.left = left;
                    this.right = right;
                }
                PatentGroup.prototype.equals = function (p) {
                    var v = p;
                    var l, r;
                    if (v)
                        l = v.left, r = v.right;
                    if (!p || p instanceof this.constructor)
                        return this.areEquals(this.left, l) && this.areEquals(this.right, r);
                    return false;
                };
                PatentGroup.prototype.areEquals = function (a, b) {
                    if (a == null && b == null)
                        return true;
                    if (a == null)
                        return b.equals(a);
                    return a.equals(b);
                };
                return PatentGroup;
            }());
            list.PatentGroup = PatentGroup;
            var ANDPatentGroup = (function (_super) {
                __extends(ANDPatentGroup, _super);
                function ANDPatentGroup() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ANDPatentGroup.prototype.Check = function (item) {
                    var l = !this.left || this.left.Check(item);
                    if (l == null)
                        return null;
                    var r = !this.right || this.right.Check(item);
                    if (r == null)
                        return null;
                    return l && r;
                };
                ANDPatentGroup.prototype.Clone = function () {
                    return new ANDPatentGroup(this.left, this.right);
                };
                return ANDPatentGroup;
            }(PatentGroup));
            list.ANDPatentGroup = ANDPatentGroup;
            var ORPatentGroup = (function (_super) {
                __extends(ORPatentGroup, _super);
                function ORPatentGroup() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ORPatentGroup.prototype.Clone = function () {
                    return new ORPatentGroup(this.left, this.right);
                };
                ORPatentGroup.prototype.Check = function (item) {
                    var l = !!this.left && this.left.Check(item);
                    if (l == null)
                        return null;
                    var r = !!this.right && this.right.Check(item);
                    if (r == null)
                        return null;
                    return r || l;
                };
                return ORPatentGroup;
            }(PatentGroup));
            list.ORPatentGroup = ORPatentGroup;
            var FilterGroup = (function (_super) {
                __extends(FilterGroup, _super);
                function FilterGroup(patent) {
                    var _this = _super.call(this) || this;
                    if (!patent)
                        throw "";
                    _this.Patent = patent;
                    return _this;
                }
                FilterGroup.prototype.Begin = function (deb, count) {
                };
                FilterGroup.prototype.IsMatch = function (i, item) {
                    return (this._patent == null) || this._patent.Check(item);
                };
                FilterGroup.prototype.convertFromString = function (x) {
                    throw "null";
                };
                Object.defineProperty(FilterGroup.prototype, "LeftPatent", {
                    set: function (v) {
                        this.Patent.left = v;
                        this.Patent = this.Patent.Clone();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FilterGroup.prototype, "RightPatent", {
                    set: function (v) {
                        this.Patent.right = v;
                        this.Patent = this.Patent.Clone();
                    },
                    enumerable: true,
                    configurable: true
                });
                return FilterGroup;
            }(Corelib_2.utils.Filter));
            list.FilterGroup = FilterGroup;
            var LStringFilter = (function (_super) {
                __extends(LStringFilter, _super);
                function LStringFilter() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LStringFilter.prototype.Begin = function (deb, count) {
                    this.deb = deb || 0;
                    this.count = count;
                };
                LStringFilter.prototype.IsMatch = function (i, item) {
                    if (this.deb === 0) {
                        if (this.count > 0) {
                            if (!(this._patent == null || this._patent.Check(item.toString())))
                                return false;
                            this.count--;
                            return true;
                        }
                    }
                    else
                        this.deb--;
                    return false;
                };
                LStringFilter.prototype.convertFromString = function (x) {
                    var p = new StringPatent(x);
                    return (this._patent && this._patent.equals(p)) ? this._patent : p;
                };
                return LStringFilter;
            }(Corelib_2.utils.Filter));
            list.LStringFilter = LStringFilter;
            var SubListFilter = (function (_super) {
                __extends(SubListFilter, _super);
                function SubListFilter() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.deb = 0;
                    _this.count = 50;
                    return _this;
                }
                SubListFilter.prototype.Begin = function (deb, count) {
                    this.deb = deb;
                    this.count = count;
                };
                SubListFilter.prototype.IsMatch = function (i, item) {
                    var t = (this._patent == null) || this._patent.Check(i);
                    if (t) {
                        if (this.deb > 0) {
                            this.deb--;
                            return false;
                        }
                        if (this.count > 0) {
                            this.count--;
                            return true;
                        }
                        return null;
                    }
                    return false;
                };
                SubListFilter.prototype.convertFromString = function (x) {
                    var e = x.split(/[\s|\\|\.|\/]+/);
                    var s = 0;
                    var n = 0;
                    if (e.length > 0)
                        s = parseFloat(e[0]);
                    if (e.length > 1)
                        n = parseFloat(e[1]);
                    else
                        n = s + (this._patent == null ? 10 : this._patent.End - this._patent.Start);
                    var p = new SubListPatent(s, n);
                    return (this._patent && this._patent.equals(p)) ? this._patent : p;
                };
                return SubListFilter;
            }(Corelib_2.utils.Filter));
            list.SubListFilter = SubListFilter;
            function indexdFilter(source, count) {
                var filter = new filters.list.SubListFilter();
                var index = 0;
                var data = source.Filtred(filter);
                function numPages() {
                    var c = source.Count / count;
                    if (c % 1 == 0)
                        return c;
                    return Math.floor(c) + 1;
                }
                function getPatent() {
                    var np = numPages();
                    index = Math.max(0, Math.min(index, np - 1));
                    return new filters.list.SubListPatent(index * count, ((index + 1) * count - 1));
                }
                filter.Patent = getPatent();
                return {
                    update: function () {
                        filter.Patent = getPatent();
                    },
                    reset: function () {
                        index = 0;
                        filter.Patent = getPatent();
                    },
                    next: function () {
                        ++index;
                        filter.Patent = getPatent();
                    },
                    previouse: function () {
                        --index;
                        filter.Patent = getPatent();
                    },
                    get List() { return data; },
                    get numPages() {
                        var c = source.Count / count;
                        if (c % 1 == 0)
                            return c;
                        return c + 1;
                    },
                    get Index() { return index; },
                    set Index(v) {
                        index = v;
                        filter.Patent = getPatent();
                    },
                    get CountPerPage() { return count; },
                    set CountPerPage(v) {
                        count = v;
                        filter.Patent = getPatent();
                    }
                };
            }
            list.indexdFilter = indexdFilter;
        })(list = filters.list || (filters.list = {}));
    })(filters = exports.filters || (exports.filters = {}));
});
define("sys/Syntaxer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var JSToken;
    (function (JSToken) {
        JSToken[JSToken["None"] = 0] = "None";
        JSToken[JSToken["EndOfFile"] = 1] = "EndOfFile";
        JSToken[JSToken["Semicolon"] = 2] = "Semicolon";
        JSToken[JSToken["RightCurly"] = 3] = "RightCurly";
        JSToken[JSToken["LeftCurly"] = 4] = "LeftCurly";
        JSToken[JSToken["Debugger"] = 5] = "Debugger";
        JSToken[JSToken["Var"] = 6] = "Var";
        JSToken[JSToken["If"] = 7] = "If";
        JSToken[JSToken["For"] = 8] = "For";
        JSToken[JSToken["Do"] = 9] = "Do";
        JSToken[JSToken["While"] = 10] = "While";
        JSToken[JSToken["Continue"] = 11] = "Continue";
        JSToken[JSToken["Break"] = 12] = "Break";
        JSToken[JSToken["Return"] = 13] = "Return";
        JSToken[JSToken["With"] = 14] = "With";
        JSToken[JSToken["Switch"] = 15] = "Switch";
        JSToken[JSToken["Throw"] = 16] = "Throw";
        JSToken[JSToken["Try"] = 17] = "Try";
        JSToken[JSToken["Function"] = 18] = "Function";
        JSToken[JSToken["Else"] = 19] = "Else";
        JSToken[JSToken["ConditionalCommentStart"] = 20] = "ConditionalCommentStart";
        JSToken[JSToken["ConditionalCommentEnd"] = 21] = "ConditionalCommentEnd";
        JSToken[JSToken["ConditionalCompilationOn"] = 22] = "ConditionalCompilationOn";
        JSToken[JSToken["ConditionalCompilationSet"] = 23] = "ConditionalCompilationSet";
        JSToken[JSToken["ConditionalCompilationIf"] = 24] = "ConditionalCompilationIf";
        JSToken[JSToken["ConditionalCompilationElseIf"] = 25] = "ConditionalCompilationElseIf";
        JSToken[JSToken["ConditionalCompilationElse"] = 26] = "ConditionalCompilationElse";
        JSToken[JSToken["ConditionalCompilationEnd"] = 27] = "ConditionalCompilationEnd";
        JSToken[JSToken["ConditionalCompilationVariable"] = 28] = "ConditionalCompilationVariable";
        JSToken[JSToken["Identifier"] = 29] = "Identifier";
        JSToken[JSToken["Null"] = 30] = "Null";
        JSToken[JSToken["True"] = 31] = "True";
        JSToken[JSToken["False"] = 32] = "False";
        JSToken[JSToken["This"] = 33] = "This";
        JSToken[JSToken["StringLiteral"] = 34] = "StringLiteral";
        JSToken[JSToken["IntegerLiteral"] = 35] = "IntegerLiteral";
        JSToken[JSToken["NumericLiteral"] = 36] = "NumericLiteral";
        JSToken[JSToken["TemplateLiteral"] = 37] = "TemplateLiteral";
        JSToken[JSToken["LeftParenthesis"] = 38] = "LeftParenthesis";
        JSToken[JSToken["LeftBracket"] = 39] = "LeftBracket";
        JSToken[JSToken["AccessField"] = 40] = "AccessField";
        JSToken[JSToken["ArrowFunction"] = 41] = "ArrowFunction";
        JSToken[JSToken["RestSpread"] = 42] = "RestSpread";
        JSToken[JSToken["FirstOperator"] = 43] = "FirstOperator";
        JSToken[JSToken["Delete"] = 43] = "Delete";
        JSToken[JSToken["Increment"] = 44] = "Increment";
        JSToken[JSToken["Decrement"] = 45] = "Decrement";
        JSToken[JSToken["Void"] = 46] = "Void";
        JSToken[JSToken["TypeOf"] = 47] = "TypeOf";
        JSToken[JSToken["LogicalNot"] = 48] = "LogicalNot";
        JSToken[JSToken["BitwiseNot"] = 49] = "BitwiseNot";
        JSToken[JSToken["FirstBinaryOperator"] = 50] = "FirstBinaryOperator";
        JSToken[JSToken["Plus"] = 50] = "Plus";
        JSToken[JSToken["Minus"] = 51] = "Minus";
        JSToken[JSToken["Multiply"] = 52] = "Multiply";
        JSToken[JSToken["Divide"] = 53] = "Divide";
        JSToken[JSToken["Modulo"] = 54] = "Modulo";
        JSToken[JSToken["BitwiseAnd"] = 55] = "BitwiseAnd";
        JSToken[JSToken["BitwiseOr"] = 56] = "BitwiseOr";
        JSToken[JSToken["BitwiseXor"] = 57] = "BitwiseXor";
        JSToken[JSToken["LeftShift"] = 58] = "LeftShift";
        JSToken[JSToken["RightShift"] = 59] = "RightShift";
        JSToken[JSToken["UnsignedRightShift"] = 60] = "UnsignedRightShift";
        JSToken[JSToken["Equal"] = 61] = "Equal";
        JSToken[JSToken["NotEqual"] = 62] = "NotEqual";
        JSToken[JSToken["StrictEqual"] = 63] = "StrictEqual";
        JSToken[JSToken["StrictNotEqual"] = 64] = "StrictNotEqual";
        JSToken[JSToken["LessThan"] = 65] = "LessThan";
        JSToken[JSToken["LessThanEqual"] = 66] = "LessThanEqual";
        JSToken[JSToken["GreaterThan"] = 67] = "GreaterThan";
        JSToken[JSToken["GreaterThanEqual"] = 68] = "GreaterThanEqual";
        JSToken[JSToken["LogicalAnd"] = 69] = "LogicalAnd";
        JSToken[JSToken["LogicalOr"] = 70] = "LogicalOr";
        JSToken[JSToken["InstanceOf"] = 71] = "InstanceOf";
        JSToken[JSToken["In"] = 72] = "In";
        JSToken[JSToken["Comma"] = 73] = "Comma";
        JSToken[JSToken["Assign"] = 74] = "Assign";
        JSToken[JSToken["PlusAssign"] = 75] = "PlusAssign";
        JSToken[JSToken["MinusAssign"] = 76] = "MinusAssign";
        JSToken[JSToken["MultiplyAssign"] = 77] = "MultiplyAssign";
        JSToken[JSToken["DivideAssign"] = 78] = "DivideAssign";
        JSToken[JSToken["ModuloAssign"] = 79] = "ModuloAssign";
        JSToken[JSToken["BitwiseAndAssign"] = 80] = "BitwiseAndAssign";
        JSToken[JSToken["BitwiseOrAssign"] = 81] = "BitwiseOrAssign";
        JSToken[JSToken["BitwiseXorAssign"] = 82] = "BitwiseXorAssign";
        JSToken[JSToken["LeftShiftAssign"] = 83] = "LeftShiftAssign";
        JSToken[JSToken["RightShiftAssign"] = 84] = "RightShiftAssign";
        JSToken[JSToken["UnsignedRightShiftAssign"] = 85] = "UnsignedRightShiftAssign";
        JSToken[JSToken["LastAssign"] = 85] = "LastAssign";
        JSToken[JSToken["ConditionalIf"] = 86] = "ConditionalIf";
        JSToken[JSToken["Colon"] = 87] = "Colon";
        JSToken[JSToken["LastOperator"] = 87] = "LastOperator";
        JSToken[JSToken["Case"] = 88] = "Case";
        JSToken[JSToken["Catch"] = 89] = "Catch";
        JSToken[JSToken["Default"] = 90] = "Default";
        JSToken[JSToken["Finally"] = 91] = "Finally";
        JSToken[JSToken["New"] = 92] = "New";
        JSToken[JSToken["RightParenthesis"] = 93] = "RightParenthesis";
        JSToken[JSToken["RightBracket"] = 94] = "RightBracket";
        JSToken[JSToken["SingleLineComment"] = 95] = "SingleLineComment";
        JSToken[JSToken["MultipleLineComment"] = 96] = "MultipleLineComment";
        JSToken[JSToken["UnterminatedComment"] = 97] = "UnterminatedComment";
        JSToken[JSToken["PreprocessorDirective"] = 98] = "PreprocessorDirective";
        JSToken[JSToken["Enum"] = 99] = "Enum";
        JSToken[JSToken["Extends"] = 100] = "Extends";
        JSToken[JSToken["Super"] = 101] = "Super";
        JSToken[JSToken["Class"] = 102] = "Class";
        JSToken[JSToken["Const"] = 103] = "Const";
        JSToken[JSToken["Export"] = 104] = "Export";
        JSToken[JSToken["Import"] = 105] = "Import";
        JSToken[JSToken["Module"] = 106] = "Module";
        JSToken[JSToken["Let"] = 107] = "Let";
        JSToken[JSToken["Implements"] = 108] = "Implements";
        JSToken[JSToken["Interface"] = 109] = "Interface";
        JSToken[JSToken["Package"] = 110] = "Package";
        JSToken[JSToken["Private"] = 111] = "Private";
        JSToken[JSToken["Protected"] = 112] = "Protected";
        JSToken[JSToken["Public"] = 113] = "Public";
        JSToken[JSToken["Static"] = 114] = "Static";
        JSToken[JSToken["Yield"] = 115] = "Yield";
        JSToken[JSToken["Native"] = 116] = "Native";
        JSToken[JSToken["Get"] = 117] = "Get";
        JSToken[JSToken["Set"] = 118] = "Set";
        JSToken[JSToken["AspNetBlock"] = 119] = "AspNetBlock";
        JSToken[JSToken["ReplacementToken"] = 120] = "ReplacementToken";
        JSToken[JSToken["EndOfLine"] = 121] = "EndOfLine";
        JSToken[JSToken["WhiteSpace"] = 122] = "WhiteSpace";
        JSToken[JSToken["Error"] = 123] = "Error";
        JSToken[JSToken["RegularExpression"] = 124] = "RegularExpression";
        JSToken[JSToken["Limit"] = 125] = "Limit";
    })(JSToken = exports.JSToken || (exports.JSToken = {}));
    var Parser;
    (function (Parser) {
        var TokenType;
        (function (TokenType) {
            TokenType[TokenType["uknown"] = 0] = "uknown";
            TokenType[TokenType["alpha"] = 1] = "alpha";
            TokenType[TokenType["num"] = 2] = "num";
            TokenType[TokenType["prnt"] = 4] = "prnt";
            TokenType[TokenType["brkt"] = 8] = "brkt";
            TokenType[TokenType["dot"] = 16] = "dot";
            TokenType[TokenType["prefix"] = 32] = "prefix";
            TokenType[TokenType["filter"] = 64] = "filter";
            TokenType[TokenType["whites"] = 128] = "whites";
            TokenType[TokenType["alphanum"] = 3] = "alphanum";
        })(TokenType = Parser.TokenType || (Parser.TokenType = {}));
        var CToken;
        (function (CToken) {
            CToken[CToken["whitespace"] = 0] = "whitespace";
            CToken[CToken["undefined"] = 1] = "undefined";
            CToken[CToken["boolean"] = 2] = "boolean";
            CToken[CToken["number"] = 3] = "number";
            CToken[CToken["string"] = 4] = "string";
            CToken[CToken["word"] = 5] = "word";
            CToken[CToken["keyword"] = 6] = "keyword";
            CToken[CToken["path"] = 7] = "path";
            CToken[CToken["functionCall"] = 8] = "functionCall";
            CToken[CToken["arrayCall"] = 9] = "arrayCall";
        })(CToken = Parser.CToken || (Parser.CToken = {}));
        function ands(parsers) {
            return function (b, rslt) {
                for (var i = 0; i < parsers.length; i++) {
                    var p = parsers[i];
                    if (!b.exec(p).success)
                        return false;
                }
                return true;
            };
        }
        Parser.ands = ands;
        function ors(parsers) {
            return function (b, result) {
                for (var i = 0; i < parsers.length; i++)
                    if (b.exec(parsers[i]).success)
                        return true;
                return false;
            };
        }
        Parser.ors = ors;
        function _ors(parsers) {
            return function (b, result) {
                for (var i = 0; i < parsers.length; i++) {
                    var p = parsers[i];
                    var x = b.exec(p, true);
                    if (x.success)
                        return clone(x, result);
                }
                return false;
            };
        }
        Parser._ors = _ors;
        var oper;
        (function (oper) {
            oper[oper["or"] = 0] = "or";
            oper[oper["and"] = 1] = "and";
            oper[oper["xor"] = 2] = "xor";
            oper[oper["eq"] = 3] = "eq";
            oper[oper["neq"] = 4] = "neq";
            oper[oper["dot"] = 5] = "dot";
        })(oper = Parser.oper || (Parser.oper = {}));
        var parserBuilder = (function () {
            function parserBuilder(token) {
                this.token = token;
                this.terms = [];
            }
            parserBuilder.prototype.and = function (p, neq) {
                this.terms.push({ oper: oper.and, parser: p, neq: neq });
                return this;
            };
            parserBuilder.prototype.set = function (p, neq) {
                this.terms.push({ oper: oper.dot, parser: p, neq: neq });
                return this;
            };
            parserBuilder.prototype.$open = function (token, oper, neq) {
                var t = new parserBuilder(token);
                t.parent = this;
                this.terms.push({ oper: oper, neq: neq, parser: t.Parser });
                return t;
            };
            parserBuilder.prototype.$close = function () {
                return this.parent;
            };
            parserBuilder.prototype.or = function (p, neq) {
                this.terms.push({ oper: oper.or, parser: p, neq: neq });
                return this;
            };
            parserBuilder.prototype.xor = function (p, neq) {
                this.terms.push({ oper: oper.xor, parser: p, neq: neq });
                return this;
            };
            parserBuilder.prototype.eq = function (p, neq) {
                this.terms.push({ oper: oper.eq, parser: p, neq: neq });
                return this;
            };
            parserBuilder.prototype.neq = function (p, neq) {
                this.terms.push({ oper: oper.neq, parser: p, neq: neq });
                return this;
            };
            Object.defineProperty(parserBuilder.prototype, "Parser", {
                get: function () {
                    var _this = this;
                    if (this._parser)
                        return this._parser;
                    return function (b, rslt) {
                        rslt.tokon = _this.token;
                        if (_this.terms.length == 0)
                            return true;
                        var r = _this.exect(_this.terms[0], b);
                        for (var i = 1; i < _this.terms.length; i++) {
                            var term = _this.terms[i];
                            switch (term.oper) {
                                case oper.and:
                                    r = r && _this.exect(term, b);
                                    break;
                                case oper.or:
                                    r = r || _this.exect(term, b);
                                    break;
                                case oper.eq:
                                    r = r == _this.exect(term, b);
                                    break;
                                case oper.neq:
                                case oper.xor:
                                    r = r != _this.exect(term, b);
                                    break;
                                case oper.dot:
                                    r = _this.exect(term, b);
                                    break;
                                default: throw "";
                            }
                        }
                        return true;
                    };
                },
                enumerable: true,
                configurable: true
            });
            parserBuilder.prototype.exect = function (term, b) {
                var r = b.exec(term.parser).success;
                if (term.neq)
                    r = !r;
                return r;
            };
            return parserBuilder;
        }());
        Parser.parserBuilder = parserBuilder;
        var syntaxer = (function () {
            function syntaxer(src) {
                this.src = src;
                this.stack = [];
                this.index = -1;
                var tokens = new Array(src.length);
                for (var i = 0; i < src.length; i++) {
                    var c = src[i];
                    tokens[i] = {
                        index: i,
                        char: c, code: c.charCodeAt(0), type: syntaxer.getToken(c)
                    };
                }
                this.Tokens = tokens;
                this.currentNode = { success: null, children: [], start: tokens[0], end: tokens[tokens.length - 1], tokon: 'prg', parent: null };
                this.index = 0;
            }
            Object.defineProperty(syntaxer.prototype, "CurrentString", {
                get: function () {
                    return this.src.substring(this.currentNode.start.index, this.index);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(syntaxer.prototype, "ShiftIndex", {
                get: function () { return this.index - this.currentNode.start.index; },
                enumerable: true,
                configurable: true
            });
            syntaxer.prototype.validate = function (s) {
                if (!s)
                    return this.stack.pop(), true;
                var i = this.stack.indexOf(s);
                if (i == -1)
                    return;
                this.stack.splice(i, this.stack.length - i);
                return true;
            };
            syntaxer.prototype.save = function () {
                var t = { index: this.index };
                this.stack.push(t);
                return t;
            };
            syntaxer.prototype.restore = function (s) {
                var i = s ? this.stack.indexOf(s) : this.stack.length - 1;
                if (i == -1)
                    return;
                this.stack.splice(i, this.stack.length - i);
                this.index = s.index;
                return false;
            };
            Object.defineProperty(syntaxer.prototype, "current", {
                get: function () {
                    return this.Tokens[this.index];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(syntaxer.prototype, "previous", {
                get: function () {
                    return this.Tokens[this.index - 1];
                },
                enumerable: true,
                configurable: true
            });
            syntaxer.prototype.next = function () {
                var i = this.index;
                if (this.index < this.Tokens.length)
                    this.index++;
                else
                    return null;
                return this.Tokens[this.index];
            };
            syntaxer.prototype.back = function () {
                var i = this.index;
                if (this.index > 0)
                    this.index--;
                else
                    return null;
                return this.Tokens[this.index];
            };
            syntaxer.prototype.shift = function () {
                this.index++;
                return true;
            };
            syntaxer.prototype.unshift = function () {
                this.index--;
                return true;
            };
            syntaxer.prototype.JumpBy = function (length) {
                this.index += length;
                this.index = this.index < -1 ? -1 : this.index > this.src.length ? this.src.length : this.index;
            };
            syntaxer.prototype.JumpTo = function (index) {
                this.index = index;
            };
            syntaxer.getToken = function (c) {
                var code = c.charCodeAt(0);
                if (code > 64 && code < 91 || code === 95 || code > 96 && code < 123)
                    return TokenType.alpha;
                if (code > 47 && code < 58)
                    return TokenType.num;
                if (syntaxer.opers.indexOf(code) != -1)
                    return TokenType.prefix;
                if (code == 91 || code == 93)
                    return TokenType.brkt;
                if (code == 124)
                    return TokenType.filter;
                if (code === 46)
                    return TokenType.dot;
                if (syntaxer.whites.indexOf(code) != -1)
                    return TokenType.whites;
                if (code === 40 || code === 41)
                    return TokenType.prnt;
                return TokenType.uknown;
            };
            syntaxer.prototype.exec = function (p, nonstrorable) {
                var s = this.save();
                var prnt = this.currentNode;
                var t = { success: false, start: this.current, parent: this.currentNode, children: [] };
                try {
                    if (!this.current)
                        return t;
                    this.currentNode = t;
                    t.success = p(this, t);
                    t.end = this.previous;
                    if (t.success) {
                        this.validate(s);
                        if (!nonstrorable)
                            prnt.children.push(t);
                    }
                    else
                        this.restore(s);
                }
                catch (e) {
                    this.restore(s);
                }
                this.currentNode = prnt;
                return t;
            };
            syntaxer.prototype.fastExec = function (p, ths, args) {
                var s = this.save();
                var prnt = this.currentNode;
                try {
                    if (!this.current)
                        return false;
                    var t = p.apply(ths || this, args);
                    if (t)
                        return true;
                    else
                        this.restore(s);
                }
                catch (e) {
                    this.restore(s);
                }
                return false;
            };
            syntaxer.prototype.getChar = function () {
                var c = this.Tokens[this.index];
                return c && c.char || '';
            };
            syntaxer.prototype.testChar = function (chr) {
                var c = this.Tokens[this.index];
                var x = c ? c.char == chr : false;
                if (x)
                    this.index++;
                return x;
            };
            syntaxer.prototype.getNextChar = function (inc) {
                var i = this.index;
                if (inc)
                    this.index++;
                var c = this.Tokens[i + 1];
                return c ? c.char : '';
            };
            syntaxer.prototype.get = function (shift) {
                var c = this.Tokens[this.index + shift];
                return c && c.char;
            };
            syntaxer.IsHexDigit = function (c) {
                return ('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f');
            };
            syntaxer.IsDigit = function (character) {
                return '0' <= character && character <= '9';
            };
            syntaxer.prototype.ScanNumber = function (leadChar, val) {
                var ci = this.index - 1;
                var noMoreDot = '.' == leadChar;
                var token = noMoreDot ? JSToken.NumericLiteral : JSToken.IntegerLiteral;
                var exponent = false;
                var c;
                var m_literalIssues = false;
                if ('0' == leadChar) {
                    c = this.getChar();
                    if (c == '0')
                        this.shift();
                    if ('x' == c || 'X' == c) {
                        if (syntaxer.IsHexDigit(this.getNextChar(false))) {
                            this.shift();
                            while (syntaxer.IsHexDigit(this.getNextChar(false)))
                                this.shift();
                        }
                        val.value = this.src.substr(ci, this.index - ci);
                        return token;
                    }
                    else if ('b' == c || 'B' == c) {
                        c = this.getNextChar(true);
                        if (c == '1' || c == '0') {
                            while ('0' == (c = this.getNextChar(false)) || c == '1') {
                                this.next();
                            }
                        }
                        val.value = this.src.substr(ci, this.index - ci);
                        return token;
                    }
                    else if ('o' == c || 'O' == c) {
                        c = this.getNextChar(true);
                        if ('0' <= c && c <= '7') {
                            while ('0' <= (c = this.getNextChar(false)) && c <= '7')
                                this.shift();
                        }
                        val.value = this.src.substr(ci, this.index - ci);
                        return token;
                    }
                    else if ('0' <= c && c <= '7') {
                        while ('0' <= c && c <= '7') {
                            c = this.getNextChar(true);
                        }
                        if (syntaxer.IsDigit(c) && '7' < c) {
                            m_literalIssues = true;
                            while ('0' <= c && c <= '9')
                                c = this.getNextChar(true);
                        }
                        val.value = this.src.substr(ci, this.index - ci);
                        return token;
                    }
                    else if (c != 'e' && c != 'E') {
                        this.index = ci + 1;
                        return JSToken.Error;
                    }
                }
                do {
                    c = this.getChar();
                    if (!syntaxer.IsDigit(c)) {
                        if ('.' == c) {
                            if (noMoreDot) {
                                break;
                            }
                            noMoreDot = true;
                            token = JSToken.NumericLiteral;
                        }
                        else if ('e' == c || 'E' == c) {
                            if (exponent) {
                                break;
                            }
                            exponent = noMoreDot = true;
                            token = JSToken.NumericLiteral;
                        }
                        else if ('+' == c || '-' == c) {
                            var e = this.previous.char;
                            if ('e' != e && 'E' != e) {
                                break;
                            }
                        }
                        else {
                            break;
                        }
                    }
                } while (this.shift());
                c = this.previous.char;
                if ('+' == c || '-' == c) {
                    this.index--;
                    c = this.getChar();
                }
                if ('e' == c || 'E' == c) {
                    this.index--;
                    c = this.getChar();
                }
                if (token == JSToken.NumericLiteral && c == '.') {
                    token = JSToken.IntegerLiteral;
                }
                val.value = this.src.substr(ci, this.index - ci);
                return token;
            };
            syntaxer.prototype.ScanString = function (o) {
                var ci = this.index - 1;
                var t = this.current;
                if (!t)
                    return false;
                do {
                    if (t.char == o) {
                        this.shift();
                        return this.src.substr(ci, this.index - ci);
                    }
                    if (t.char == '\\')
                        this.shift();
                } while (t = this.next());
                this.index = ci + 1;
                return null;
            };
            syntaxer.prototype.IsUnicode = function () {
                var t = this.get(0);
                if (t == '\\') {
                    this.shift();
                    if (this.get(0) == 'u') {
                        var c = {};
                        if (this.ScanNumber('0', c) == JSToken.Error) {
                            this.JumpBy(-2);
                            return false;
                        }
                        return true;
                    }
                    else {
                        this.unshift();
                        return false;
                    }
                }
            };
            syntaxer.prototype.ScanIdentifier = function () {
                var i = this.index - 1;
                var t = this.current;
                while ((t = this.next()) && (this.isChar(t) || this.fastExec(this.IsUnicode)))
                    ;
                return this.src.substr(i, this.index - i);
            };
            syntaxer.prototype.isChar = function (t) {
                return !t.type ? false : ((t.type & TokenType.alphanum) == t.type) || (t.code == 36 || t.code == 95);
            };
            syntaxer.prototype.SkipToEndOfLine = function () {
                var c = this.get(0);
                while (c != null && c != '\0'
                    && c != '\n'
                    && c != '\r'
                    && c != '\x2028'
                    && c != '\x2029') {
                    c = this.getNextChar(true);
                }
            };
            syntaxer.prototype.IsLineTerminator = function (c, increment) {
                switch (c) {
                    case '\u000d':
                        if (0x0A == (this.get(increment) || '').charCodeAt(0))
                            this.shift();
                        return true;
                    case '\u000a':
                        return true;
                    case '\u2028':
                        return true;
                    case '\u2029':
                        return true;
                    default:
                        return false;
                }
            };
            syntaxer.prototype.SkipMultilineComment = function () {
                for (;;) {
                    var c = this.get(0);
                    while ('*' == c) {
                        c = this.getNextChar(true);
                        if ('/' == c) {
                            this.shift();
                            return;
                        }
                        if ('\0' == c) {
                            break;
                        }
                        if (this.IsLineTerminator(c, 1))
                            c = this.getNextChar(true);
                    }
                    if ('\0' == c && !c)
                        break;
                    if (this.IsLineTerminator(c, 1))
                        this.shift();
                    this.shift();
                }
            };
            syntaxer.IsBlankSpace = function (c) {
                switch (c) {
                    case '\u0009':
                    case '\u000b':
                    case '\u000c':
                    case '\u0020':
                    case '\u00a0':
                    case '\ufeff':
                        return true;
                    default:
                        return (c < 128) ? false : this.spaceSeparatorsChars.indexOf(c) !== -1;
                }
            };
            syntaxer.prototype._getNextToken = function (val) {
                if (!val)
                    val = {};
                else
                    val.value = void 0;
                var ch = '';
                while (ch = this.get(0)) {
                    this.shift();
                    switch (ch) {
                        case '\n':
                        case '\r':
                        case '\u2028':
                        case '\u2029':
                            continue;
                        case '\t':
                        case '\v':
                        case '\f':
                        case ' ':
                            continue;
                        case '!':
                            if (this.testChar('=')) {
                                if (this.testChar('='))
                                    return JSToken.StrictNotEqual;
                                else
                                    JSToken.NotEqual;
                            }
                            return JSToken.LogicalNot;
                        case '"':
                        case '\'':
                            val.value = this.ScanString(ch);
                            return JSToken.StringLiteral;
                        case '$':
                        case '_':
                            val.value = this.ScanIdentifier();
                            return JSToken.Identifier;
                        case '%':
                            if (this.testChar('=')) {
                                return JSToken.ModuloAssign;
                            }
                            else
                                return JSToken.Modulo;
                        case '&':
                            var token = JSToken.BitwiseAnd;
                            if (this.testChar('&'))
                                return JSToken.LogicalAnd;
                            else if (this.testChar('='))
                                return JSToken.BitwiseAndAssign;
                            return JSToken.BitwiseAnd;
                        case '(':
                            return JSToken.LeftParenthesis;
                        case ')':
                            return JSToken.RightParenthesis;
                        case '*':
                            if (this.testChar('='))
                                return JSToken.MultiplyAssign;
                            return JSToken.Multiply;
                        case '+':
                            if (this.testChar('+'))
                                return JSToken.Increment;
                            else if (this.testChar('='))
                                return JSToken.PlusAssign;
                            return JSToken.Plus;
                        case ',':
                            return JSToken.Comma;
                        case '-':
                            if (this.testChar('-'))
                                return JSToken.Decrement;
                            else if (this.testChar('='))
                                return JSToken.MinusAssign;
                            return JSToken.Minus;
                        case '.':
                            var ch = this.getChar();
                            if (ch == '.' && this.get(1) == '.')
                                return this.JumpBy(2), JSToken.RestSpread;
                            else if (syntaxer.IsDigit(ch)) {
                                var c = {};
                                val.value = this.ScanNumber('.', c);
                            }
                            return JSToken.AccessField;
                        case '/':
                            switch (this.getChar()) {
                                case '/':
                                    this.SkipToEndOfLine();
                                    continue;
                                case '*':
                                    this.SkipMultilineComment();
                                    continue;
                                case '=':
                                    this.shift();
                                    return JSToken.DivideAssign;
                            }
                            return JSToken.Divide;
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                            return this.ScanNumber(ch, val);
                        case ':':
                            return JSToken.Colon;
                        case ';':
                            return JSToken.Semicolon;
                        case '<':
                            token = JSToken.LessThan;
                            if (this.testChar('<'))
                                token = JSToken.LeftShift;
                            if (this.testChar('='))
                                return token == JSToken.LessThan
                                    ? JSToken.LessThanEqual
                                    : JSToken.LeftShiftAssign;
                            return token;
                        case '=':
                            if (this.testChar('='))
                                if (this.testChar('='))
                                    return JSToken.StrictEqual;
                                else
                                    JSToken.Equal;
                            else if (this.testChar('>'))
                                return JSToken.ArrowFunction;
                            return JSToken.Assign;
                        case '>':
                            if (this.testChar('>'))
                                token = this.testChar('>') ? JSToken.UnsignedRightShift : JSToken.RightShift;
                            else
                                token = JSToken.GreaterThan;
                            if (this.testChar('=')) {
                                return token == JSToken.GreaterThan ? JSToken.GreaterThanEqual
                                    : token == JSToken.RightShift ? JSToken.RightShiftAssign
                                        : token == JSToken.UnsignedRightShift ? JSToken.UnsignedRightShiftAssign
                                            : JSToken.Error;
                            }
                            return token;
                        case '?':
                            return JSToken.ConditionalIf;
                        case 'A':
                        case 'B':
                        case 'C':
                        case 'D':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                            val.value = this.ScanIdentifier();
                            return JSToken.Identifier;
                        case '[':
                            return JSToken.LeftBracket;
                        case '\\':
                            val.value = this.ScanIdentifier();
                            if (val.value == null)
                                return JSToken.Error;
                            return JSToken.Identifier;
                        case ']':
                            return JSToken.RightBracket;
                        case '^':
                            if (this.testChar('='))
                                return JSToken.BitwiseXorAssign;
                            return JSToken.BitwiseXor;
                        case '#':
                            return JSToken.Error;
                        case '`':
                            val.value = this.ScanString(ch);
                            return JSToken.StringLiteral;
                        case 'a':
                        case 'b':
                        case 'c':
                        case 'd':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z':
                            val.value = this.ScanIdentifier();
                            var e = Parser.JSKeyword.get(val.value);
                            if (e) {
                                val.value = e;
                                return e.token;
                            }
                            return JSToken.Identifier;
                        case '{':
                            return JSToken.LeftCurly;
                        case '|':
                            if (this.testChar('|'))
                                return JSToken.LogicalOr;
                            else if (this.testChar('='))
                                return JSToken.BitwiseOrAssign;
                            return JSToken.BitwiseOr;
                        case '}':
                            return JSToken.RightCurly;
                        case '~':
                            return JSToken.BitwiseNot;
                        default:
                            if (ch == '\0') {
                                if (this.index >= this.src.length - 1)
                                    return JSToken.EndOfFile;
                                this.shift();
                                continue;
                            }
                            var lowSurrogate = this.getNextChar(false).charCodeAt(0);
                            val.value = this.ScanIdentifier();
                            if (val.value != null)
                                return JSToken.StringLiteral;
                            while (syntaxer.IsBlankSpace(ch = this.getChar())) {
                                this.shift();
                            }
                            continue;
                    }
                }
            };
            syntaxer.opers = [36, 38, 42, 43, 45, 58, 60, 61, 62, 63, 64, 94, 126];
            syntaxer.whites = [0, 9, 10, 10, 13, 32];
            syntaxer.spaceSeparators = [0x0020, 0x00A0, 0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000];
            syntaxer.spaceSeparatorsChars = "\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000";
            return syntaxer;
        }());
        Parser.syntaxer = syntaxer;
        function clone(from, to) {
            to.tokon = from.tokon;
            to.resut = from.resut;
            to.msg = from.msg;
            to.children = from.children;
            return true;
        }
        var parsers;
        (function (parsers) {
            var expr;
            (function (expr) {
                var preffix_oprs = '-+';
                var suffix_inc = '+-';
                function suffix(s, rslt) {
                    var p = s.current.char;
                    if (suffix_inc.indexOf(p) != -1 && s.next() && s.current.char == p) {
                        s.next();
                        rslt.resut = p + p;
                        rslt.tokon = 'suffix_inc';
                        return true;
                    }
                    return false;
                }
                function preffix(s, rslt) {
                    var p = s.current.char;
                    rslt.tokon = 'suffix_inc';
                    if (suffix_inc.indexOf(p) != -1) {
                        if (p !== '!') {
                            if (s.next() && s.current.char == p)
                                rslt.resut = p + p;
                            else
                                return false;
                        }
                        else
                            rslt.resut = p;
                        return true;
                    }
                    return false;
                }
                function Term(s, rslt) {
                    var pre = s.exec(preffix, false);
                    var exp;
                    if (!exp.success)
                        return false;
                    var suff = s.exec(suffix, false);
                    rslt.tokon = 'term';
                    rslt.resut = {
                        pre: pre,
                        exp: exp,
                        suff: suff
                    };
                    return true;
                }
                expr.Term = Term;
                function parent(s, rslt) {
                    if (s.current.char != '(')
                        return false;
                    s.exec(expression);
                }
                expr.parent = parent;
                function Expre() {
                }
                expr.Expre = Expre;
                function BiExpression(strm, rslt) {
                }
                function expression(strm, rslt) {
                    return false;
                }
                function chain(s) {
                }
                expr.chain = chain;
            })(expr = parsers.expr || (parsers.expr = {}));
            function isChar(t) {
                return !t.type ? false : ((t.type & TokenType.alphanum) == t.type) || (t.code == 36 || t.code == 95);
            }
            function _keyword(strm, word, rslt, token) {
                var t = strm.current;
                rslt.tokon = token === void 0 ? 'keyword' : token;
                var i = 0;
                for (var i = 0; i < word.length && t; i++) {
                    if (t.char !== word[i])
                        return false;
                    t = strm.next();
                    if (!t)
                        return i === word.length - 1;
                }
                rslt.resut = word;
                return true;
            }
            parsers._keyword = _keyword;
            function whitespace(strm, rslt) {
                rslt.tokon = CToken.whitespace;
                var t = strm.current;
                do {
                    if (t.type != TokenType.whites)
                        break;
                } while (t = strm.next());
                return true;
            }
            parsers.whitespace = whitespace;
            var _str = {};
            function keyword(word) {
                if (_str[word])
                    return _str[word];
                return _str[word] = function (b, rslt) {
                    return _keyword(b, word, rslt);
                };
            }
            parsers.keyword = keyword;
            function undefined(strm, rslt) {
                var t = strm.current;
                rslt.tokon = CToken.undefined;
                var b;
                if (strm.exec(keyword('null'), true).success)
                    b = null;
                else if (strm.exec(keyword('undefined'), true).success)
                    b = void 0;
                else
                    return false;
                rslt.resut = b;
                return true;
            }
            parsers.undefined = undefined;
            function boolean(strm, rslt) {
                var t = strm.current;
                rslt.tokon = CToken.boolean;
                var b = null;
                if (strm.exec(keyword('true'), true).success)
                    b = true;
                else if (strm.exec(keyword('false'), true).success)
                    b = false;
                else
                    return false;
                rslt.resut = b;
                return true;
            }
            parsers.boolean = boolean;
            function string(strm, rslt) {
                var t = strm.current;
                rslt.tokon = CToken.string;
                var o = t.char;
                if (o === '\'' || o === '"')
                    while (t = strm.next())
                        if (t.char == o) {
                            strm.shift();
                            rslt.resut = strm.CurrentString;
                            return true;
                        }
                        else if (t.char == '\\')
                            strm.shift();
                return false;
            }
            parsers.string = string;
            function number(strm, rslt) {
                var t = strm.current;
                rslt.tokon = CToken.number;
                if (!strm.exec(digit).success)
                    return false;
                strm.exec(ands([keyword('e'), digit]), true);
                rslt.resut = parseFloat(strm.CurrentString);
                return true;
            }
            parsers.number = number;
            function constant(strm, rslt) {
                var str = strm.exec(string, true);
                if (str.success
                    || (str = strm.exec(number, true)).success
                    || (str = strm.exec(boolean, true)).success
                    || (str = strm.exec(undefined, true)).success)
                    return clone(str, rslt);
                return false;
            }
            parsers.constant = constant;
            function digit(strm, rslt) {
                var t = strm.current;
                rslt.tokon = CToken.number;
                var dot = 0;
                var hdig = false;
                while (t.char === '-' || t.char === '+')
                    t = strm.next();
                while (t) {
                    if (t.char === '.') {
                        if (dot) {
                            if (dot === strm.ShiftIndex + 1) {
                                strm.unshift();
                                return hdig;
                            }
                            rslt.resut = parseFloat(strm.CurrentString);
                            return true;
                        }
                        else
                            dot = strm.ShiftIndex;
                    }
                    else if (t.char < '0' || t.char > '9') {
                        if (!hdig)
                            return false;
                        rslt.resut = parseFloat(strm.CurrentString);
                        return true;
                    }
                    else if (hdig === false)
                        hdig = true;
                    t = strm.next();
                }
                return false;
            }
            parsers.digit = digit;
            function wstring(strm, rslt) {
                var t = strm.current;
                var o = t.char;
                while (t = strm.next()) {
                    if (t.char == o) {
                        strm.shift();
                        rslt.resut = strm.CurrentString;
                        return true;
                    }
                    if (t.char == '\\')
                        strm.shift();
                }
                return false;
            }
            function word(strm, rslt) {
                var t = strm.current;
                rslt.tokon = CToken.word;
                if (t.char == '\'' || t.char == '"')
                    return wstring(strm, rslt);
                if (t.type === TokenType.num || !isChar(t))
                    return false;
                while ((t = strm.next()) && isChar(t))
                    ;
                rslt.resut = strm.CurrentString;
                return true;
            }
            parsers.word = word;
            function pint(b, rslt) {
                var t = b.current;
                rslt.tokon = 'pint';
                var s = t.char;
                var p = 1;
                if (s == '+' || s == '-') {
                    if (s == '-')
                        p = -1;
                    b.shift();
                }
                if (t.type != TokenType.num)
                    return false;
                while (t = b.next())
                    if (t.type != TokenType.num)
                        break;
                rslt.resut = parseInt(b.CurrentString);
                return true;
            }
            parsers.pint = pint;
            function anonymouseScop(s, rslt) {
                var t = s.current;
                rslt.tokon = 'anonymousscop';
                if (t.char == '~' && !!s.next()) {
                    var x = s.exec(pint, true);
                    rslt.resut = x.resut;
                    return x.success;
                }
                return false;
            }
            parsers.anonymouseScop = anonymouseScop;
            function namedScop(s, rslt) {
                var t = s.current;
                rslt.tokon = 'namedscop';
                if (t.char == '$' && !!s.next()) {
                    var x = s.exec(word, true);
                    rslt.resut = x.resut;
                    return x.success;
                }
                return false;
            }
            parsers.namedScop = namedScop;
            function subScop(s, rslt) {
                var t = s.current;
                rslt.tokon = 'subscop';
                if (t.char == '*' && !!s.next()) {
                    var x = s.exec(word, true);
                    rslt.resut = x.resut;
                    return x.success;
                }
                return false;
            }
            parsers.subScop = subScop;
            function typedScop(s, rslt) {
                var t = s.current;
                rslt.tokon = 'typedscope';
                var ist;
                var path;
                if (t.char !== '[')
                    return false;
                if (!(t = s.next()))
                    return false;
                if (t.char == ':')
                    ist = t.char, s.next();
                else if (t.char == '=')
                    ist = t.char, s.next();
                var r = (path = s.exec(stringChainedScop)).success && s.current && s.current.char == "]" && s.shift();
                if (r)
                    rslt.resut = { type: ist, path: path.resut };
                return r;
            }
            parsers.typedScop = typedScop;
            var c_word = _ors([word, expression]);
            function bindscope(b, rslt) {
                rslt.tokon = 'bindscope';
                b.exec(whitespace, true);
                var r = b.exec(word, true);
                if (!r.success)
                    return false;
                rslt.resut = [r.resut];
                while (b.current && b.current.type == TokenType.dot) {
                    b.next();
                    var r = b.exec(word, true);
                    if (!r.success)
                        return b.unshift();
                    rslt.resut.push(r.resut);
                }
                return true;
            }
            parsers.bindscope = bindscope;
            function stringChainedScop(b, rslt) {
                b.exec(whitespace, true);
                var r = b.exec(word, true);
                if (!r.success)
                    return false;
                while (b.current && b.current.type == TokenType.dot) {
                    b.next();
                    if (!b.exec(word, true))
                        return b.unshift();
                }
                rslt.resut = b.CurrentString;
                return true;
            }
            parsers.stringChainedScop = stringChainedScop;
            function parents(b, rslt) {
                var t = b.current;
                rslt.tokon = 'parentscop';
                rslt.resut = 0;
                do {
                    if (t.char != '^')
                        break;
                    rslt.resut++;
                } while (t = b.next());
                return !!rslt.resut;
            }
            function prefixPath(b, result) {
                return b.exec(ors([keyword('this'), keyword('data'), anonymouseScop, namedScop, parents]));
            }
            var PreffixcomposePathItem = _ors([keyword('this'), keyword('data'), keyword('window'), anonymouseScop, namedScop, parents]);
            var SuffixcomposePathItem = _ors([parent, subScop, typedScop, bindscope]);
            function composedPath(b, rslt) {
                b.exec(whitespace, true);
                var path = [];
                var s = true;
                var p = b.exec(PreffixcomposePathItem, true);
                var s = !p.success;
                !s && path.push(p);
                while ((s ? (s = false, true) : b.exec(keyword('.'), true).success) && (p = b.exec(SuffixcomposePathItem, true)).success)
                    path.push(p);
                if (path.length == 1)
                    return clone(path[0], rslt);
                rslt.tokon = CToken.path;
                rslt.resut = path;
                return !!path.length;
            }
            parsers.composedPath = composedPath;
            function parent(b, rslt) {
                var pr;
                if (b.exec(keyword('('), true).success && (pr = b.exec(expression, true)).success && b.exec(keyword(')'), true).success)
                    return clone(pr, rslt);
                return false;
            }
            parsers.parent = parent;
            function expression(b, rslt) {
                var pr;
                if ((pr = b.exec(_ors([parent, functionCall, arrayCall, constant, composedPath]), true)).success)
                    return clone(pr, rslt);
                return false;
            }
            parsers.expression = expression;
            function functionCall(b, rslt) {
                b.exec(whitespace, true);
                var s = true;
                rslt.tokon = CToken.functionCall;
                var result = { args: [], caller: void 0 };
                var child;
                rslt.resut;
                if ((child = b.exec(composedPath, true)).success && b.exec(keyword('('), true).success) {
                    result.caller = child;
                    child = b.exec(expression, true);
                    if (child.success) {
                        result.args.push(child);
                        while (b.exec(keyword(','), true).success && (child = b.exec(expression, true)).success)
                            result.args.push(child);
                    }
                    if (b.exec(keyword(')'), false).success) {
                        rslt.resut = result;
                        return true;
                    }
                }
                return false;
            }
            parsers.functionCall = functionCall;
            function arrayCall(b, rslt) {
                b.exec(whitespace, true);
                rslt.tokon = CToken.arrayCall;
                var s = true;
                var arg = expression;
                var child;
                if ((child = b.exec(composedPath, true)).success && b.exec(keyword('['), true).success) {
                    var result = { index: void 0, caller: child };
                    if ((child = b.exec(arg, true)).success && b.exec(keyword(']')).success) {
                        result.index = child;
                        rslt.resut = result;
                        return true;
                    }
                }
                return false;
            }
            parsers.arrayCall = arrayCall;
            var coPathType;
            (function (coPathType) {
                coPathType[coPathType["bindscope"] = 0] = "bindscope";
                coPathType[coPathType["typedscope"] = 1] = "typedscope";
                coPathType[coPathType["subscop"] = 2] = "subscop";
                coPathType[coPathType["parentscop"] = 3] = "parentscop";
                coPathType[coPathType["namedscop"] = 4] = "namedscop";
                coPathType[coPathType["anonymousscop"] = 5] = "anonymousscop";
                coPathType[coPathType["thisscope"] = 6] = "thisscope";
                coPathType[coPathType["keyword"] = 7] = "keyword";
            })(coPathType = parsers.coPathType || (parsers.coPathType = {}));
        })(parsers = Parser.parsers || (Parser.parsers = {}));
        function parseComposePath(str) {
            var s = new Parser.syntaxer(str);
            return s.exec(Parser.parsers.composedPath);
        }
        Parser.parseComposePath = parseComposePath;
        function parseExpression(str) {
            var s = new Parser.syntaxer(str);
            return s.exec(Parser.parsers.expression);
        }
        Parser.parseExpression = parseExpression;
        function Execute(code, parser) {
            var s = new Parser.syntaxer(code);
            return s.exec(parser);
        }
        Parser.Execute = Execute;
    })(Parser = exports.Parser || (exports.Parser = {}));
    (function (Parser) {
        var JSKeyword = (function () {
            function JSKeyword(token, name, next) {
                this.token = token;
                this.name = name;
                if (!JSKeyword.keywors)
                    JSKeyword.InitKeywords();
                JSKeyword.keywors[name] = this;
            }
            JSKeyword.get = function (s) {
                if (!this.keywors)
                    this.InitKeywords();
                return this.keywors[s];
            };
            JSKeyword.InitKeywords = function () {
                this.keywors = {};
                new JSKeyword(JSToken.Break, "break");
                new JSKeyword(JSToken.Case, "case");
                new JSKeyword(JSToken.Catch, "catch");
                new JSKeyword(JSToken.Class, "class");
                new JSKeyword(JSToken.Const, "const");
                new JSKeyword(JSToken.Continue, "continue");
                new JSKeyword(JSToken.Do, "do");
                new JSKeyword(JSToken.Delete, "delete");
                new JSKeyword(JSToken.Default, "default");
                new JSKeyword(JSToken.Debugger, "debugger");
                new JSKeyword(JSToken.Else, "else");
                new JSKeyword(JSToken.Enum, "enum");
                new JSKeyword(JSToken.Export, "export");
                new JSKeyword(JSToken.Extends, "extends");
                new JSKeyword(JSToken.For, "for");
                new JSKeyword(JSToken.False, "false");
                new JSKeyword(JSToken.Finally, "finally");
                new JSKeyword(JSToken.Function, "function");
                new JSKeyword(JSToken.Get, "get");
                new JSKeyword(JSToken.If, "if");
                new JSKeyword(JSToken.In, "in");
                new JSKeyword(JSToken.Import, "import");
                new JSKeyword(JSToken.Interface, "interface");
                new JSKeyword(JSToken.Implements, "implements");
                new JSKeyword(JSToken.InstanceOf, "instanceof");
                new JSKeyword(JSToken.Let, "let");
                new JSKeyword(JSToken.New, "new");
                new JSKeyword(JSToken.Null, "null");
                new JSKeyword(JSToken.Native, "native");
                new JSKeyword(JSToken.Public, "public");
                new JSKeyword(JSToken.Package, "package");
                new JSKeyword(JSToken.Private, "private");
                new JSKeyword(JSToken.Protected, "protected");
                new JSKeyword(JSToken.Return, "return");
                new JSKeyword(JSToken.Set, "set");
                new JSKeyword(JSToken.Super, "super");
                new JSKeyword(JSToken.Static, "static");
                new JSKeyword(JSToken.Switch, "switch");
                new JSKeyword(JSToken.Try, "try");
                new JSKeyword(JSToken.This, "this");
                new JSKeyword(JSToken.True, "true");
                new JSKeyword(JSToken.Throw, "throw");
                new JSKeyword(JSToken.TypeOf, "typeof");
                new JSKeyword(JSToken.Var, "var");
                new JSKeyword(JSToken.Void, "void");
                new JSKeyword(JSToken.With, "with");
                new JSKeyword(JSToken.While, "while");
                new JSKeyword(JSToken.Yield, "yield");
            };
            return JSKeyword;
        }());
        Parser.JSKeyword = JSKeyword;
        var Context = (function () {
            function Context() {
            }
            Context.prototype.Is = function (token) {
                return this.Token == token;
            };
            Context.prototype.IsEither = function (token1, token2) {
                var target = this.Token;
                return (target == token1) || (target == token2);
            };
            Context.prototype.IsOne = function () {
                var tokens = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    tokens[_i] = arguments[_i];
                }
                if (tokens != null) {
                    var target = this.Token;
                    for (var ndx = tokens.length - 1; ndx >= 0; --ndx) {
                        if (tokens[ndx] == target) {
                            return true;
                        }
                    }
                }
                return false;
            };
            return Context;
        }());
        var AST = (function (_super) {
            __extends(AST, _super);
            function AST() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.currentContext = new Context();
                return _this;
            }
            AST.prototype.getNextToken = function () {
                var v = {};
                this.currentContext.Token = this._getNextToken(v);
                this.currentContext.Value = v.value;
                return this.currentContext.Token;
            };
            AST.prototype.ParseStatement = function (fSourceElement, skipImportantComment) {
                if (skipImportantComment === void 0) { skipImportantComment = false; }
                var statement = null;
                var tkn = this.currentContext.Token;
                while (true)
                    switch (tkn) {
                        case JSToken.EndOfFile:
                            return null;
                        case JSToken.Semicolon:
                            this.getNextToken();
                            return null;
                        case JSToken.RightCurly:
                            this.getNextToken();
                            break;
                        case JSToken.LeftCurly:
                        case JSToken.Debugger:
                            this.getNextToken();
                            if (this.currentContext.Token == JSToken.Semicolon)
                                this.getNextToken();
                            return null;
                        case JSToken.Var:
                        case JSToken.Const:
                        case JSToken.Let:
                        case JSToken.If:
                        case JSToken.For:
                        case JSToken.Do:
                        case JSToken.While:
                        case JSToken.Continue:
                        case JSToken.Break:
                        case JSToken.Return:
                        case JSToken.With:
                        case JSToken.Switch:
                        case JSToken.Throw:
                        case JSToken.Try:
                        case JSToken.Function:
                        case JSToken.Class:
                        case JSToken.Else:
                            this.getNextToken();
                            break;
                        case JSToken.ConditionalCommentStart:
                        case JSToken.ConditionalCompilationOn:
                            this.getNextToken();
                        case JSToken.ConditionalCompilationSet:
                        case JSToken.ConditionalCompilationIf:
                        case JSToken.ConditionalCompilationElseIf:
                        case JSToken.ConditionalCompilationElse:
                            this.getNextToken();
                        case JSToken.ConditionalCompilationEnd:
                            this.getNextToken();
                        case JSToken.Import:
                        case JSToken.Export:
                        case JSToken.Identifier:
                            tkn = 'default';
                            continue;
                        case JSToken.Module:
                            tkn = 'default';
                            continue;
                        default:
                            break;
                    }
            };
            return AST;
        }(Parser.syntaxer));
        Parser.AST = AST;
    })(Parser = exports.Parser || (exports.Parser = {}));
    (function (Parser) {
        var StringTemplate = (function () {
            function StringTemplate() {
                this.stack = [];
                this.pcurs = 0;
                this.isCode = false;
            }
            Object.defineProperty(StringTemplate.prototype, "currentChar", {
                get: function () {
                    return this.code[this.curs];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StringTemplate.prototype, "nextChar", {
                get: function () {
                    return this.code[this.curs + 1];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StringTemplate.prototype, "MoveNext", {
                get: function () {
                    this.curs++;
                    return this.curs < this.len;
                },
                enumerable: true,
                configurable: true
            });
            StringTemplate.prototype.init = function (code) {
                this.code = code;
                this.curs = -1;
                this.len = code.length;
                this.stack = [];
                this.pcurs = 0;
                this.isCode = false;
            };
            StringTemplate.prototype.getString = function () {
                var end = this.currentChar;
                var s = this.curs + 1;
                var pc = '\0';
                while (this.MoveNext) {
                    {
                        if (pc === '\\')
                            continue;
                        pc = this.currentChar;
                        if (pc === end)
                            return this.code.substr(s, this.curs - s);
                    }
                }
                throw "Error";
            };
            StringTemplate.prototype._toStack = function () {
                var len = this.curs - this.pcurs;
                if (len != 0) {
                    var str = this.code.substr(this.pcurs, len);
                    this.stack.push(this.isCode ? { Code: str } : str);
                }
                if (this.curs < this.len) {
                    this.curs += 1;
                    this.pcurs = this.curs + 1;
                    this.isCode = !this.isCode;
                }
                else
                    this.isCode = false;
                return this.stack;
            };
            StringTemplate.prototype.Compile = function (code) {
                if (code[0] !== "=")
                    this.init(code);
                else
                    this.init(code.substr(1));
                while (this.MoveNext) {
                    var c = this.currentChar;
                    if (this.isCode) {
                        if (c === '"')
                            this.getString();
                        else if (c === "'")
                            this.getString();
                        else if (c === '}' && this.nextChar === "}")
                            this._toStack();
                    }
                    else if (c === '{' && this.nextChar === '{')
                        this._toStack();
                }
                return this._toStack();
            };
            StringTemplate.Compile = function (code) {
                return this.default.Compile(code);
            };
            StringTemplate.toRegString = function (s) {
                var rs = "";
                for (var i = 0; i < s.length; i++) {
                    var cc = s[i];
                    if (cc === '"' || cc === '\'') {
                        rs += "\\" + cc;
                    }
                    else
                        rs += cc;
                }
                return rs;
            };
            StringTemplate.GenearteString = function (stack) {
                var strs = new Array(stack.length);
                for (var i = 0; i < stack.length; i++) {
                    var s = stack[i];
                    if (typeof s === 'string')
                        strs[i] = '"' + this.toRegString(s) + '"';
                    else {
                        strs[i] = s.result;
                    }
                }
                return strs.join('');
            };
            StringTemplate.default = new StringTemplate();
            return StringTemplate;
        }());
        Parser.StringTemplate = StringTemplate;
    })(Parser = exports.Parser || (exports.Parser = {}));
    window['p'] = Parser;
});
define("sys/UI", ["require", "exports", "sys/Corelib", "sys/Filters", "context", "template|../assets/templates/UITemplates.html"], function (require, exports, corelib_1, Filters_1, context_2, tmplates) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var px = 'px';
    var $Error = Error;
    var $Text = Text;
    var UI;
    (function (UI) {
        var KeyboardControllerResult;
        (function (KeyboardControllerResult) {
            KeyboardControllerResult[KeyboardControllerResult["Handled"] = 0] = "Handled";
            KeyboardControllerResult[KeyboardControllerResult["Release"] = -1] = "Release";
            KeyboardControllerResult[KeyboardControllerResult["ByPass"] = 2] = "ByPass";
        })(KeyboardControllerResult = UI.KeyboardControllerResult || (UI.KeyboardControllerResult = {}));
        var DragableElement = (function () {
            function DragableElement(element, header) {
                this.element = element;
                this.header = header;
                this.pos1 = 0;
                this.pos2 = 0;
                this.pos3 = 0;
                this.pos4 = 0;
                this.closeDragElementHandler = {
                    handleEvent: function (e) {
                        this.owner.closeDragElement();
                    }, owner: this
                };
                this.elementDragHandler = {
                    handleEvent: function (e) {
                        this.owner.elementDrag(e);
                    }, owner: this
                };
                this.initialize(element, header);
            }
            DragableElement.prototype.elementDrag = function (e) {
                e = e || window.event;
                e.preventDefault();
                this.pos1 = this.pos3 - e.clientX;
                this.pos2 = this.pos4 - e.clientY;
                this.pos3 = e.clientX;
                this.pos4 = e.clientY;
                this.element.style.top = (this.element.offsetTop - this.pos2) + "px";
                this.element.style.left = (this.element.offsetLeft - this.pos1) + "px";
            };
            DragableElement.prototype.closeDragElement = function () {
                document.removeEventListener('mouseup', this.closeDragElementHandler);
                document.removeEventListener('mousemove', this.elementDragHandler);
            };
            DragableElement.prototype.handleEvent = function (e) {
                e = e || window.event;
                e.preventDefault();
                this.pos3 = e.clientX;
                this.pos4 = e.clientY;
                document.addEventListener('mouseup', this.closeDragElementHandler);
                document.addEventListener('mousemove', this.elementDragHandler);
            };
            DragableElement.prototype.initialize = function (element, header) {
                this.Dispose();
                this.element = element;
                this.header = header;
                this.header.addEventListener('mousedown', this);
            };
            DragableElement.prototype.Dispose = function () {
                this.closeDragElement();
                this.header.removeEventListener('mousedown', this);
                this.element = void 0;
                this.header = void 0;
            };
            return DragableElement;
        }());
        var keyCominerEvent = (function () {
            function keyCominerEvent(Owner) {
                this.Owner = Owner;
                this.OnComined = new corelib_1.bind.EventListener(0);
                this.handlers = {};
            }
            keyCominerEvent.prototype.sort = function (ar) {
                function depth(el) {
                    var i = 0;
                    while (el) {
                        i++;
                        el = el.parentElement;
                    }
                    return i;
                }
                function order(a1, a2) {
                    if (a1 == a2)
                        return 0;
                    while (a1) {
                        a1 = a1.nextSibling;
                        if (a1 == a2)
                            return -1;
                    }
                    return 1;
                }
                ar.sort(function (a, b) {
                    if (!a.target)
                        return -1;
                    if (!b.target)
                        return 1;
                    if (!a.target && !b.target)
                        return 0;
                    var v1 = a.target instanceof UI.JControl ? a.target.View : a.target;
                    var v2 = b.target instanceof UI.JControl ? b.target.View : b.target;
                    var x;
                    return v1.contains(v2) ? 1 : v2.contains(v1) ? -1 : x = (depth(v2) - depth(v1)) > 0 ? 1 : x < 0 ? -1 : order(v1, v2);
                });
            };
            keyCominerEvent.prototype.sort1 = function (ar) {
                function depth(el) {
                    var i = 0;
                    while (el) {
                        i++;
                        el = el.parentElement;
                    }
                    return i;
                }
                function order(a1, a2) {
                    if (a1 == a2)
                        return 0;
                    while (a1) {
                        a1 = a1.nextSibling;
                        if (a1 == a2)
                            return -1;
                    }
                    return 1;
                }
                ar.sort(function (v1, v2) {
                    var x;
                    return v1.contains(v2) ? 1 : v2.contains(v1) ? -1 : x = (depth(v2) - depth(v1)) > 0 ? 1 : x < 0 ? -1 : order(v1, v2);
                });
            };
            Object.defineProperty(keyCominerEvent.prototype, "KeyA", {
                get: function () { return this._keyA; },
                set: function (v) {
                    this._keyA = v;
                    this._keyB = null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(keyCominerEvent.prototype, "KeyB", {
                get: function () { return this._keyB; },
                set: function (v) {
                    if (this._keyA == null) {
                        this._keyA = v;
                        this._keyB = null;
                        return;
                    }
                    this._keyB = v;
                    this._rise();
                },
                enumerable: true,
                configurable: true
            });
            keyCominerEvent.prototype.elementInViewport1 = function (el) {
                var top = el.offsetTop;
                var left = el.offsetLeft;
                var width = el.offsetWidth;
                var height = el.offsetHeight;
                while (el.offsetParent) {
                    el = el.offsetParent;
                    top += el.offsetTop;
                    left += el.offsetLeft;
                }
                return (top < (window.pageYOffset + window.innerHeight) &&
                    left < (window.pageXOffset + window.innerWidth) &&
                    (top + height) > window.pageYOffset &&
                    (left + width) > window.pageXOffset);
            };
            keyCominerEvent.prototype.elementInViewport = function (el) {
                if (!this.dom.contains(el))
                    return false;
                var top = el.offsetTop;
                var left = el.offsetLeft;
                var width = el.offsetWidth;
                var height = el.offsetHeight;
                while (el.offsetParent) {
                    el = el.offsetParent;
                    top += el.offsetTop;
                    left += el.offsetLeft;
                }
                var window = this.dom;
                return (top < (window.offsetTop + window.offsetHeight) &&
                    left < (window.offsetLeft + window.offsetWidth) &&
                    (top + height) > window.offsetTop &&
                    (left + width) > window.offsetLeft);
            };
            Object.defineProperty(keyCominerEvent.prototype, "Cancel", {
                set: function (v) {
                    this._stopEvent = !!v;
                },
                enumerable: true,
                configurable: true
            });
            keyCominerEvent.prototype._rise = function () {
                var c = this.handlers[this._keyA.key.toUpperCase()] && this.handlers[this._keyA.key.toUpperCase()][this._keyB.key.toUpperCase()];
                this._stopEvent = false;
                if (c)
                    for (var i = this.sort(c) || 0; i < c.length; i++) {
                        try {
                            var k = c[i];
                            var t = k.target;
                            if (t) {
                                if (!this.elementInViewport(t instanceof UI.JControl ? t.View : t))
                                    continue;
                            }
                            k.Invoke.call(k.Owner || k.target || this.Owner, this, k);
                        }
                        catch (e) {
                        }
                        if (this._stopEvent)
                            break;
                    }
                this._stopEvent = undefined;
                this.OnComined.PInvok(0, [this], this.Owner);
                this.reset();
            };
            keyCominerEvent.prototype.reset = function () {
                this._keyB = null;
                this._keyA = null;
            };
            keyCominerEvent.prototype.handleEvent = function (e) {
                e.preventDefault();
                if (!this._pause && e.ctrlKey) {
                    if ((e.keyCode > 47 && e.keyCode < 91) || (e.keyCode > 97 && e.keyCode < 123)) {
                        this.KeyB = e;
                    }
                    return;
                }
                this.reset();
            };
            keyCominerEvent.prototype.isValid = function (keyA) {
                if (typeof keyA === 'string') {
                    if (keyA.length == 1) {
                        keyA = keyA.charCodeAt(0);
                        return (keyA > 47 && keyA < 91) || (keyA > 97 && keyA < 123);
                    }
                }
                else if (typeof keyA === 'number')
                    return (keyA > 47 && keyA < 91) || (keyA > 97 && keyA < 123);
                return false;
            };
            keyCominerEvent.prototype.On = function (keyA, keyB, handle, target, owner) {
                if (this.isValid(keyA) && this.isValid(keyB) && typeof handle === 'function') {
                    keyA = keyA.toUpperCase();
                    keyB = keyB.toUpperCase();
                    !this.handlers[keyA] && (this.handlers[keyA] = {});
                    var c = this.handlers[keyA][keyB];
                    !c && (this.handlers[keyA][keyB] = c = []);
                    var x = { Invoke: handle, Owner: owner, target: target };
                    c.push(x);
                    c.sort();
                    return x;
                }
                else
                    throw "unvalide arguments";
            };
            keyCominerEvent.prototype.Off = function (keyA, keyB, e) {
                if (this.isValid(keyA) && this.isValid(keyB)) {
                    keyA = keyA.toUpperCase();
                    keyB = keyB.toUpperCase();
                    var c = this.handlers[keyA] && this.handlers[keyA][keyB];
                    if (!c)
                        return;
                    var i = c.indexOf(e);
                    if (i !== -1)
                        c.splice(i, 1);
                }
                else
                    throw "unvalide arguments";
            };
            keyCominerEvent.prototype.pause = function () { this._pause = true; };
            keyCominerEvent.prototype.resume = function () { this._pause = false; };
            keyCominerEvent.prototype.attachTo = function (dom) {
                if (this.dom)
                    this.dom.removeEventListener('keyup', this);
                this.dom = dom;
                this.dom.addEventListener('keyup', this);
            };
            keyCominerEvent.prototype.stopPropagation = function () {
            };
            return keyCominerEvent;
        }());
        UI.keyCominerEvent = keyCominerEvent;
        var DesktopKeyboardManager = (function (_super) {
            __extends(DesktopKeyboardManager, _super);
            function DesktopKeyboardManager(desk) {
                var _this_1 = _super.call(this, desk) || this;
                _this_1.desk = desk;
                _super.prototype.attachTo.call(_this_1, desk.View);
                return _this_1;
            }
            Object.defineProperty(DesktopKeyboardManager.prototype, "dom", {
                get: function () {
                    var app = this.desk.CurrentApp;
                    return ((app && app.CurrentModal) || app || this.desk).View;
                },
                set: function (v) { },
                enumerable: true,
                configurable: true
            });
            DesktopKeyboardManager.prototype.attachTo = function (v) {
            };
            return DesktopKeyboardManager;
        }(keyCominerEvent));
        UI.DesktopKeyboardManager = DesktopKeyboardManager;
        var KeyboardControllerManager = (function () {
            function KeyboardControllerManager(Desktop) {
                this.Desktop = Desktop;
                this._controllers = [];
            }
            KeyboardControllerManager.prototype.Current = function () {
                return this._current;
            };
            KeyboardControllerManager.prototype.GetController = function (nc) {
                if (!nc)
                    throw 'Argument null exception';
                if (this._current == nc)
                    return true;
                if (!nc)
                    throw "Argument null exception";
                var c = this._current;
                var e = { Controller: nc };
                if (c)
                    if (c.stackable ? c.onStop && !c.onStop(e) : c.onPause && !c.onPause(e))
                        return false;
                if (nc.onResume && !nc.onResume(e))
                    return this.ResumeStack();
                if (c)
                    if (!c.stackable)
                        this._controllers.pop();
                this._controllers.push(nc);
                return true;
            };
            KeyboardControllerManager.prototype.Release = function (c) {
                var i = this._controllers.indexOf(c);
                if (i == -1)
                    return false;
                var j = this._controllers.length - i;
                while (j-- >= 0) {
                    var c = this._controllers[this._controllers.length - 1];
                    if (c && c.onStop && !c.onStop({ Controller: c }))
                        return false;
                    this._controllers.pop();
                    this._current = this._controllers[this._controllers.length - 1];
                }
                return true;
            };
            KeyboardControllerManager.prototype.ResumeStack = function () {
                var nc = this._controllers[this._controllers.length - 1];
                var e;
                while (nc && nc.onResume && !nc.onResume(e = { Controller: nc })) {
                    this._controllers.pop();
                    this._current = nc = this._controllers[this._controllers.length - 1];
                }
                return true;
            };
            KeyboardControllerManager.prototype.Invoke = function (e) {
                var c;
                var i = this._controllers.length;
                var a = [void 0];
                while (c = c = this._controllers[--i]) {
                    a[0] = { Controller: c, e: e };
                    corelib_1.helper.TryCatch(c, c.invoke, void 0, a);
                    var r = a[0].Result || 0;
                    if ((r & KeyboardControllerResult.Release) == KeyboardControllerResult.Release)
                        this.Release(c);
                    if ((r & KeyboardControllerResult.ByPass) !== KeyboardControllerResult.ByPass)
                        return r;
                }
                return r || 0;
            };
            return KeyboardControllerManager;
        }());
        UI.KeyboardControllerManager = KeyboardControllerManager;
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        function _() {
            this.init = true;
            this.initialize();
            this.OnFullInitialized();
        }
        function __(v) {
            var _this_1 = this;
            if (v != null && !this.init) {
                if (v.init) {
                    _.call(this);
                }
                else {
                    var pv = this.parent;
                    if (pv && !pv.init)
                        pv._onInitialize.Remove(this._id);
                    v._onInitialize.Add(function (_v) {
                        if (_this_1.parent == _v)
                            _.call(_this_1);
                        else
                            throw "";
                    }, this._id);
                }
            }
        }
        var Events;
        (function (Events) {
            Events[Events["keydown"] = 2] = "keydown";
            Events[Events["keyup"] = 3] = "keyup";
            Events[Events["keypress"] = 5] = "keypress";
        })(Events = UI.Events || (UI.Events = {}));
        var JControl = (function (_super) {
            __extends(JControl, _super);
            function JControl(_view) {
                var _this_1 = _super.call(this, 3) || this;
                _this_1._view = _view;
                _this_1._onInitialize = new corelib_1.bind.EventListener(_this_1, true);
                _this_1._display = undefined;
                _this_1._id = ++JControl.counter;
                _this_1.init = false;
                _this_1._events = 0;
                if (_view) {
                    if (_view.id === '')
                        _view.id = _this_1._id + "";
                }
                if (!_this_1._hasValue_())
                    _this_1.Value = _this_1;
                return _this_1;
            }
            JControl.prototype.getParent = function () {
                return this.Parent || this._parentScop;
            };
            JControl.prototype._OnValueChanged = function (e) {
            };
            JControl.prototype.setParent = function (v) {
                if (!this.canBeParent(v))
                    throw null;
                if (v instanceof JControl)
                    v.Add(this);
                else
                    this._parentScop = v;
                return true;
            };
            JControl.prototype.CombinatorKey = function (keyA, keyB, callback) {
                return Desktop.Current.KeyCombiner.On(keyA, keyB, callback, this, this);
            };
            JControl.prototype.SearchParents = function (type) {
                var p = this.Parent;
                while (p)
                    if (p instanceof type)
                        return p;
                    else
                        p = p.Parent;
            };
            JControl.LoadCss = function (url) {
                var head = document.head;
                var link = document.createElement('link');
                link.setAttribute('as', 'style');
                link.rel = 'stylesheet';
                link.type = 'text/css';
                link.href = url;
                link.media = 'all';
                head.appendChild(link);
                return link;
            };
            JControl.__fields__ = function () { return []; };
            Object.defineProperty(JControl.prototype, "InnerHtml", {
                get: function () { return this._view.innerHTML; },
                enumerable: true,
                configurable: true
            });
            JControl.prototype.Float = function (v) {
                this._view.style.cssFloat = v === 0 ? 'left' : (v === 1 ? 'initiale' : 'right');
            };
            JControl.prototype.Clear = function () {
                this._view.innerHTML = '';
            };
            Object.defineProperty(JControl.prototype, "OnInitialized", {
                set: function (m) {
                    if (this.init)
                        m(this);
                    else
                        this._onInitialize.On = m;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(JControl.prototype, "Presenter", {
                get: function () { return this._presenter || this; },
                set: function (v) { this._presenter = v || this; },
                enumerable: true,
                configurable: true
            });
            JControl.prototype.setAttribute = function (name, value) {
                this.View.setAttribute(name, value);
                return this;
            };
            JControl.prototype.OnKeyDown = function (e) { };
            JControl.prototype.OnContextMenu = function (e) {
            };
            JControl.prototype.OnKeyCombined = function (e, v) { };
            JControl.prototype.setAttributes = function (attributes) {
                var v = this.View;
                for (var i in attributes)
                    v.setAttribute(i, attributes[i]);
                return this;
            };
            JControl.prototype.applyStyle = function () {
                this._view.classList.add.apply(this._view.classList, arguments);
                return this;
            };
            JControl.prototype.disapplyStyle = function () {
                this._view.classList.remove.apply(this._view.classList, arguments);
                return this;
            };
            Object.defineProperty(JControl.prototype, "Visible", {
                get: function () {
                    return this.View.style.display != 'none' && this.View.style.visibility == 'visible';
                },
                set: function (v) {
                    v = v === true;
                    if (v === this._display)
                        return;
                    this._display = this.View.style.display !== 'none' ? this.View.style.display : "";
                    if (v)
                        this.View.style.display = this._display;
                    else
                        this.View.style.display = 'none';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(JControl.prototype, "Wait", {
                set: function (v) {
                    if (v)
                        this.applyStyle('Wait');
                    else
                        this.disapplyStyle('Wait');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(JControl.prototype, "Enable", {
                get: function () {
                    return this.View.style.pointerEvents != 'none';
                },
                set: function (v) {
                    this.View.style.pointerEvents = v ? 'all' : 'none';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(JControl.prototype, "Parent", {
                get: function () {
                    return this.parent;
                },
                set: function (v) {
                    this.parent = v;
                    __.call(this, v);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(JControl.prototype, "IsInit", {
                get: function () { return this.init; },
                enumerable: true,
                configurable: true
            });
            JControl.prototype.OnFullInitialized = function () {
                this._onInitialize.PInvok(this, [this], this);
            };
            Object.defineProperty(JControl.prototype, "OnPaint", {
                set: function (method) {
                    corelib_1.PaintThread.OnPaint({ args: [this], method: method, owner: this });
                },
                enumerable: true,
                configurable: true
            });
            JControl.prototype.instantanyInitializeParent = function () { return false; };
            Object.defineProperty(JControl.prototype, "ToolTip", {
                set: function (t) { this.View.title = t; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(JControl.prototype, "View", {
                get: function () {
                    return this._view;
                },
                enumerable: true,
                configurable: true
            });
            JControl.prototype._hasValue_ = function () { return false; };
            JControl.createDiv = function () { return document.createElement('div'); };
            JControl.prototype.addEventListener = function (event, handle, param, owner) {
                var x = new corelib_1.basic.DomEventHandler(this._view, event, owner, JControl._handle, { jc: this, handle: handle, p: param });
                x.Start();
                return x;
            };
            JControl._handle = function (eth, ev, p) {
                p.handle.call(this, p.jc, ev, p.p);
            };
            JControl.prototype.AddRange = function (chidren) {
                for (var i = 0, l = chidren.length; i < l; i++)
                    this.Add(chidren[i]);
                return this;
            };
            JControl.prototype.Add = function (child) {
                if (child.parent != null) {
                    if (child.parent === this)
                        return;
                    child.parent.Remove(child, false);
                }
                child = this.getTemplate(child);
                child.Parent = this;
                this.View.appendChild(child.View);
                return this;
            };
            JControl.prototype.IndexOf = function (child) {
            };
            JControl.prototype.Insert = function (child, to) {
                if (child.parent != null) {
                    child.parent.Remove(child, false);
                }
                child = this.getTemplate(child);
                child.Parent = this;
                this.View.insertChildAtIndex(child.View, to);
                return this;
            };
            JControl.prototype.Remove = function (child, dispose) {
                if (child.parent != this)
                    return false;
                child.Parent = null;
                if (this.View.contains(child.View))
                    this.View.removeChild(child.View);
                else if (child._view.parentNode != null)
                    child.View.remove();
                if (dispose)
                    child.Dispose();
                return true;
            };
            JControl.prototype.getTemplate = function (child) {
                return child;
            };
            Object.defineProperty(JControl.prototype, "Id", {
                get: function () {
                    return this._id;
                },
                enumerable: true,
                configurable: true
            });
            JControl.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                if (this.parent)
                    this.parent.Remove(this, false);
                if ((this._presenter != null) && (this._presenter != this))
                    this._presenter.Dispose();
                this._presenter = null;
                this.Parent = null;
                this._view = null;
                this._display = null;
                this._onInitialize.Dispose();
                this._presenter = null;
                this.parent = null;
                this.Presenter;
                corelib_1.basic.DomEventHandler.Dispose(this._view);
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            JControl.prototype.OnHotKey = function () {
            };
            Object.defineProperty(JControl.prototype, "HotKey", {
                get: function () { return this._hotKey; },
                set: function (v) {
                    if (!this.isEventRegistred(Events.keyup))
                        this.registerEvent(Events.keypress);
                    this._hotKey = v;
                },
                enumerable: true,
                configurable: true
            });
            JControl.prototype.handleEvent = function (e) {
                switch (Events[e.type]) {
                    case Events.keydown:
                        break;
                    case Events.keyup:
                        if (this._hotKey && this._hotKey.IsPressed(e))
                            this.OnHotKey();
                        break;
                    case Events.keypress:
                        break;
                }
            };
            JControl.prototype.isEventRegistred = function (event) {
                var t = typeof (event) == 'number' ? event : Events[event];
                if (t === undefined)
                    throw "event is not registred";
                return (this._events / t) % 1 === 0;
            };
            JControl.prototype.registerEvent = function (event) {
                this._view.addEventListener(Events[event], this);
            };
            JControl.toggleClass = function (dom, className) {
                if (dom.classList.contains(className))
                    dom.classList.remove(className);
                else
                    dom.classList.add(className);
            };
            JControl.counter = 0;
            return JControl;
        }(corelib_1.bind.Scop));
        UI.JControl = JControl;
        var attributes;
        (function (attributes) {
            function ContentProperty(propertyName) {
                return function (target) {
                    if (!corelib_1.reflection.IsInstanceOf(target, UI.JControl))
                        throw "Attribute ContentControl cannot apply to non-UI.JControl Element";
                    ContentProperty.declare(target, propertyName);
                };
            }
            attributes.ContentProperty = ContentProperty;
            function ChildrenProperty(e) {
                return function (target) {
                    if (!corelib_1.reflection.IsInstanceOf(target, UI.JControl))
                        throw "Attribute ChildrenProperty cannot apply to non-UI.JControl Element";
                    ChildrenProperty.declare(target, e);
                };
            }
            attributes.ChildrenProperty = ChildrenProperty;
            function SelfProcessing() {
                return function (target) {
                    if (!corelib_1.reflection.IsInstanceOf(target, UI.JControl))
                        throw "Attribute ChildrenProperty cannot apply to non-UI.JControl Element";
                    SelfProcessing.declare(target, true);
                };
            }
            attributes.SelfProcessing = SelfProcessing;
            corelib_1.Attributes.asAttribute(ContentProperty, { AllowMultiple: false, Heritable: true, Target: corelib_1.Attributes.AttributeTargets.Class });
            corelib_1.Attributes.asAttribute(ChildrenProperty, { AllowMultiple: false, Heritable: true, Target: corelib_1.Attributes.AttributeTargets.Class });
            corelib_1.Attributes.asAttribute(SelfProcessing, { AllowMultiple: false, Heritable: true, Target: corelib_1.Attributes.AttributeTargets.Class });
        })(attributes = UI.attributes || (UI.attributes = {}));
        var Control = (function (_super) {
            __extends(Control, _super);
            function Control(view) {
                return _super.call(this, view) || this;
            }
            Object.defineProperty(Control.prototype, "Children", {
                get: function () { return this._c || (this._c = []); },
                enumerable: true,
                configurable: true
            });
            Control.prototype.Add = function (child) {
                if (!this.Check(child))
                    throw 'Uncompatible';
                var t;
                if (child instanceof JControl) {
                    t = child.Presenter;
                    if (t === undefined)
                        t = child;
                    if (t.Parent != null) {
                        t.Parent.Remove(t, false);
                    }
                }
                t = this.getTemplate(child);
                t.Parent = this;
                if (t !== child)
                    child._presenter = t;
                this.Children.push(child);
                this.View.appendChild(t.View);
                this.OnChildAdded(child);
                return this;
            };
            Control.prototype.Insert = function (child, to) {
                if (!this.Check(child))
                    throw 'Uncompatible';
                var t;
                if (child instanceof JControl) {
                    t = child.Presenter;
                    if (t === undefined)
                        t = child;
                    if (t.Parent != null) {
                        t.Parent.Remove(t, false);
                    }
                }
                t = this.getTemplate(child);
                t.Parent = this;
                this.Children.splice(to, 0, child);
                this.View.insertChildAtIndex(child.View, to);
                this.OnChildAdded(child);
                return this;
            };
            Control.prototype.Remove = function (child, dispose) {
                var i = this.Children.indexOf(child);
                if (i == -1)
                    return true;
                var t = child.Presenter;
                if (t.Parent != this)
                    return false;
                t.Parent = null;
                if (this.Children.splice(i, 1).length != 0)
                    this.View.removeChild(t.View);
                return true;
            };
            Control.prototype.RemoveAt = function (i, dispose) {
                var child = this.Children[i];
                if (!child)
                    return;
                var t = child.Presenter;
                t.Parent = null;
                this.Children.splice(i, 1);
                this.View.removeChild(this.Presenter ? t.Presenter.View : t.View);
                if (dispose)
                    child.Dispose();
                return true;
            };
            Object.defineProperty(Control.prototype, "HasTemplate", {
                get: function () { return false; },
                enumerable: true,
                configurable: true
            });
            Control.prototype.getTemplate = function (child) {
                return child;
            };
            Control.prototype.OnChildAdded = function (child) {
            };
            Control.prototype.getChild = function (i) {
                return this.Children[i];
            };
            Control.prototype.IndexOf = function (item) {
                return this.Children.indexOf(item);
            };
            Object.defineProperty(Control.prototype, "Count", {
                get: function () {
                    return this.Children.length;
                },
                enumerable: true,
                configurable: true
            });
            Control.prototype.CloneChildren = function () {
                var c = this.Children;
                var arr = new Array(c.length);
                for (var i = 0, l = arr.length; i < l; i++)
                    arr[i] = c[i];
            };
            Control.prototype.Clear = function (dispose) {
                for (var i = 0, l = this.Count; i < l; i++)
                    this.RemoveAt(0, dispose);
            };
            Control.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.Clear(true);
                this._c.length = 0;
                this._c = null;
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            return Control;
        }(JControl));
        UI.Control = Control;
        var authApp;
        var isLogged = function (v) { _dsk.AuthStatChanged(v); };
        var Desktop = (function (_super) {
            __extends(Desktop, _super);
            function Desktop() {
                var _this_1 = _super.call(this, document.body) || this;
                _this_1.KeyCombiner = new UI.DesktopKeyboardManager(_this_1);
                _this_1.apps = new corelib_1.collection.List(Object);
                _this_1.IsSingleton = true;
                _this_1.KeyboardManager = new UI.KeyboardControllerManager(_this_1);
                _this_1._keyboardControllers = [];
                _this_1.focuser = new corelib_1.basic.focuser(_this_1.View, true);
                _this_1.defaultKeys = 'jtpneruosdfhgkwl';
                _this_1.loadApp = corelib_1.thread.Dispatcher.cretaeJob(function (app) {
                    _this_1.CurrentApp = app;
                }, [null], _this_1, !true);
                _.call(_this_1);
                if (_dsk != null)
                    throw '';
                _dsk = _this_1;
                return _this_1;
            }
            Desktop.prototype.Logout = function () {
                if (this.AuthenticationApp)
                    this.AuthenticationApp.Logout();
                else
                    this.CurrentApp.Logout();
            };
            Desktop.prototype.OpenSignin = function () {
                this.CurrentApp = this.AuthenticationApp;
            };
            Desktop.ctor = function () {
                this.DPCurrentApp = corelib_1.bind.DObject.CreateField('CurrentApp', Object, null, function (e) {
                    e.__this.selectApp(e._old, e._new);
                });
                this.DPCurrentLayout = corelib_1.bind.DObject.CreateField("CurrentLayout", JControl, null, this.prototype._currentLayoutChanged);
            };
            Desktop.prototype._currentLayoutChanged = function (e) {
            };
            Desktop.prototype.selectApp = function (oldApp, app) {
                if (oldApp) {
                    this.Remove(oldApp, false);
                    _app = null;
                    corelib_1.helper.TryCatch(oldApp, oldApp.OnDetached);
                }
                if (app) {
                    _super.prototype.Add.call(this, app);
                    _app = app;
                    this.CurrentLayout = (app && app.CurrentModal) || app;
                    corelib_1.helper.TryCatch(app, app.OnAttached);
                }
                else
                    this.CurrentLayout = this;
                window.sessionStorage.setItem('app', app && app.Name);
            };
            Desktop.__fields__ = function () {
                return [Desktop.DPCurrentApp, Desktop.DPCurrentLayout];
            };
            Desktop.prototype.AuthStatChanged = function (v) {
                if (v)
                    this.Show(this.AuthenticationApp.RedirectApp);
                else
                    this.Show(this.AuthenticationApp);
            };
            Desktop.prototype.initialize = function () {
                var _this_1 = this;
                document.addEventListener('keydown', this);
                document.addEventListener('contextmenu', this);
                this.KeyCombiner.attachTo(this.View);
                this.KeyCombiner.OnComined.Add(this.OnKeyCombined);
                this.observer = new corelib_1.bind.Observer(this, ['CurrentApp', 'CurrentModal']);
                this.observer.OnPropertyChanged(corelib_1.bind.Observer.DPValue, function (s, e) {
                    _this_1.CurrentLayout = e._new || _this_1.CurrentApp || _this_1;
                });
            };
            Desktop.prototype.mouseController = function (e) {
            };
            Object.defineProperty(Desktop.prototype, "KeyboardController", {
                get: function () {
                    return this._keyboardController;
                },
                set: function (v) {
                    this._keyboardController = v;
                },
                enumerable: true,
                configurable: true
            });
            Desktop.prototype.GetKeyControl = function (owner, invoke, params) {
                this.KeyCombiner.pause();
                this.KeyboardController = { owner: owner, invoke: invoke, params: params };
            };
            Desktop.prototype.ReleaseKeyControl = function () {
                this.KeyCombiner.resume();
                this.KeyboardController = null;
            };
            Desktop.prototype.handleTab = function (e, _view) {
                this.focuser.bound = _view;
                this.focuser.focuse(true, e.shiftKey);
                e.stopImmediatePropagation();
                e.preventDefault();
            };
            Desktop.prototype.OnKeyCombined = function (e, v) {
                var b = this.CurrentApp;
                if (b)
                    b.OnKeyCombined(e, v);
            };
            Desktop.prototype.OnKeyDown = function (e) {
                if (e.ctrlKey && this.defaultKeys.indexOf(e.key && e.key.toLowerCase()) != -1 || e.altKey && e.keyCode == 18)
                    e.preventDefault();
                var x = this.KeyboardController;
                var currentApp = this.CurrentApp;
                if (x) {
                    var p = x.params.slice();
                    p.unshift(e);
                    var r = x.invoke.apply(this.KeyboardController.owner, p);
                    if ((r & UI.KeyboardControllerResult.Release) == UI.KeyboardControllerResult.Release)
                        this.ReleaseKeyControl();
                    if ((r & UI.KeyboardControllerResult.ByPass) != UI.KeyboardControllerResult.ByPass)
                        return;
                }
                var cd = currentApp && currentApp.CurrentModal;
                if (e.keyCode > 111 && e.keyCode < 124) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                if (cd) {
                    if (!cd.OnKeyDown(e))
                        if (e.keyCode === 9)
                            this.handleTab(e, cd.View);
                        else
                            ;
                    else {
                        e.stopImmediatePropagation();
                        e.stopPropagation();
                        e.preventDefault();
                    }
                    return;
                }
                if (e.keyCode === 114) {
                    if (e.ctrlKey)
                        this.CurrentApp.ToggleTitle();
                    else
                        this.CurrentApp.OnDeepSearche();
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                if (e.keyCode === Keys.F5) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    this.CurrentApp.Update();
                }
                else if (e.keyCode == Keys.F12) {
                    if (e.ctrlKey) {
                        this.Logout();
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        e.stopPropagation();
                        return;
                    }
                    if (currentApp) {
                        if (currentApp.SelectedPage instanceof UI.NavPage)
                            currentApp.SelectedPage.ToggleNav();
                    }
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                }
                else if (e.ctrlKey && e.shiftKey && e.keyCode == 66) {
                    if ((Date.now() - this.isReq) < 500) {
                        corelib_1.Api.RiseApi('Settings', { data: e, callback: function () { } });
                    }
                    else
                        this.isReq = Date.now();
                }
                else if (e.ctrlKey && (e.keyCode == 112 || e.keyCode === 80)) {
                    currentApp.OnPrint();
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                }
                else {
                    if (currentApp && e.ctrlKey && e.keyCode === 80)
                        this.CurrentApp.OnPrint();
                    currentApp.OnKeyDown(e);
                }
            };
            Desktop.prototype.handleEvent = function (e) {
                switch (e.type) {
                    case 'keydown':
                        if (e.keyCode !== 93)
                            return this.OnKeyDown(e);
                        else {
                            var oe = e;
                            var r = e.srcElement;
                            var x = r.clientLeft, y = r.clientTop;
                            e = {
                                preventDefault: function () { oe.preventDefault(); }, stopPropagation: function () { oe.stopPropagation(); }, x: x, y: y, screenX: x, screenY: y, clientY: y, clientX: x, pageX: x, pageY: y
                            };
                        }
                    case 'contextmenu':
                        return this.OnContextMenu(e);
                    default:
                }
            };
            Desktop.prototype.OnContextMenu = function (e) {
                e.preventDefault();
                var currentApp = this.CurrentApp;
                var cd = currentApp && currentApp.CurrentModal;
                if (cd)
                    return cd.OnContextMenu(e);
                else if (currentApp)
                    return currentApp.OnContextMenu(e);
            };
            Desktop.prototype.ShowStart = function () {
                var t = this.apps;
                var s = "Select app :";
                var ap = this.CurrentApp == null ? null : this.CurrentApp.Name;
                for (var i = 0, l = t.Count; i < l; i++) {
                    if (ap == null)
                        ap = t.Get(i).Name;
                    s += "\r        " + t.Get(i).Name;
                }
                var e = prompt(s, ap == null ? "" : ap);
                for (var i = 0, l = t.Count; i < l; i++)
                    if (t.Get(i).Name.toLowerCase() == e) {
                        {
                            this.Show(t.Get(i));
                        }
                        return;
                    }
            };
            Object.defineProperty(Desktop, "Current", {
                get: function () { return _dsk; },
                enumerable: true,
                configurable: true
            });
            Desktop.prototype.Check = function (v) {
                return v instanceof Object;
            };
            Desktop.prototype.Show = function (app) {
                var _this_1 = this;
                if (authApp)
                    authApp.IsLogged(function (v, app) {
                        var currentApp = _this_1.CurrentApp;
                        if (!v) {
                            if (currentApp && currentApp.IsAuthentication)
                                return;
                            if (app !== _this_1.AuthenticationApp)
                                _this_1.AuthenticationApp.RedirectApp = app;
                            app = _this_1.AuthenticationApp;
                        }
                        else {
                            app = app && app.IsAuthentication ? app.RedirectApp : app;
                        }
                        if (!app)
                            for (var i = 0; i < _this_1.apps.Count; i++) {
                                var appx = _this_1.apps.Get(i);
                                if (!(appx && appx.IsAuthentication)) {
                                    app = appx;
                                    break;
                                }
                            }
                        corelib_1.thread.Dispatcher.Push(_this_1.loadApp.Set(app));
                    }, app);
                else
                    corelib_1.thread.Dispatcher.Push(this.loadApp.Set(app));
            };
            Desktop.prototype.Add = function (i) {
                if (i.IsAuthentication)
                    this.AuthenticationApp = i;
                else
                    this.Register(i);
                return this;
            };
            Desktop.prototype.Register = function (app) {
                if (this.apps.IndexOf(app) !== -1)
                    return;
                this.apps.Add(app);
                app.Parent = this;
            };
            Object.defineProperty(Desktop.prototype, "AuthenticationApp", {
                get: function () { return authApp; },
                set: function (v) {
                    var _this_1 = this;
                    if (authApp || v == null)
                        throw '';
                    authApp = v;
                    v.OnStatStatChanged.On = function (auth, v) {
                        if (v) {
                            _this_1.Redirect(auth);
                        }
                        else {
                            _this_1.Show(auth);
                        }
                    };
                },
                enumerable: true,
                configurable: true
            });
            Desktop.prototype.Redirect = function (app) {
                this.Show(app.RedirectApp);
            };
            Desktop.prototype.OnUsernameChanged = function (job, e) {
            };
            return Desktop;
        }(Control));
        UI.Desktop = Desktop;
        var Container = (function (_super) {
            __extends(Container, _super);
            function Container() {
                return _super.call(this, document.createElement('div')) || this;
            }
            Container.prototype.initialize = function () { this.applyStyle('container'); };
            Container.prototype.Check = function (child) { return child instanceof JControl; };
            Container = __decorate([
                attributes.ChildrenProperty({ MethodName: "Add" }),
                __metadata("design:paramtypes", [])
            ], Container);
            return Container;
        }(Control));
        UI.Container = Container;
        var Icons;
        (function (Icons) {
            Icons[Icons["Bar"] = 0] = "Bar";
            Icons[Icons["Next"] = 1] = "Next";
            Icons[Icons["Prev"] = 2] = "Prev";
        })(Icons = UI.Icons || (UI.Icons = {}));
        var Glyphs;
        (function (Glyphs) {
            Glyphs[Glyphs["none"] = 0] = "none";
            Glyphs[Glyphs["asterisk"] = 1] = "asterisk";
            Glyphs[Glyphs["plus"] = 2] = "plus";
            Glyphs[Glyphs["eur"] = 3] = "eur";
            Glyphs[Glyphs["euro"] = 4] = "euro";
            Glyphs[Glyphs["minus"] = 5] = "minus";
            Glyphs[Glyphs["cloud"] = 6] = "cloud";
            Glyphs[Glyphs["envelope"] = 7] = "envelope";
            Glyphs[Glyphs["pencil"] = 8] = "pencil";
            Glyphs[Glyphs["glass"] = 9] = "glass";
            Glyphs[Glyphs["music"] = 10] = "music";
            Glyphs[Glyphs["search"] = 11] = "search";
            Glyphs[Glyphs["heart"] = 12] = "heart";
            Glyphs[Glyphs["star"] = 13] = "star";
            Glyphs[Glyphs["starEmpty"] = 14] = "starEmpty";
            Glyphs[Glyphs["user"] = 15] = "user";
            Glyphs[Glyphs["film"] = 16] = "film";
            Glyphs[Glyphs["thLarge"] = 17] = "thLarge";
            Glyphs[Glyphs["th"] = 18] = "th";
            Glyphs[Glyphs["thList"] = 19] = "thList";
            Glyphs[Glyphs["ok"] = 20] = "ok";
            Glyphs[Glyphs["remove"] = 21] = "remove";
            Glyphs[Glyphs["zoomIn"] = 22] = "zoomIn";
            Glyphs[Glyphs["zoomOut"] = 23] = "zoomOut";
            Glyphs[Glyphs["off"] = 24] = "off";
            Glyphs[Glyphs["signal"] = 25] = "signal";
            Glyphs[Glyphs["cog"] = 26] = "cog";
            Glyphs[Glyphs["trash"] = 27] = "trash";
            Glyphs[Glyphs["home"] = 28] = "home";
            Glyphs[Glyphs["file"] = 29] = "file";
            Glyphs[Glyphs["time"] = 30] = "time";
            Glyphs[Glyphs["road"] = 31] = "road";
            Glyphs[Glyphs["downloadAlt"] = 32] = "downloadAlt";
            Glyphs[Glyphs["download"] = 33] = "download";
            Glyphs[Glyphs["upload"] = 34] = "upload";
            Glyphs[Glyphs["inbox"] = 35] = "inbox";
            Glyphs[Glyphs["playCircle"] = 36] = "playCircle";
            Glyphs[Glyphs["repeat"] = 37] = "repeat";
            Glyphs[Glyphs["refresh"] = 38] = "refresh";
            Glyphs[Glyphs["listAlt"] = 39] = "listAlt";
            Glyphs[Glyphs["lock"] = 40] = "lock";
            Glyphs[Glyphs["flag"] = 41] = "flag";
            Glyphs[Glyphs["headphones"] = 42] = "headphones";
            Glyphs[Glyphs["volumeOff"] = 43] = "volumeOff";
            Glyphs[Glyphs["volumeDown"] = 44] = "volumeDown";
            Glyphs[Glyphs["volumeUp"] = 45] = "volumeUp";
            Glyphs[Glyphs["qrcode"] = 46] = "qrcode";
            Glyphs[Glyphs["barcode"] = 47] = "barcode";
            Glyphs[Glyphs["tag"] = 48] = "tag";
            Glyphs[Glyphs["tags"] = 49] = "tags";
            Glyphs[Glyphs["book"] = 50] = "book";
            Glyphs[Glyphs["bookmark"] = 51] = "bookmark";
            Glyphs[Glyphs["print"] = 52] = "print";
            Glyphs[Glyphs["camera"] = 53] = "camera";
            Glyphs[Glyphs["font"] = 54] = "font";
            Glyphs[Glyphs["bold"] = 55] = "bold";
            Glyphs[Glyphs["italic"] = 56] = "italic";
            Glyphs[Glyphs["textHeight"] = 57] = "textHeight";
            Glyphs[Glyphs["textWidth"] = 58] = "textWidth";
            Glyphs[Glyphs["alignLeft"] = 59] = "alignLeft";
            Glyphs[Glyphs["alignCenter"] = 60] = "alignCenter";
            Glyphs[Glyphs["alignRight"] = 61] = "alignRight";
            Glyphs[Glyphs["alignJustify"] = 62] = "alignJustify";
            Glyphs[Glyphs["list"] = 63] = "list";
            Glyphs[Glyphs["indentLeft"] = 64] = "indentLeft";
            Glyphs[Glyphs["indentRight"] = 65] = "indentRight";
            Glyphs[Glyphs["facetimeVideo"] = 66] = "facetimeVideo";
            Glyphs[Glyphs["picture"] = 67] = "picture";
            Glyphs[Glyphs["mapMarker"] = 68] = "mapMarker";
            Glyphs[Glyphs["adjust"] = 69] = "adjust";
            Glyphs[Glyphs["tint"] = 70] = "tint";
            Glyphs[Glyphs["edit"] = 71] = "edit";
            Glyphs[Glyphs["share"] = 72] = "share";
            Glyphs[Glyphs["check"] = 73] = "check";
            Glyphs[Glyphs["move"] = 74] = "move";
            Glyphs[Glyphs["stepBackward"] = 75] = "stepBackward";
            Glyphs[Glyphs["fastBackward"] = 76] = "fastBackward";
            Glyphs[Glyphs["backward"] = 77] = "backward";
            Glyphs[Glyphs["play"] = 78] = "play";
            Glyphs[Glyphs["pause"] = 79] = "pause";
            Glyphs[Glyphs["stop"] = 80] = "stop";
            Glyphs[Glyphs["forward"] = 81] = "forward";
            Glyphs[Glyphs["fastForward"] = 82] = "fastForward";
            Glyphs[Glyphs["stepForward"] = 83] = "stepForward";
            Glyphs[Glyphs["eject"] = 84] = "eject";
            Glyphs[Glyphs["chevronLeft"] = 85] = "chevronLeft";
            Glyphs[Glyphs["chevronRight"] = 86] = "chevronRight";
            Glyphs[Glyphs["plusSign"] = 87] = "plusSign";
            Glyphs[Glyphs["minusSign"] = 88] = "minusSign";
            Glyphs[Glyphs["removeSign"] = 89] = "removeSign";
            Glyphs[Glyphs["okSign"] = 90] = "okSign";
            Glyphs[Glyphs["questionSign"] = 91] = "questionSign";
            Glyphs[Glyphs["infoSign"] = 92] = "infoSign";
            Glyphs[Glyphs["screenshot"] = 93] = "screenshot";
            Glyphs[Glyphs["removeCircle"] = 94] = "removeCircle";
            Glyphs[Glyphs["okCircle"] = 95] = "okCircle";
            Glyphs[Glyphs["banCircle"] = 96] = "banCircle";
            Glyphs[Glyphs["arrowLeft"] = 97] = "arrowLeft";
            Glyphs[Glyphs["arrowRight"] = 98] = "arrowRight";
            Glyphs[Glyphs["arrowUp"] = 99] = "arrowUp";
            Glyphs[Glyphs["arrowDown"] = 100] = "arrowDown";
            Glyphs[Glyphs["shareAlt"] = 101] = "shareAlt";
            Glyphs[Glyphs["resizeFull"] = 102] = "resizeFull";
            Glyphs[Glyphs["resizeSmall"] = 103] = "resizeSmall";
            Glyphs[Glyphs["exclamationSign"] = 104] = "exclamationSign";
            Glyphs[Glyphs["gift"] = 105] = "gift";
            Glyphs[Glyphs["leaf"] = 106] = "leaf";
            Glyphs[Glyphs["fire"] = 107] = "fire";
            Glyphs[Glyphs["eyeOpen"] = 108] = "eyeOpen";
            Glyphs[Glyphs["eyeClose"] = 109] = "eyeClose";
            Glyphs[Glyphs["warningSign"] = 110] = "warningSign";
            Glyphs[Glyphs["plane"] = 111] = "plane";
            Glyphs[Glyphs["calendar"] = 112] = "calendar";
            Glyphs[Glyphs["random"] = 113] = "random";
            Glyphs[Glyphs["comment"] = 114] = "comment";
            Glyphs[Glyphs["magnet"] = 115] = "magnet";
            Glyphs[Glyphs["chevronUp"] = 116] = "chevronUp";
            Glyphs[Glyphs["chevronDown"] = 117] = "chevronDown";
            Glyphs[Glyphs["retweet"] = 118] = "retweet";
            Glyphs[Glyphs["shoppingCart"] = 119] = "shoppingCart";
            Glyphs[Glyphs["folderClose"] = 120] = "folderClose";
            Glyphs[Glyphs["folderOpen"] = 121] = "folderOpen";
            Glyphs[Glyphs["resizeVertical"] = 122] = "resizeVertical";
            Glyphs[Glyphs["resizeHorizontal"] = 123] = "resizeHorizontal";
            Glyphs[Glyphs["hdd"] = 124] = "hdd";
            Glyphs[Glyphs["bullhorn"] = 125] = "bullhorn";
            Glyphs[Glyphs["bell"] = 126] = "bell";
            Glyphs[Glyphs["certificate"] = 127] = "certificate";
            Glyphs[Glyphs["thumbsUp"] = 128] = "thumbsUp";
            Glyphs[Glyphs["thumbsDown"] = 129] = "thumbsDown";
            Glyphs[Glyphs["handRight"] = 130] = "handRight";
            Glyphs[Glyphs["handLeft"] = 131] = "handLeft";
            Glyphs[Glyphs["handUp"] = 132] = "handUp";
            Glyphs[Glyphs["handDown"] = 133] = "handDown";
            Glyphs[Glyphs["circleArrowRight"] = 134] = "circleArrowRight";
            Glyphs[Glyphs["circleArrowLeft"] = 135] = "circleArrowLeft";
            Glyphs[Glyphs["circleArrowUp"] = 136] = "circleArrowUp";
            Glyphs[Glyphs["circleArrowDown"] = 137] = "circleArrowDown";
            Glyphs[Glyphs["globe"] = 138] = "globe";
            Glyphs[Glyphs["wrench"] = 139] = "wrench";
            Glyphs[Glyphs["tasks"] = 140] = "tasks";
            Glyphs[Glyphs["filter"] = 141] = "filter";
            Glyphs[Glyphs["briefcase"] = 142] = "briefcase";
            Glyphs[Glyphs["fullscreen"] = 143] = "fullscreen";
            Glyphs[Glyphs["dashboard"] = 144] = "dashboard";
            Glyphs[Glyphs["paperclip"] = 145] = "paperclip";
            Glyphs[Glyphs["heartEmpty"] = 146] = "heartEmpty";
            Glyphs[Glyphs["link"] = 147] = "link";
            Glyphs[Glyphs["phone"] = 148] = "phone";
            Glyphs[Glyphs["pushpin"] = 149] = "pushpin";
            Glyphs[Glyphs["usd"] = 150] = "usd";
            Glyphs[Glyphs["gbp"] = 151] = "gbp";
            Glyphs[Glyphs["sort"] = 152] = "sort";
            Glyphs[Glyphs["sortByAlphabet"] = 153] = "sortByAlphabet";
            Glyphs[Glyphs["sortByAlphabetAlt"] = 154] = "sortByAlphabetAlt";
            Glyphs[Glyphs["sortByOrder"] = 155] = "sortByOrder";
            Glyphs[Glyphs["sortByOrderAlt"] = 156] = "sortByOrderAlt";
            Glyphs[Glyphs["sortByAttributes"] = 157] = "sortByAttributes";
            Glyphs[Glyphs["sortByAttributesAlt"] = 158] = "sortByAttributesAlt";
            Glyphs[Glyphs["unchecked"] = 159] = "unchecked";
            Glyphs[Glyphs["expand"] = 160] = "expand";
            Glyphs[Glyphs["collapseDown"] = 161] = "collapseDown";
            Glyphs[Glyphs["collapseUp"] = 162] = "collapseUp";
            Glyphs[Glyphs["logIn"] = 163] = "logIn";
            Glyphs[Glyphs["flash"] = 164] = "flash";
            Glyphs[Glyphs["logOut"] = 165] = "logOut";
            Glyphs[Glyphs["newWindow"] = 166] = "newWindow";
            Glyphs[Glyphs["record"] = 167] = "record";
            Glyphs[Glyphs["save"] = 168] = "save";
            Glyphs[Glyphs["open"] = 169] = "open";
            Glyphs[Glyphs["saved"] = 170] = "saved";
            Glyphs[Glyphs["import"] = 171] = "import";
            Glyphs[Glyphs["export"] = 172] = "export";
            Glyphs[Glyphs["send"] = 173] = "send";
            Glyphs[Glyphs["floppyDisk"] = 174] = "floppyDisk";
            Glyphs[Glyphs["floppySaved"] = 175] = "floppySaved";
            Glyphs[Glyphs["floppyRemove"] = 176] = "floppyRemove";
            Glyphs[Glyphs["floppySave"] = 177] = "floppySave";
            Glyphs[Glyphs["floppyOpen"] = 178] = "floppyOpen";
            Glyphs[Glyphs["creditCard"] = 179] = "creditCard";
            Glyphs[Glyphs["transfer"] = 180] = "transfer";
            Glyphs[Glyphs["cutlery"] = 181] = "cutlery";
            Glyphs[Glyphs["header"] = 182] = "header";
            Glyphs[Glyphs["compressed"] = 183] = "compressed";
            Glyphs[Glyphs["earphone"] = 184] = "earphone";
            Glyphs[Glyphs["phoneAlt"] = 185] = "phoneAlt";
            Glyphs[Glyphs["tower"] = 186] = "tower";
            Glyphs[Glyphs["stats"] = 187] = "stats";
            Glyphs[Glyphs["sdVideo"] = 188] = "sdVideo";
            Glyphs[Glyphs["hdVideo"] = 189] = "hdVideo";
            Glyphs[Glyphs["subtitles"] = 190] = "subtitles";
            Glyphs[Glyphs["soundStereo"] = 191] = "soundStereo";
            Glyphs[Glyphs["soundDolby"] = 192] = "soundDolby";
            Glyphs[Glyphs["sound$5$1"] = 193] = "sound$5$1";
            Glyphs[Glyphs["sound$6$1"] = 194] = "sound$6$1";
            Glyphs[Glyphs["sound$7$1"] = 195] = "sound$7$1";
            Glyphs[Glyphs["copyrightMark"] = 196] = "copyrightMark";
            Glyphs[Glyphs["registrationMark"] = 197] = "registrationMark";
            Glyphs[Glyphs["cloudDownload"] = 198] = "cloudDownload";
            Glyphs[Glyphs["cloudUpload"] = 199] = "cloudUpload";
            Glyphs[Glyphs["treeConifer"] = 200] = "treeConifer";
            Glyphs[Glyphs["treeDeciduous"] = 201] = "treeDeciduous";
            Glyphs[Glyphs["cd"] = 202] = "cd";
            Glyphs[Glyphs["saveFile"] = 203] = "saveFile";
            Glyphs[Glyphs["openFile"] = 204] = "openFile";
            Glyphs[Glyphs["levelUp"] = 205] = "levelUp";
            Glyphs[Glyphs["copy"] = 206] = "copy";
            Glyphs[Glyphs["paste"] = 207] = "paste";
            Glyphs[Glyphs["alert"] = 208] = "alert";
            Glyphs[Glyphs["equalizer"] = 209] = "equalizer";
            Glyphs[Glyphs["king"] = 210] = "king";
            Glyphs[Glyphs["queen"] = 211] = "queen";
            Glyphs[Glyphs["pawn"] = 212] = "pawn";
            Glyphs[Glyphs["bishop"] = 213] = "bishop";
            Glyphs[Glyphs["knight"] = 214] = "knight";
            Glyphs[Glyphs["babyFormula"] = 215] = "babyFormula";
            Glyphs[Glyphs["tent"] = 216] = "tent";
            Glyphs[Glyphs["blackboard"] = 217] = "blackboard";
            Glyphs[Glyphs["bed"] = 218] = "bed";
            Glyphs[Glyphs["apple"] = 219] = "apple";
            Glyphs[Glyphs["erase"] = 220] = "erase";
            Glyphs[Glyphs["hourglass"] = 221] = "hourglass";
            Glyphs[Glyphs["lamp"] = 222] = "lamp";
            Glyphs[Glyphs["duplicate"] = 223] = "duplicate";
            Glyphs[Glyphs["piggyBank"] = 224] = "piggyBank";
            Glyphs[Glyphs["scissors"] = 225] = "scissors";
            Glyphs[Glyphs["bitcoin"] = 226] = "bitcoin";
            Glyphs[Glyphs["btc"] = 227] = "btc";
            Glyphs[Glyphs["xbt"] = 228] = "xbt";
            Glyphs[Glyphs["yen"] = 229] = "yen";
            Glyphs[Glyphs["jpy"] = 230] = "jpy";
            Glyphs[Glyphs["ruble"] = 231] = "ruble";
            Glyphs[Glyphs["rub"] = 232] = "rub";
            Glyphs[Glyphs["scale"] = 233] = "scale";
            Glyphs[Glyphs["iceLolly"] = 234] = "iceLolly";
            Glyphs[Glyphs["iceLollyTasted"] = 235] = "iceLollyTasted";
            Glyphs[Glyphs["education"] = 236] = "education";
            Glyphs[Glyphs["optionHorizontal"] = 237] = "optionHorizontal";
            Glyphs[Glyphs["optionVertical"] = 238] = "optionVertical";
            Glyphs[Glyphs["menuHamburger"] = 239] = "menuHamburger";
            Glyphs[Glyphs["modalWindow"] = 240] = "modalWindow";
            Glyphs[Glyphs["oil"] = 241] = "oil";
            Glyphs[Glyphs["grain"] = 242] = "grain";
            Glyphs[Glyphs["sunglasses"] = 243] = "sunglasses";
            Glyphs[Glyphs["textSize"] = 244] = "textSize";
            Glyphs[Glyphs["textColor"] = 245] = "textColor";
            Glyphs[Glyphs["textBackground"] = 246] = "textBackground";
            Glyphs[Glyphs["objectAlignTop"] = 247] = "objectAlignTop";
            Glyphs[Glyphs["objectAlignBottom"] = 248] = "objectAlignBottom";
            Glyphs[Glyphs["objectAlignHorizontal"] = 249] = "objectAlignHorizontal";
            Glyphs[Glyphs["objectAlignLeft"] = 250] = "objectAlignLeft";
            Glyphs[Glyphs["objectAlignVertical"] = 251] = "objectAlignVertical";
            Glyphs[Glyphs["objectAlignRight"] = 252] = "objectAlignRight";
            Glyphs[Glyphs["triangleRight"] = 253] = "triangleRight";
            Glyphs[Glyphs["triangleLeft"] = 254] = "triangleLeft";
            Glyphs[Glyphs["triangleBottom"] = 255] = "triangleBottom";
            Glyphs[Glyphs["triangleTop"] = 256] = "triangleTop";
            Glyphs[Glyphs["console"] = 257] = "console";
            Glyphs[Glyphs["superscript"] = 258] = "superscript";
            Glyphs[Glyphs["subscript"] = 259] = "subscript";
            Glyphs[Glyphs["menuLeft"] = 260] = "menuLeft";
            Glyphs[Glyphs["menuRight"] = 261] = "menuRight";
            Glyphs[Glyphs["menuDown"] = 262] = "menuDown";
            Glyphs[Glyphs["menuUp"] = 263] = "menuUp";
        })(Glyphs = UI.Glyphs || (UI.Glyphs = {}));
        var Glyph = (function (_super) {
            __extends(Glyph, _super);
            function Glyph(glyph, isIcon, toolTip) {
                var _this_1 = _super.call(this, document.createElement('span')) || this;
                _this_1.isIcon = isIcon;
                isIcon = isIcon == true;
                _this_1.Type = glyph;
                _this_1._view.classList.add('bgr');
                _this_1._view.title = toolTip;
                return _this_1;
            }
            Glyph.AllGlyphs = function (panel) {
                for (var i in Glyphs) {
                    if (isNaN(i)) {
                        panel.Add(new Glyph(Glyphs[i], false));
                    }
                }
            };
            Glyph.Test = function () {
                var c = new UI.Div().applyStyle('row');
                for (var i in Glyphs) {
                    if (isNaN(i)) {
                        var v = new Glyph(Glyphs[i], false).applyStyle('col');
                        c.Add(v);
                        v.ToolTip = i;
                    }
                }
                c.Parent = UI.Desktop.Current;
                var reg = document.getElementById('51');
                reg.appendChild(c.View);
                c.View.style.fontSize = '-webkit-xxx-large';
                c.View.style.padding = '15px';
                return c;
            };
            Glyph.CreateGlyphDom = function (glyph, toolTip, cssClass) {
                var v = document.createElement('span');
                v.classList.add('glyphicon', Glyph.GetGlyphCSS(glyph), 'bgr');
                if (cssClass)
                    v.classList.add(cssClass);
                v.title = toolTip;
                return v;
            };
            Glyph.GetGlyphCSS = function (name) {
                var c = corelib_1.css.toValidCssName(Glyphs[name]);
                return 'glyphicon' + (c == null ? '' : '-' + c);
            };
            Glyph.GetIconCSS = function (name) {
                var c = Icons[name];
                return 'icon-' + (c == null ? '' : c.toLowerCase());
            };
            Glyph.prototype.getStyle = function () {
                if (this.isIcon)
                    return Glyph.GetIconCSS(this.v);
                else
                    return Glyph.GetGlyphCSS(this.v);
            };
            Glyph.prototype.initialize = function () {
            };
            Object.defineProperty(Glyph.prototype, "Type", {
                get: function () { return this.v; },
                set: function (v) {
                    if (this.v != null)
                        this.View.classList.remove(this.getStyle());
                    this.v = v;
                    if (v != null)
                        this.applyStyle('glyphicon', this.getStyle());
                },
                enumerable: true,
                configurable: true
            });
            return Glyph;
        }(JControl));
        UI.Glyph = Glyph;
        var Button = (function (_super) {
            __extends(Button, _super);
            function Button() {
                var _this_1 = _super.call(this, document.createElement('button')) || this;
                _this_1.v = 0;
                return _this_1;
            }
            Button.prototype.Focus = function () {
                this._view.focus();
            };
            Object.defineProperty(Button.prototype, "Style", {
                set: function (v) {
                    this.View.classList.remove('btn-' + ButtonStyle[this.v].toLowerCase());
                    this.applyStyle('btn-' + ButtonStyle[v].toLowerCase());
                    this.v = v;
                },
                enumerable: true,
                configurable: true
            });
            Button.prototype.initialize = function () {
                this.applyStyle('btn', 'btn-default');
                this.Type = 'button';
            };
            Object.defineProperty(Button.prototype, "Text", {
                get: function () { return this._text && this._text.textContent; },
                set: function (s) {
                    if (s)
                        if (this._text) {
                            this._text.textContent = s;
                            return;
                        }
                        else
                            this._text = document.createTextNode(s);
                    else if (!this._text)
                        return;
                    else
                        this._text = null;
                    this.reset();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Button.prototype, "Content", {
                get: function () { return this._content; },
                set: function (s) {
                    if (this._content)
                        try {
                            this._view.removeChild(this._content);
                        }
                        catch (_a) { }
                    this._content = s;
                    this.reset();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Button.prototype, "Type", {
                set: function (s) { this.View.type = s; },
                enumerable: true,
                configurable: true
            });
            Button.prototype.reset = function () {
                this.Clear();
                if (this._text)
                    this._view.appendChild(this._text);
                if (this._content)
                    this._view.appendChild(this._content);
            };
            Button = __decorate([
                attributes.ContentProperty("Content"),
                __metadata("design:paramtypes", [])
            ], Button);
            return Button;
        }(JControl));
        UI.Button = Button;
        var GlyphButton = (function (_super) {
            __extends(GlyphButton, _super);
            function GlyphButton() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GlyphButton.prototype.initialize = function () {
                var v = this.View;
                this.AddGlyphs(function () { return true; }, Icons.Bar, Icons.Bar, Icons.Bar);
                _super.prototype.initialize.call(this);
            };
            GlyphButton.prototype.AddGlyphs = function (isIcon) {
                var glyphs = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    glyphs[_i - 1] = arguments[_i];
                }
                for (var i = 0; i < glyphs.length; i++)
                    this.AddGlyph(glyphs[i], isIcon(i));
            };
            GlyphButton.prototype.AddGlyph = function (glyph, isIcon) {
                if (typeof glyph == 'number') {
                    var g = new Glyph(glyph, isIcon);
                    _super.prototype.Add.call(this, g);
                    return g;
                }
                return null;
            };
            GlyphButton.prototype.Check = function (child) {
                return child instanceof Glyph;
            };
            Object.defineProperty(GlyphButton.prototype, "CollapsedZone", {
                set: function (target) {
                    var v = this.View;
                    this.applyStyle('navbar-toggle');
                    v.setAttribute('data-toggle', 'collapse');
                    v.setAttribute('data-target', '#' + target.Id);
                    target.applyStyle('collapse');
                },
                enumerable: true,
                configurable: true
            });
            return GlyphButton;
        }(Button));
        UI.GlyphButton = GlyphButton;
        var Dom = (function (_super) {
            __extends(Dom, _super);
            function Dom(tagName, classList) {
                var _this_1 = _super.call(this, typeof tagName == 'string' ? document.createElement(tagName) : tagName) || this;
                if (classList)
                    for (var i = 0; i < classList.length; i++)
                        _this_1.View.classList.add(classList[i]);
                return _this_1;
            }
            Dom.prototype.initialize = function () {
            };
            return Dom;
        }(JControl));
        UI.Dom = Dom;
        var Anchore = (function (_super) {
            __extends(Anchore, _super);
            function Anchore(content, href) {
                var _this_1 = _super.call(this, f = document.createElement('a')) || this;
                var f;
                if (href != null && href != '#')
                    f.href = href;
                if (content != null)
                    if (content instanceof JControl)
                        _this_1.Add(content);
                    else if (content instanceof HTMLElement)
                        f.appendChild(content);
                    else if (typeof content === 'string')
                        f.text = content;
                return _this_1;
            }
            Anchore.prototype.initialize = function () {
            };
            Anchore.prototype.Add = function (child) {
                this.View.innerHTML = '';
                _super.prototype.Add.call(this, child);
                return this;
            };
            Anchore.prototype.Remove = function (child) { return false; };
            Object.defineProperty(Anchore.prototype, "Text", {
                get: function () {
                    return this.View.text;
                },
                set: function (v) {
                    this.View.text = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Anchore.prototype, "Href", {
                get: function () {
                    return this.View.href;
                },
                set: function (v) {
                    this.View.href = v;
                },
                enumerable: true,
                configurable: true
            });
            return Anchore;
        }(JControl));
        UI.Anchore = Anchore;
        var Label = (function (_super) {
            __extends(Label, _super);
            function Label(text) {
                var _this_1 = _super.call(this, f = document.createElement('label')) || this;
                var f;
                f.textContent = text;
                return _this_1;
            }
            Label.prototype.initialize = function () { };
            Object.defineProperty(Label.prototype, "Text", {
                get: function () {
                    return this.View.textContent;
                },
                set: function (v) {
                    this.View.textContent = v;
                },
                enumerable: true,
                configurable: true
            });
            return Label;
        }(JControl));
        UI.Label = Label;
        var Text = (function (_super) {
            __extends(Text, _super);
            function Text(text) {
                var _this_1 = _super.call(this, f = document.createElement('div')) || this;
                var f;
                f.textContent = text;
                return _this_1;
            }
            Text.prototype.initialize = function () { };
            Object.defineProperty(Text.prototype, "Text", {
                get: function () {
                    return this.View.textContent;
                },
                set: function (v) {
                    this.View.textContent = v;
                },
                enumerable: true,
                configurable: true
            });
            return Text;
        }(JControl));
        UI.Text = Text;
        var Textbox = (function (_super) {
            __extends(Textbox, _super);
            function Textbox(text) {
                var _this_1 = _super.call(this, f = document.createElement('input')) || this;
                var f;
                f.type = 'search';
                if (text != void 0)
                    f.value = text;
                return _this_1;
            }
            Textbox.prototype.Focus = function () {
                this.View.focus();
            };
            Textbox.prototype.initialize = function () {
            };
            Textbox.prototype.Add = function (child) { return this; };
            Textbox.prototype.Remove = function (child) { return false; };
            Object.defineProperty(Textbox.prototype, "Text", {
                get: function () {
                    return this.View.value;
                },
                set: function (v) {
                    this.View.value = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Textbox.prototype, "PlaceHolder", {
                get: function () {
                    return this.View.getAttribute('placeholder');
                },
                set: function (v) {
                    this.View.setAttribute('placeholder', v);
                },
                enumerable: true,
                configurable: true
            });
            return Textbox;
        }(JControl));
        UI.Textbox = Textbox;
        var ListType;
        (function (ListType) {
            ListType[ListType["Ordred"] = 0] = "Ordred";
            ListType[ListType["UnOrdred"] = 1] = "UnOrdred";
        })(ListType = UI.ListType || (UI.ListType = {}));
        var List = (function (_super) {
            __extends(List, _super);
            function List(type) {
                var _this_1 = _super.call(this, document.createElement(type === undefined ? 'div' : (type === 0 ? 'ol' : (type === 1 ? 'ul' : 'ul')))) || this;
                _this_1._si = -1;
                return _this_1;
            }
            List.prototype.initialize = function () {
                var _this_1 = this;
                this._view.addEventListener('keydown', function (e) {
                    if (e.keyCode === Keys.Down)
                        _this_1.SelectedIndex++;
                    else if (e.keyCode === Keys.Up)
                        _this_1.SelectedIndex--;
                });
            };
            List.prototype.Check = function (child) {
                return child instanceof JControl;
            };
            Object.defineProperty(List.prototype, "HasTemplate", {
                get: function () { return true; },
                enumerable: true,
                configurable: true
            });
            List.prototype.getTemplate = function (child) {
                var l = new Dom('li');
                if (child instanceof JControl) {
                    l.Add(child);
                }
                else if (child instanceof HTMLElement)
                    l.View.appendChild(child);
                else {
                    var a = new Anchore(child, '#');
                    l.Add(a);
                }
                return l;
            };
            List.prototype.AddText = function (item) {
                var t = new Div();
                t.View.textContent = item;
                this.Add(t);
                return t;
            };
            List.prototype.OnChildAdded = function (child) {
                if (this._si == -1)
                    this.SelectedIndex = 0;
            };
            Object.defineProperty(List.prototype, "SelectedIndex", {
                get: function () {
                    return this._si;
                },
                set: function (i) {
                    var ox = this.getChild(this._si);
                    if (ox) {
                        if (ox.Presenter)
                            ox.Presenter.View.classList.remove('active');
                        else if (ox.Parent)
                            ox.Parent.disapplyStyle('active');
                    }
                    var x = this.getChild(i);
                    if (x)
                        if (x.Presenter)
                            x.Presenter.applyStyle('active');
                        else if (x.Parent)
                            x.Parent.applyStyle('active');
                },
                enumerable: true,
                configurable: true
            });
            return List;
        }(Control));
        UI.List = List;
        var DivControl = (function (_super) {
            __extends(DivControl, _super);
            function DivControl(tag) {
                return _super.call(this, typeof tag === 'string' ? document.createElement(tag || 'div') : tag) || this;
            }
            DivControl.prototype.initialize = function () {
            };
            DivControl.prototype.Check = function (child) {
                return child instanceof JControl;
            };
            return DivControl;
        }(Control));
        UI.DivControl = DivControl;
        var Div = (function (_super) {
            __extends(Div, _super);
            function Div() {
                return _super.call(this, document.createElement('div')) || this;
            }
            Div.prototype.initialize = function () {
            };
            Div.prototype.Check = function (item) { return true; };
            return Div;
        }(Control));
        UI.Div = Div;
        var ServiceNavBar = (function (_super) {
            __extends(ServiceNavBar, _super);
            function ServiceNavBar(App, autoInitializePanels) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.App = App;
                _this_1.autoInitializePanels = autoInitializePanels;
                _this_1.services = [];
                _this_1._services = [];
                _this_1.OnClick = _this_1.OnClick.bind(_this_1);
                _this_1.serviceNotified = _this_1.serviceNotified.bind(_this_1);
                return _this_1;
            }
            ServiceNavBar.prototype.initialize = function () {
                if (this.autoInitializePanels) {
                    this.LeftTabs = this._lefttabs || new Navbar();
                    this.RightTabs = this._righttabs || new Navbar();
                    delete this.autoInitializePanels;
                }
                this.applyStyle('navbar', 'navbar-fixed-bottom', 'appFoot', 'uncolapsed');
            };
            Object.defineProperty(ServiceNavBar.prototype, "LeftTabs", {
                set: function (v) {
                    var _this_1 = this;
                    if (this._lefttabs === v)
                        return;
                    if (this._lefttabs) {
                        _super.prototype.Remove.call(this, this._lefttabs);
                        this._lefttabs.OnSelectedItem.Remove(this);
                    }
                    if (v) {
                        _super.prototype.Add.call(this, v);
                        v.OnSelectedItem.Add(function (s) { if (_this_1.OnPageSelected)
                            _this_1.OnPageSelected(s); }, this);
                        v.Float(HorizontalAlignement.Left);
                    }
                    this._lefttabs = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ServiceNavBar.prototype, "RightTabs", {
                set: function (v) {
                    var _this_1 = this;
                    if (this._righttabs === v)
                        return;
                    if (this._righttabs) {
                        _super.prototype.Remove.call(this, this._righttabs);
                        this._righttabs.OnSelectedItem.Remove(this);
                    }
                    if (v) {
                        _super.prototype.Add.call(this, v);
                        v.OnSelectedItem.Add(function (s) { if (_this_1.OnPageSelected)
                            _this_1.OnPageSelected(s); }, this);
                        v.Float(HorizontalAlignement.Right);
                    }
                    this._righttabs = v;
                },
                enumerable: true,
                configurable: true
            });
            ServiceNavBar.prototype.createItem = function (page) {
                var x = new MenuItem(page);
                x.OnClick = this.OnClick;
                return x;
            };
            ServiceNavBar.prototype.OnClick = function (page) {
                if (this.OnPageSelected)
                    this.OnPageSelected(page);
            };
            ServiceNavBar.prototype.Add = function (child) {
                throw "Not Allowed";
            };
            ServiceNavBar.prototype.AddRange = function (child) {
                throw "Not Allowed";
            };
            ServiceNavBar.prototype.Remove = function (child) {
                if (child === this._lefttabs)
                    this.LeftTabs = null;
                else if (child === this._righttabs)
                    this.RightTabs = null;
                else
                    throw "Not Allowed";
                return true;
            };
            ServiceNavBar.prototype.serviceNotified = function (s, n) {
                if (this.App === App.CurrentApp)
                    if (n === NotifyType.Focuse)
                        this.Push(s);
                    else if (n === NotifyType.UnFocus)
                        this.Pop(s);
            };
            Object.defineProperty(ServiceNavBar.prototype, "currentStack", {
                get: function () { return this.services[this.services.length - 1]; },
                enumerable: true,
                configurable: true
            });
            ServiceNavBar.prototype.CurrentService = function () { var t = this.services[this.services.length - 1]; if (t)
                return t.Current; return null; };
            ServiceNavBar.prototype.PushGBar = function (ser) {
                this.HideCurrentService();
                this.services.push(new BarStack(ser));
                this.ShowCurrentService();
            };
            ServiceNavBar.prototype.PopGBar = function (ser) {
                this.HideCurrentService();
                this.services.pop();
                this.Add(ser.GetLeftBar());
            };
            ServiceNavBar.prototype.ExitBar = function () {
                this.HideCurrentService();
                this.currentStack.Exit();
                this.ShowCurrentService();
            };
            ServiceNavBar.prototype.PushBar = function (ser) {
                this.HideCurrentService();
                this.currentStack.Push(ser);
                this.ShowCurrentService();
            };
            ServiceNavBar.prototype.PopBar = function () {
                this.HideCurrentService();
                this.currentStack.Pop();
                this.ShowCurrentService();
            };
            ServiceNavBar.prototype.HideCurrentService = function () {
                var cs = this.currentStack;
                if (cs) {
                    var l = cs.Current.GetLeftBar();
                    var r = cs.Current.GetRightBar();
                    if (l) {
                        if (l instanceof Navbar)
                            this.LeftTabs = null;
                        else
                            this.Remove(l);
                    }
                    if (r) {
                        if (r instanceof Navbar)
                            this.RightTabs = null;
                        else
                            this.Remove(r);
                    }
                }
            };
            ServiceNavBar.prototype.ShowCurrentService = function () {
                var cs = this.currentStack;
                if (cs) {
                    var l = cs.Current.GetLeftBar();
                    var r = cs.Current.GetRightBar();
                    UI.MenuItem;
                    if (l) {
                        if (l instanceof Navbar)
                            this.LeftTabs = l;
                        else
                            this.Add(l);
                    }
                    if (r) {
                        if (r instanceof Navbar)
                            this.RightTabs = r;
                        else {
                            this.Add(r);
                        }
                    }
                    this.Visible = l != null || r != null;
                }
            };
            ServiceNavBar.prototype.Push = function (s) {
                if (!s || s === this.CurrentService())
                    return;
                this.HideCurrentService();
                var c = this.CurrentService();
                if (c)
                    if (c.ServiceType == ServiceType.Instantany)
                        this.currentStack.Pop();
                if (s.ServiceType == ServiceType.Main)
                    this.services.push(new BarStack(s));
                else {
                    var t = this.currentStack;
                    if (t == null)
                        this.services.push(new BarStack(s));
                    else
                        this.currentStack.Push(s);
                }
                this.ShowCurrentService();
            };
            ServiceNavBar.prototype.Has = function (s) {
                var c = this.services;
                var r;
                var l = c.length;
                for (var i = l - 1; i >= 0; i--) {
                    var x = c[i];
                    if ((r = x.Has(s)) !== 0)
                        return { stack: l - i + (r === -1 ? 0 : -1), serv: r };
                }
                return null;
            };
            ServiceNavBar.prototype.Pop = function (s) {
                this.HideCurrentService();
                if (s) {
                    var t = this.Has(s);
                    if (t) {
                        while (t.stack > 0) {
                            this.services.pop();
                            t.stack--;
                        }
                        var l = this.currentStack;
                        while (t.serv > 0) {
                            l.Pop();
                            t.serv--;
                        }
                    }
                }
                else {
                    var c = this.CurrentService();
                    if (c)
                        if (c.ServiceType === ServiceType.Main)
                            this.services.pop();
                        else
                            this.currentStack.Pop();
                }
                this.ShowCurrentService();
            };
            ServiceNavBar.prototype.Register = function (service) {
                if (service.Handler && !service.Handled()) {
                    service.Handler.addEventListener('pointerenter', function (e) {
                        App.CurrentApp.Foot.Push(service);
                    });
                    service.Handler.addEventListener('pointerout', function (e) {
                        App.CurrentApp.Foot.Pop(service);
                    });
                }
                if (service.Notify)
                    service.Notify.On = this.serviceNotified;
            };
            return ServiceNavBar;
        }(JControl));
        UI.ServiceNavBar = ServiceNavBar;
        var Navbar = (function (_super) {
            __extends(Navbar, _super);
            function Navbar() {
                var _this_1 = _super.call(this) || this;
                _this_1._items = new corelib_1.collection.ExList(Object);
                _this_1.oicd = { Owner: _this_1, Invoke: _this_1.ItemsChanged };
                _this_1.selectable = true;
                _this_1.OnSelectedItem = new corelib_1.bind.EventListener(_this_1);
                return _this_1;
            }
            Navbar.prototype.initialize = function () {
                _super.prototype.initialize.call(this);
                this.onClick = this.onClick.bind(this);
                this.applyStyle('nav', 'navbar-nav');
                this._items.Listen = this.oicd;
                this.ItemsChanged(corelib_1.utils.ListEventArgs.ResetEvent);
            };
            Navbar.prototype.ItemsChanged = function (e) {
                if (this.IsInit === false)
                    return;
                var m = this;
                var _items = this._items;
                switch (e.event) {
                    case corelib_1.collection.CollectionEvent.Added:
                        m.Add(this.createItem(e.newItem));
                        break;
                    case corelib_1.collection.CollectionEvent.Cleared:
                        this.CClear(m);
                        break;
                    case corelib_1.collection.CollectionEvent.Removed:
                        for (var i = 0, l = m.Count; i < l; i++) {
                            var c = m.getChild(i);
                            if (c.Source == e.oldItem) {
                                m.RemoveAt(i + 1, true);
                                break;
                            }
                        }
                        break;
                    case corelib_1.collection.CollectionEvent.Replace:
                        for (var i = 0, l = m.Count; i < l; i++) {
                            var c = m.getChild(i);
                            if (c.Source == e.oldItem) {
                                m.RemoveAt(i + 1, true);
                                break;
                            }
                        }
                        m.Add(new MenuItem(e.newItem));
                        break;
                    case corelib_1.collection.CollectionEvent.Reset:
                        this.CClear(m);
                        for (var i = 0, l = _items.Count; i < l; i++) {
                            var c = _items.Get(0);
                            m.Add(new MenuItem(c));
                        }
                        break;
                }
            };
            Navbar.prototype.createItem = function (page) {
                var x = new MenuItem(page);
                x.OnClick = this.onClick;
                return x;
            };
            Object.defineProperty(Navbar.prototype, "SelectedItem", {
                get: function () { return this._selectedItem; },
                enumerable: true,
                configurable: true
            });
            Navbar.prototype.onClick = function (page, sender) {
                if (this._selectedItem != null) {
                    var p = this._selectedItem.Presenter;
                    p.disapplyStyle('active');
                }
                if (sender != null) {
                    var p = sender.Presenter;
                    this._selectedItem = sender;
                    p.applyStyle('active');
                }
                if (!this.selectable)
                    setTimeout(function (nb, si) { return si.Presenter.disapplyStyle('active'); }, 500, this, sender);
                this.OnSelectedItem.Invok(this, function (c) { return c(page); });
            };
            Navbar.prototype.Float = function (v) {
                if (v == HorizontalAlignement.Right) {
                    this.disapplyStyle('pull-left');
                    this.applyStyle('pull-right');
                }
                else if (v == HorizontalAlignement.Left) {
                    this.applyStyle('pull-left');
                    this.disapplyStyle('pull-right');
                }
                else {
                    this.disapplyStyle('pull-left');
                    this.disapplyStyle('pull-right');
                }
            };
            Navbar.prototype.CClear = function (m) {
                for (var i = 2, l = m.Count; i < l; i++)
                    m.RemoveAt(i, true);
            };
            Object.defineProperty(Navbar.prototype, "Items", {
                get: function () {
                    return this._items;
                },
                enumerable: true,
                configurable: true
            });
            return Navbar;
        }(List));
        UI.Navbar = Navbar;
        var NavbarHeader = (function (_super) {
            __extends(NavbarHeader, _super);
            function NavbarHeader() {
                return _super.call(this, document.createElement('div')) || this;
            }
            Object.defineProperty(NavbarHeader.prototype, "Title", {
                get: function () {
                    return this._brand.Text;
                },
                set: function (v) {
                    this._brand.Text = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NavbarHeader.prototype, "Brand", {
                get: function () { return this._brandContainer; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NavbarHeader.prototype, "ToggleButton", {
                get: function () { return this._toggleButton; },
                enumerable: true,
                configurable: true
            });
            NavbarHeader.prototype.initialize = function () {
                var v = this.View;
                this.applyStyle('navbar-header');
                this._brand = new Anchore('QShop', '#');
                this._brandContainer = new Div();
                this._brandContainer.Add(this._brand);
                this._brandContainer.applyStyle('navbar-brand');
                corelib_1.bind.NamedScop.Create('GlobalPatent', {});
                var b = this._toggleButton = new GlyphButton();
                this.Add(this._brandContainer);
                this.Add(this._toggleButton);
            };
            Object.defineProperty(NavbarHeader.prototype, "IsFixedTop", {
                set: function (v) {
                    if (v)
                        this.applyStyle('navbar-fixed-top');
                    else
                        this.View.classList.remove('navbar-fixed-top');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NavbarHeader.prototype, "IsHeader", {
                set: function (v) {
                    if (v)
                        this.applyStyle('navbar-header');
                    else
                        this.View.classList.remove('navbar-header');
                },
                enumerable: true,
                configurable: true
            });
            return NavbarHeader;
        }(JControl));
        UI.NavbarHeader = NavbarHeader;
        var MenuItem = (function (_super) {
            __extends(MenuItem, _super);
            function MenuItem(Source) {
                var _this_1 = _super.call(this, Source.Content, Source.Url) || this;
                _this_1.Source = Source;
                _this_1.View.addEventListener('click', _this_1);
                return _this_1;
            }
            MenuItem.prototype.propChanged = function (p, e) {
                if (e.prop == Page.DPTitle)
                    this.Text = e._new;
                else if (e.prop == Page.DPUrl)
                    this.Href = e._new;
            };
            MenuItem.prototype.handleEvent = function (e) {
                if (this.OnClick)
                    this.OnClick(this.Source, this);
                this.Source.OnItemSelected(this);
            };
            MenuItem.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.View.removeEventListener('click', this);
                this.Source = null;
                this.OnClick = null;
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            return MenuItem;
        }(Anchore));
        UI.MenuItem = MenuItem;
        var ContentControl = (function (_super) {
            __extends(ContentControl, _super);
            function ContentControl(dom) {
                return _super.call(this, dom || document.createElement('div')) || this;
            }
            ContentControl.prototype.initialize = function () { };
            Object.defineProperty(ContentControl.prototype, "Content", {
                get: function () { return this._content; },
                set: function (v) {
                    if (this._content == v)
                        return;
                    if (this._content)
                        this.Remove(this._content);
                    this._content = v;
                    if (v)
                        this.Add(v);
                },
                enumerable: true,
                configurable: true
            });
            ContentControl.prototype.OnKeyDown = function (e) {
                return this._content && this._content.OnKeyDown(e);
            };
            ContentControl.prototype.OnContextMenu = function (e) {
                return this._content && this._content.OnContextMenu(e);
            };
            ContentControl = __decorate([
                attributes.ContentProperty("Content"),
                __metadata("design:paramtypes", [HTMLElement])
            ], ContentControl);
            return ContentControl;
        }(JControl));
        UI.ContentControl = ContentControl;
        var ButtonStyle;
        (function (ButtonStyle) {
            ButtonStyle[ButtonStyle["Default"] = 0] = "Default";
            ButtonStyle[ButtonStyle["Primary"] = 1] = "Primary";
            ButtonStyle[ButtonStyle["success"] = 2] = "success";
            ButtonStyle[ButtonStyle["Info"] = 3] = "Info";
            ButtonStyle[ButtonStyle["Warning"] = 4] = "Warning";
            ButtonStyle[ButtonStyle["Danger"] = 5] = "Danger";
            ButtonStyle[ButtonStyle["Link"] = 6] = "Link";
            ButtonStyle[ButtonStyle["Block"] = 7] = "Block";
        })(ButtonStyle = UI.ButtonStyle || (UI.ButtonStyle = {}));
        var Input = (function (_super) {
            __extends(Input, _super);
            function Input(dom) {
                return _super.call(this, dom || document.createElement('input')) || this;
            }
            Input.prototype.Disable = function (disable) {
                var c = $('input', this._view);
                for (var i = 0; i < c.length; i++) {
                    c[i].disabled = disable;
                }
            };
            Input.prototype.initialize = function () {
                this.applyStyle('input', 'form-control');
                if (this._view instanceof HTMLInputElement) {
                    this._view.addEventListener('focusout', this);
                    this._view.addEventListener('focusin', this);
                }
            };
            Object.defineProperty(Input.prototype, "Placeholder", {
                set: function (v) { this.View.placeholder = v; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Input.prototype, "Text", {
                get: function () { return this.View.value; },
                set: function (v) { this.View.value = v; },
                enumerable: true,
                configurable: true
            });
            Input.prototype.Blur = function () {
                this._view && this._view.blur();
            };
            Input.prototype.handleEvent = function (e) {
                if (e.type === 'focusout')
                    this.OnFocusOut(e);
                else if (e.type === 'focusin')
                    this.OnFocusIn(e);
            };
            Input.prototype.OnFocusIn = function (e) {
                UI.Desktop.Current.GetKeyControl(this, this.OnKeyPressed, []);
            };
            Input.prototype.OnKeyPressed = function (e) {
                if (e.keyCode == 27 || e.keyCode == 13)
                    this.Blur();
                return UI.KeyboardControllerResult.Handled;
            };
            Input.prototype.OnFocusOut = function (e) {
                UI.Desktop.Current.ReleaseKeyControl();
            };
            return Input;
        }(JControl));
        UI.Input = Input;
        var SearchActionMode;
        (function (SearchActionMode) {
            SearchActionMode[SearchActionMode["None"] = 0] = "None";
            SearchActionMode[SearchActionMode["Validated"] = 1] = "Validated";
            SearchActionMode[SearchActionMode["Instantany"] = 2] = "Instantany";
            SearchActionMode[SearchActionMode["NoSearch"] = 3] = "NoSearch";
        })(SearchActionMode = UI.SearchActionMode || (UI.SearchActionMode = {}));
        var ActionText = (function (_super) {
            __extends(ActionText, _super);
            function ActionText(input) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.OnAction = new corelib_1.bind.EventListener(_this_1.Id);
                _this_1.ia = 0;
                _this_1.tout = -1;
                _this_1.job = corelib_1.thread.Dispatcher.cretaeJob(_this_1.txtChanged, [null], _this_1, true);
                _this_1.ls = "";
                _this_1.txtInput = new Input(input);
                return _this_1;
            }
            Object.defineProperty(ActionText.prototype, "Box", {
                get: function () { return this.txtInput; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ActionText.prototype, "Icon", {
                get: function () { return this.btn_ok; },
                enumerable: true,
                configurable: true
            });
            ActionText.prototype.Bur = function () {
                this.txtInput.Blur();
            };
            ActionText.prototype.initialize = function () {
                this.applyStyle('csTB', 'input-group');
                var btn = new Button().applyStyle('form-control', 'glyphicon', 'glyphicon-search');
                btn.Style = ButtonStyle.Primary;
                btn.Text = '';
                var sp = new Dom('span');
                sp.applyStyle('input-group-btn');
                var inp = this.txtInput;
                inp.ToolTip = 'Entrer you email';
                inp.Placeholder = 'Entrer you email';
                this.Add(inp);
                this.Add(sp);
                sp.Add(btn);
                this.btn_ok = btn;
                this.txtInput = inp;
                this.btnClicked = this.btnClicked.bind(this);
                btn.View.addEventListener('click', this.btnClicked);
            };
            Object.defineProperty(ActionText.prototype, "AutoAction", {
                get: function () {
                    return this.ia;
                },
                set: function (v) {
                    if (v == this.ia)
                        return;
                    switch (v) {
                        case 3:
                        case 0:
                            this.txtInput.View.removeEventListener('change', this);
                            this.txtInput.View.removeEventListener('keyup', this);
                            break;
                        case 1:
                            this.txtInput.View.addEventListener('change', this);
                            this.txtInput.View.removeEventListener('keyup', this);
                            break;
                        case 2:
                            this.txtInput.View.removeEventListener('change', this);
                            this.txtInput.View.addEventListener('keyup', this);
                            break;
                    }
                    var x = this.txtInput.View[v ? 'addEventListener' : 'removeEventListener']('change', this);
                    this.ia = v;
                },
                enumerable: true,
                configurable: true
            });
            ActionText.prototype.btnClicked = function (ev) {
                var n = this.txtInput.Text;
                var o = this.ls;
                this.ls = n;
                var t = this;
                this.OnAction.Invok(this.Id, function (e) { e(t, o, n); });
            };
            ActionText.prototype.txtChanged = function (ev) {
                var n = this.txtInput.Text;
                var o = this.ls;
                if (n == o)
                    return;
                this.ls = n;
                var t = this;
                this.OnAction.Invok(this.Id, function (e) { e(t, o, n); });
            };
            ActionText.prototype.handleEvent = function (e) {
                var _this_1 = this;
                switch (e.type) {
                    case 'click':
                        this.txtChanged(e);
                        break;
                    case 'change':
                        if (e.srcElement === this.txtInput.View)
                            return this.txtChanged(e);
                        break;
                    case 'keyup':
                        if (e.srcElement === this.txtInput.View) {
                            if (this.isExecuting)
                                return;
                            this.isExecuting = true;
                            this.tout = setTimeout(function (t, x) { _this_1.isExecuting = false; t.txtChanged(e); }, 500, this, e);
                            return;
                        }
                    default:
                        _super.prototype.handleEvent.call(this, e);
                }
            };
            Object.defineProperty(ActionText.prototype, "Text", {
                get: function () { return this.txtInput.View.value; },
                set: function (v) { this.txtInput.View.value = v; },
                enumerable: true,
                configurable: true
            });
            ActionText.prototype.Focus = function () {
                this.Box.View.focus();
            };
            return ActionText;
        }(JControl));
        UI.ActionText = ActionText;
        var CItem = (function () {
            function CItem(Tag, Content, Url, onselect) {
                this.Tag = Tag;
                this.Content = Content;
                this.Url = Url;
                this.onselect = onselect;
                this.Content = new Anchore(Content);
            }
            CItem.prototype.OnPropertyChanged = function (e, m) {
            };
            CItem.prototype.OnItemSelected = function (menuItem) {
                if (this.onselect)
                    this.onselect.Invoke.call(this.onselect.Owner, menuItem);
            };
            return CItem;
        }());
        UI.CItem = CItem;
        var QBar = (function (_super) {
            __extends(QBar, _super);
            function QBar(top) {
                var _this_1 = _super.call(this, document.createElement('ul')) || this;
                _this_1.top = top;
                _this_1.OnClick = _this_1.OnClick.bind(_this_1);
                return _this_1;
            }
            Object.defineProperty(QBar.prototype, "LeftTabs", {
                set: function (v) {
                    var _this_1 = this;
                    if (this._lefttabs) {
                        this._colapsedZone.Remove(this._lefttabs, false);
                        this._lefttabs.OnSelectedItem.Remove(this);
                    }
                    if (v) {
                        this._colapsedZone.Add(v);
                        v.OnSelectedItem.Add(function (s) { if (_this_1.OnPageSelected)
                            _this_1.OnPageSelected(s); }, this);
                    }
                    this._lefttabs = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QBar.prototype, "RightTabs", {
                set: function (v) {
                    var _this_1 = this;
                    if (this._righttabs) {
                        this._colapsedZone.Remove(this._righttabs, false);
                        this._righttabs.OnSelectedItem.Remove(this);
                    }
                    if (v) {
                        this._colapsedZone.Add(v);
                        v.OnSelectedItem.Add(function (s) { if (_this_1.OnPageSelected)
                            _this_1.OnPageSelected(s); }, this);
                        v.Float(HorizontalAlignement.Right);
                    }
                    this._righttabs = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QBar.prototype, "Header", {
                get: function () { return this._header; },
                enumerable: true,
                configurable: true
            });
            QBar.prototype.createItem = function (page) {
                var x = new MenuItem(page);
                x.OnClick = this.OnClick;
                return x;
            };
            QBar.prototype.initialize = function () {
                var _this_1 = this;
                this.bi = true;
                this.applyStyle('navbar', this.top ? 'navbar-fixed-top' : 'navbar-fixed-bottom');
                this._header = new NavbarHeader();
                this._container = new Div();
                this._colapsedZone = new Dom('div').applyStyle('collapse', 'navbar-collapse');
                this.Add(this._container.AddRange([this._header, this._colapsedZone]));
                this.bi = false;
                this._header.OnInitialized = function (x) { return x.ToggleButton.CollapsedZone = _this_1._colapsedZone; };
                this._header.ToggleButton.addEventListener('click', function (h, e, p) { return p.Open(); }, this);
            };
            QBar.prototype.Open = function (on) {
                var v = this._colapsedZone.View.classList;
                v[(on == undefined ? v.contains('in') : !on) ? 'remove' : 'add']('in');
            };
            QBar.prototype.OnClick = function (page) {
                if (this.OnPageSelected)
                    this.OnPageSelected(page);
            };
            QBar.prototype.Add = function (child) {
                if (this.bi)
                    _super.prototype.Add.call(this, child);
                else
                    this._colapsedZone.Add(child);
                return this;
            };
            QBar.prototype.Remove = function (child) {
                return this._colapsedZone.Remove(child);
            };
            return QBar;
        }(JControl));
        UI.QBar = QBar;
        var Head = (function (_super) {
            __extends(Head, _super);
            function Head(top) {
                var _this_1 = _super.call(this, document.createElement('ul')) || this;
                _this_1.top = top;
                _this_1.OnClick = _this_1.OnClick.bind(_this_1);
                return _this_1;
            }
            Object.defineProperty(Head.prototype, "Menu", {
                get: function () { return this._tabs; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Head.prototype, "SubsMenu", {
                get: function () { return this._tabs; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Head.prototype, "Header", {
                get: function () {
                    return this._header;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Head.prototype, "Container", {
                get: function () {
                    return this._container;
                },
                enumerable: true,
                configurable: true
            });
            Head.prototype.createItem = function (page) {
                var x = new MenuItem(page);
                x.OnClick = this.OnClick;
                return x;
            };
            Head.__fields__ = function () { return [this.DPSelectedItem]; };
            Head.prototype.Clear = function () {
                this._tabs.Clear();
                this._stabs.Clear();
            };
            Head.prototype.CClear = function (m) {
                for (var i = 2, l = m.Count; i < l; i++)
                    m.RemoveAt(i, true);
            };
            Head.prototype.initialize = function () {
                var _this_1 = this;
                this._header = new NavbarHeader();
                this._container = new Div();
                this._colapsedZone = new Dom('div').applyStyle('collapse', 'navbar-collapse');
                this._tabs = new Navbar();
                this._stabs = new Navbar();
                this._stabs.Float(HorizontalAlignement.Right);
                this._stabs.OnSelectedItem.Add(function (s) { return _this_1.SelectedItem = s; }, this);
                this._tabs.OnSelectedItem.Add(function (s) { return _this_1.SelectedItem = s; }, this);
                this.Add(this._container.AddRange([this._header, this._colapsedZone.AddRange([this._tabs])]));
                this._header.OnInitialized = function (x) { return x.ToggleButton.CollapsedZone = _this_1._colapsedZone; };
                this._header.ToggleButton.addEventListener('click', function (h, e, p) {
                    var v = p._colapsedZone.View.classList;
                    v[v.contains('in') ? 'remove' : 'add']('in');
                }, this);
            };
            Head.prototype.OnClick = function (item) {
                this.SelectedItem = item;
            };
            Head.DPSelectedItem = corelib_1.bind.DObject.CreateField("SelectedItem", Object);
            return Head;
        }(JControl));
        UI.Head = Head;
        var Foot = (function (_super) {
            __extends(Foot, _super);
            function Foot() {
                return _super.call(this, document.createElement('div')) || this;
            }
            Foot.prototype.initialize = function () {
                this.applyStyle('navbar', 'navbar-fixed-bottom');
                this.View.style.width = '100%';
            };
            Foot.prototype.Check = function (c) { return c instanceof JControl; };
            return Foot;
        }(JControl));
        UI.Foot = Foot;
        var Keys;
        (function (Keys) {
            Keys[Keys["Enter"] = 13] = "Enter";
            Keys[Keys["Tab"] = 9] = "Tab";
            Keys[Keys["Esc"] = 27] = "Esc";
            Keys[Keys["Escape"] = 27] = "Escape";
            Keys[Keys["Up"] = 38] = "Up";
            Keys[Keys["Down"] = 40] = "Down";
            Keys[Keys["Left"] = 37] = "Left";
            Keys[Keys["Right"] = 39] = "Right";
            Keys[Keys["PgDown"] = 34] = "PgDown";
            Keys[Keys["PageDown"] = 34] = "PageDown";
            Keys[Keys["PgUp"] = 33] = "PgUp";
            Keys[Keys["PageUp"] = 33] = "PageUp";
            Keys[Keys["End"] = 35] = "End";
            Keys[Keys["Home"] = 36] = "Home";
            Keys[Keys["Insert"] = 45] = "Insert";
            Keys[Keys["Delete"] = 46] = "Delete";
            Keys[Keys["Backspace"] = 8] = "Backspace";
            Keys[Keys["Space"] = 32] = "Space";
            Keys[Keys["Meta"] = 91] = "Meta";
            Keys[Keys["Win"] = 91] = "Win";
            Keys[Keys["Mac"] = 91] = "Mac";
            Keys[Keys["Multiply"] = 106] = "Multiply";
            Keys[Keys["Add"] = 107] = "Add";
            Keys[Keys["Subtract"] = 109] = "Subtract";
            Keys[Keys["Decimal"] = 110] = "Decimal";
            Keys[Keys["Divide"] = 111] = "Divide";
            Keys[Keys["Scrollock"] = 145] = "Scrollock";
            Keys[Keys["Pausebreak"] = 19] = "Pausebreak";
            Keys[Keys["Numlock"] = 144] = "Numlock";
            Keys[Keys["5numlocked"] = 12] = "5numlocked";
            Keys[Keys["Shift"] = 16] = "Shift";
            Keys[Keys["Capslock"] = 20] = "Capslock";
            Keys[Keys["F1"] = 112] = "F1";
            Keys[Keys["F2"] = 113] = "F2";
            Keys[Keys["F3"] = 114] = "F3";
            Keys[Keys["F4"] = 115] = "F4";
            Keys[Keys["F5"] = 116] = "F5";
            Keys[Keys["F6"] = 117] = "F6";
            Keys[Keys["F7"] = 118] = "F7";
            Keys[Keys["F8"] = 119] = "F8";
            Keys[Keys["F9"] = 120] = "F9";
            Keys[Keys["F10"] = 121] = "F10";
            Keys[Keys["F11"] = 122] = "F11";
            Keys[Keys["F12"] = 123] = "F12";
            Keys[Keys["AltLeft"] = 18] = "AltLeft";
            Keys[Keys["AltRight"] = 18] = "AltRight";
            Keys[Keys["ShiftLeft"] = 18] = "ShiftLeft";
            Keys[Keys["ShiftRight"] = 18] = "ShiftRight";
            Keys[Keys["ControlLeft"] = 17] = "ControlLeft";
            Keys[Keys["ControlRight"] = 17] = "ControlRight";
            Keys[Keys["MetaLeft"] = 91] = "MetaLeft";
            Keys[Keys["MetaRight"] = 91] = "MetaRight";
        })(Keys = UI.Keys || (UI.Keys = {}));
        var Controlkeys;
        (function (Controlkeys) {
            Controlkeys[Controlkeys["Alt"] = 18] = "Alt";
            Controlkeys[Controlkeys["Shift"] = 16] = "Shift";
            Controlkeys[Controlkeys["Control"] = 17] = "Control";
            Controlkeys[Controlkeys["Meta"] = 91] = "Meta";
        })(Controlkeys = UI.Controlkeys || (UI.Controlkeys = {}));
        var HotKey = (function () {
            function HotKey() {
            }
            Object.defineProperty(HotKey.prototype, "Key", {
                get: function () { return this._key; },
                set: function (v) { if (Keys[v] === undefined)
                    throw "controls key is uncorrect"; this._key = v; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(HotKey.prototype, "Control", {
                get: function () { return this.__ctrl; },
                set: function (v) { if (Controlkeys[v] === undefined)
                    throw "controls key is uncorrect"; this.__ctrl = v; },
                enumerable: true,
                configurable: true
            });
            ;
            ;
            HotKey.prototype.IsPressed = function (e) {
                return this.checkKey(e) && this.checkControl(e);
            };
            HotKey.prototype.checkKey = function (e) {
                var l = this.Key;
                if (l == null)
                    return true;
                return e.keyCode == l;
            };
            HotKey.prototype.checkControl = function (e) {
                switch (this.Control) {
                    case 18:
                        return e.altKey;
                    case 16:
                        return e.shiftKey;
                    case 17:
                        return e.ctrlKey;
                    case 91:
                        return e.metaKey;
                }
                return true;
            };
            return HotKey;
        }());
        UI.HotKey = HotKey;
        var Page = (function (_super) {
            __extends(Page, _super);
            function Page(app, title, Name) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.app = app;
                _this_1.Name = Name;
                _this_1._fl = true;
                _this_1.ServiceType = ServiceType.Main;
                _this_1.Notify = new corelib_1.bind.EventListener(_this_1);
                _this_1._onSelected = new corelib_1.bind.EventListener(_this_1, false);
                _this_1.Content = title;
                return _this_1;
            }
            Page.prototype.Callback = function (args) {
            };
            Object.defineProperty(Page.prototype, "FloatLeft", {
                get: function () { return this._fl; },
                set: function (v) { this._fl = v; },
                enumerable: true,
                configurable: true
            });
            Page.prototype.getDPTitle = function () { return Page.DPTitle; };
            Page.prototype.getDPUrl = function () { return Page.DPUrl; };
            Object.defineProperty(Page.prototype, "Content", {
                get: function () { return this.get(Page.DPTitle); },
                set: function (v) { this.set(Page.DPTitle, v); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Page.prototype, "Url", {
                get: function () { return this.get(Page.DPUrl); },
                set: function (v) { this.set(Page.DPUrl, v); },
                enumerable: true,
                configurable: true
            });
            Page.__fields__ = function () { return [Page.DPTitle, Page.DPUrl]; };
            Page.prototype.getSuggessions = function () { return Empty; };
            Page.prototype.OnSearche = function (oldPatent, newPatent) {
            };
            Page.prototype.initialize = function () {
            };
            Page.prototype.Update = function () {
            };
            Object.defineProperty(Page.prototype, "intern", {
                get: function () { return !false; },
                enumerable: true,
                configurable: true
            });
            ;
            Page.prototype.Check = function (c) {
                return this.intern && c instanceof JControl;
            };
            Page.prototype.Dispose = function () {
                this.Parent.Remove(this);
                corelib_1.bind.DObject.prototype.Dispose.call(this);
            };
            Page.prototype.GetLeftBar = function () {
                return null;
            };
            Page.prototype.GetRightBar = function () { return null; };
            Page.prototype.OnItemSelected = function (menuItem) {
                var _this_1 = this;
                this.OnSelected.Invok(this, function (p) { return p(_this_1); });
            };
            Object.defineProperty(Page.prototype, "OnSelected", {
                get: function () { return this._onSelected; },
                enumerable: true,
                configurable: true
            });
            Page.prototype.Handled = function () {
                return true;
            };
            Page.prototype.OnKeyCombined = function (e, v) {
                var s = this.Content;
                if (s instanceof JControl)
                    return s.OnKeyCombined(e, v);
            };
            Page.prototype.OnKeyDown = function (e) {
                if (this.Content instanceof JControl)
                    return this.Content.OnKeyDown(e);
            };
            Page.prototype.OnPrint = function () {
            };
            Page.prototype.OnDeepSearche = function () {
            };
            Page.prototype.OnContextMenu = function (e) {
                if (this.Content instanceof JControl)
                    if (this.Content.OnContextMenu(e))
                        return true;
                if (this.ContextMenu)
                    this.ContextMenu.Show(e.pageX, e.pageY);
                else
                    return;
                return true;
            };
            Page.DPTitle = Page.CreateField('Title', Object, 'Page', function (e) { var t = e.__this; });
            Page.DPUrl = Page.CreateField('Url', String, '#');
            return Page;
        }(Control));
        UI.Page = Page;
        var BarStack = (function () {
            function BarStack(current) {
                this.others = [];
                this._current = current;
            }
            Object.defineProperty(BarStack.prototype, "Current", {
                get: function () {
                    if (this.others.length == 0)
                        return this._current;
                    return this.others[this.others.length - 1];
                },
                enumerable: true,
                configurable: true
            });
            BarStack.prototype.Push = function (s) {
                this.others.push(s);
            };
            BarStack.prototype.Pop = function () {
                return this.others.pop();
            };
            BarStack.prototype.Has = function (s) {
                var c = this.others, l = c.length;
                if (this._current == s)
                    return -1;
                for (var i = l - 1; i >= 0; i--) {
                    var x = c[i];
                    if (x == s)
                        return l - i;
                }
                return 0;
            };
            BarStack.prototype.Exit = function () { this.others.length = 0; };
            return BarStack;
        }());
        UI.BarStack = BarStack;
        var HorizontalAlignement;
        (function (HorizontalAlignement) {
            HorizontalAlignement[HorizontalAlignement["Left"] = 0] = "Left";
            HorizontalAlignement[HorizontalAlignement["Center"] = 1] = "Center";
            HorizontalAlignement[HorizontalAlignement["Right"] = 2] = "Right";
        })(HorizontalAlignement = UI.HorizontalAlignement || (UI.HorizontalAlignement = {}));
        var VerticalAlignement;
        (function (VerticalAlignement) {
            VerticalAlignement[VerticalAlignement["Top"] = 0] = "Top";
            VerticalAlignement[VerticalAlignement["Center"] = 1] = "Center";
            VerticalAlignement[VerticalAlignement["Bottom"] = 2] = "Bottom";
        })(VerticalAlignement = UI.VerticalAlignement || (UI.VerticalAlignement = {}));
        var Point = (function () {
            function Point(x, y) {
                this.x = x;
                this.y = y;
            }
            return Point;
        }());
        UI.Point = Point;
        var ms = ['px', '%', 'in', 'em'];
        var MetricType;
        (function (MetricType) {
            MetricType[MetricType["Pixel"] = 0] = "Pixel";
            MetricType[MetricType["Percentage"] = 1] = "Percentage";
            MetricType[MetricType["Inch"] = 2] = "Inch";
            MetricType[MetricType["Em"] = 3] = "Em";
        })(MetricType = UI.MetricType || (UI.MetricType = {}));
        var Metric = (function () {
            function Metric(value, type) {
                if (typeof value === 'string') {
                    this.fromString(value);
                }
                else {
                    this.Value = value;
                    this.Type = type;
                }
            }
            Metric.prototype.minus = function (v) {
                if (this.Type == MetricType.Pixel)
                    return new Metric(this.Value - v, MetricType.Pixel);
                if (this.Type == MetricType.Percentage)
                    return new Metric(this.Value - v, MetricType.Percentage);
                if (this.Type == MetricType.Em)
                    return new Metric(this.Value - v, MetricType.Em);
                if (this.Type == MetricType.Inch)
                    return new Metric(this.Value - v, MetricType.Inch);
            };
            Metric.prototype.toString = function () { return this.Value + ms[this.Type || 0]; };
            Metric.prototype.fromString = function (s) {
                for (var i = 0; i < ms.length; i++)
                    if (s.endsWith(ms[i])) {
                        this.Value = parseFloat(s);
                        this.Type = i;
                        return;
                    }
            };
            return Metric;
        }());
        UI.Metric = Metric;
        var Error = (function (_super) {
            __extends(Error, _super);
            function Error() {
                return _super.call(this, document.createElement('div')) || this;
            }
            Object.defineProperty(Error.prototype, "Message", {
                get: function () { return this._text; },
                set: function (v) {
                    this._text = v;
                    if (this.container)
                        this.container.textContent = v;
                },
                enumerable: true,
                configurable: true
            });
            Error.prototype.initialize = function () {
                this.applyStyle(this.IsInfo ? 'webix_info' : 'webix_error');
                this.container = document.createElement('div');
                this.container.innerHTML = this._text;
                this._view.appendChild(this.container);
                this._view.addEventListener('mousedown', this);
            };
            Error.prototype.handleEvent = function (e) {
                if (e.type == 'mousedown') {
                    this._view.removeEventListener('mousedown', this);
                    this.Pop();
                }
                else
                    _super.prototype.handleEvent.call(this, e);
            };
            Error.prototype.Push = function () {
                InfoArea.Default.Add(this);
                this.timeout = setTimeout(function (t) { t.Pop(); }, this.Expire || 3000, this);
            };
            Error.prototype.Pop = function () {
                this.applyStyle('ihidden');
                var x = {};
                clearTimeout(this.timeout);
                x.id = setTimeout(function (t, x) { clearTimeout(x.id); InfoArea.Default.Remove(t); t.Dispose(); }, 2000, this, x);
            };
            Error.prototype.Dispose = function () {
                this.container = null;
                this._text = null;
                _super.prototype.Dispose.call(this);
            };
            return Error;
        }(JControl));
        UI.Error = Error;
        var ia;
        var InfoArea = (function (_super) {
            __extends(InfoArea, _super);
            function InfoArea() {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.initialize();
                return _this_1;
            }
            Object.defineProperty(InfoArea, "Default", {
                get: function () {
                    if (!ia) {
                        ia = new InfoArea();
                        ia.Parent = Desktop.Current;
                    }
                    return ia;
                },
                enumerable: true,
                configurable: true
            });
            InfoArea.prototype.initialize = function () {
                this.applyStyle('webix_message_area');
                document.body.appendChild(this._view);
            };
            InfoArea.prototype.Check = function (j) {
                return j instanceof Error;
            };
            InfoArea.push = function (msg, isInfo, expire) {
                var t = new Error();
                t.Message = msg;
                t.IsInfo = isInfo;
                t.Expire = expire;
                t.Push();
            };
            return InfoArea;
        }(Control));
        UI.InfoArea = InfoArea;
        var Size = (function () {
            function Size(w, h) {
                if (typeof w === 'number' || typeof w === 'string')
                    this.w = new Metric(w, 0);
                else
                    this.w = w;
                if (typeof h === 'number' || typeof h === 'string')
                    this.h = new Metric(h, 0);
                else
                    this.h = h;
            }
            return Size;
        }());
        UI.Size = Size;
        var Badge = (function (_super) {
            __extends(Badge, _super);
            function Badge() {
                return _super.call(this, document.createElement('span')) || this;
            }
            Badge.prototype.initialize = function () {
                this.applyStyle('badge');
            };
            Object.defineProperty(Badge.prototype, "Content", {
                set: function (v) {
                    this.Clear();
                    if (v instanceof HTMLElement)
                        this.Add(new DivControl(v));
                    else
                        this.View.innerText = v.toString();
                },
                enumerable: true,
                configurable: true
            });
            return Badge;
        }(JControl));
        UI.Badge = Badge;
        var DragManager = (function () {
            function DragManager(handler, target) {
                this.handler = handler;
                this.target = target;
                this.loc = new Point(0, 0);
                this.mouseloc = { x: undefined, y: undefined };
                this.cntloc = { x: this.loc.x, y: this.loc.y };
                this.RelocationJob = corelib_1.thread.Dispatcher.cretaeJob(this.reLocation, [], this, true);
                handler.View.addEventListener('dragstart', this);
                this.handler.View.draggable = true;
                this.View = target.View;
            }
            DragManager.prototype.handleEvent = function (e) {
                if (e.type == 'dragstart') {
                    this.mouseloc = { x: e.x, y: e.y };
                    this.cntloc = { x: this.target.View.offsetLeft, y: this.target.View.offsetTop };
                    this.handler.View.addEventListener('dragend', this);
                }
                else if (e.type == 'dragend') {
                    var c = this.cntloc;
                    var m = this.mouseloc;
                    this.Location = { x: c.x + (e.x - m.x), y: Math.max(0, c.y + (e.y - m.y)) };
                    this.handler.View.removeEventListener('dragend', this);
                }
                if (e.type === 'resize')
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(true, true));
            };
            Object.defineProperty(DragManager.prototype, "Location", {
                set: function (l) {
                    this.loc = l;
                    this.RelocationJob[0] = true;
                    this.RelocationJob[1] = true;
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(true, true));
                },
                enumerable: true,
                configurable: true
            });
            DragManager.prototype.reLocation = function (hr, vr) {
                var v = this.View;
                var s = v.style;
                var l = this.loc;
                var w = window;
                if (hr) {
                    s.left = l.x + px;
                }
                if (vr) {
                    s.top = l.y + px;
                }
            };
            return DragManager;
        }());
        UI.DragManager = DragManager;
        var FixedPanel = (function (_super) {
            __extends(FixedPanel, _super);
            function FixedPanel(view) {
                var _this_1 = _super.call(this, view || document.createElement('div')) || this;
                _this_1.loc = new Point(0, 0);
                _this_1.size = new Size(window.screen.availWidth / 2, window.screen.availHeight / 2);
                _this_1.mouseloc = { x: undefined, y: undefined };
                _this_1.cntloc = { x: _this_1.loc.x, y: _this_1.loc.y };
                _this_1.RelocationJob = corelib_1.thread.Dispatcher.cretaeJob(_this_1.reLocation, [], _this_1, true);
                return _this_1;
            }
            FixedPanel.prototype.initialize = function () {
                var _this_1 = this;
                window.addEventListener('resize', this);
                this.body = new Dom('div');
                var v = this.View.style;
                v.display = 'block';
                v.background = 'radial-gradient( #222,black)';
                v.position = 'fixed';
                v.border = '2px gray solid';
                this.HorizontalAlignement = HorizontalAlignement.Center;
                this.VerticalAlignement = VerticalAlignement.Center;
                this.Location = { x: 200, y: 200 };
                this.Size = new Size(new Metric(90, MetricType.Percentage), new Metric(90, MetricType.Percentage));
                this.body.OnInitialized = function (b) {
                    var tt = _this_1.Height;
                    _this_1.Height = new Metric(89, MetricType.Percentage);
                };
                this.body.View.style.marginTop = '50px';
                this.body.View.style.overflow = 'auto';
                _super.prototype.Add.call(this, this.body);
            };
            FixedPanel.prototype.Check = function (i) {
                return i instanceof JControl;
            };
            FixedPanel.prototype.handleEvent = function (e) {
                if (e.type == 'dragstart') {
                    this.mouseloc = { x: e.x, y: e.y };
                    this.cntloc = { x: this.View.offsetLeft, y: this.View.offsetTop };
                    window.document.styleSheets.item(0);
                }
                else if (e.type == 'dragend') {
                    var c = this.cntloc;
                    var m = this.mouseloc;
                    this.Location = { x: c.x + (e.x - m.x), y: c.y + (e.y - m.y) };
                }
                if (e.type === 'resize')
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(true, true));
            };
            Object.defineProperty(FixedPanel.prototype, "Height", {
                set: function (v) {
                    var h = v.toString();
                    this.View.style.maxHeight = h;
                    this.View.style.minHeight = h;
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(undefined, true));
                    corelib_1.thread.Dispatcher.Push(FixedPanel.resizeBody, [this]);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FixedPanel.prototype, "Width", {
                set: function (v) {
                    var w = v.toString();
                    this.View.style.maxWidth = w;
                    this.View.style.minWidth = w;
                    this.body.View.style.width = v.minus(5).toString();
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(true, undefined));
                    corelib_1.thread.Dispatcher.Push(FixedPanel.resizeBody, [this]);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FixedPanel.prototype, "HorizontalAlignement", {
                set: function (ha) {
                    this.ha = ha || 0;
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(true, undefined));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FixedPanel.prototype, "VerticalAlignement", {
                set: function (va) {
                    this.va = va || 0;
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(undefined, true));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FixedPanel.prototype, "Location", {
                set: function (l) {
                    this.loc = l;
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(true, true));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FixedPanel.prototype, "Size", {
                set: function (s) {
                    this.size = s;
                    this.Width = s.w;
                    this.Height = s.h;
                    corelib_1.thread.Dispatcher.Push(this.RelocationJob.Set(true, true));
                    corelib_1.thread.Dispatcher.Push(FixedPanel.resizeBody, [this]);
                },
                enumerable: true,
                configurable: true
            });
            FixedPanel.prototype.reLocation = function (hr, vr) {
                var v = this.View;
                var s = v.style;
                var l = this.loc;
                var w = window;
                var px = 'px';
                if (hr) {
                    switch (this.ha) {
                        case HorizontalAlignement.Left:
                            s.left = l.x + px;
                            break;
                        case HorizontalAlignement.Center:
                            s.left = (w.innerWidth - this.View.clientWidth) / 2 + px;
                            break;
                        case HorizontalAlignement.Right:
                            s.left = (w.innerWidth - this.View.clientWidth - l.x) + px;
                            break;
                    }
                }
                if (vr) {
                    switch (this.va) {
                        case VerticalAlignement.Top:
                            s.top = l.y + px;
                            break;
                        case VerticalAlignement.Center:
                            s.top = (w.innerHeight - this.View.clientHeight) / 2 + px;
                            break;
                        case VerticalAlignement.Bottom:
                            s.top = (w.innerHeight - this.View.clientHeight - l.y) + px;
                            break;
                    }
                }
            };
            FixedPanel.prototype.Add = function (child) {
                this.body.Add(child);
                return this;
            };
            FixedPanel.prototype.AddRange = function (childs) {
                for (var i = 0, l = childs.length; i < l; i++)
                    this.body.Add(childs[i]);
                return this;
            };
            FixedPanel.resizeBody = corelib_1.thread.Dispatcher.cretaeJob(function (t) {
                t.body.View.style.height = t.View.clientHeight + 'px';
                t.body.View.style.width = t.View.clientWidth + 'px';
            }, [], null, false);
            return FixedPanel;
        }(JControl));
        UI.FixedPanel = FixedPanel;
        var intern = false;
        var _app = null;
        var Empty = new corelib_1.collection.List(String);
        Empty.Freeze();
        var Layout = (function (_super) {
            __extends(Layout, _super);
            function Layout(view) {
                var _this_1 = _super.call(this, view) || this;
                _this_1.Pages = new corelib_1.collection.List(Object);
                _this_1.opcd = { Owner: _this_1, Invoke: _this_1.PagesChanged };
                _this_1.openedModal = [];
                _this_1.zIndex = 1000;
                _this_1._contextMenuLayer = void 0;
                _this_1._currentContextMenu = void 0;
                _this_1._currentContextMenuEventArgs = void 0;
                _this_1._contextMenuZIndex = 1000000;
                _this_1.PagesChanged = _this_1.PagesChanged.bind(_this_1);
                return _this_1;
            }
            Object.defineProperty(Layout.prototype, "IsAuthentication", {
                get: function () { return false; },
                enumerable: true,
                configurable: true
            });
            Layout.prototype.OnPageChanging = function (e) { };
            Layout.prototype.OnPageChanged = function (e) {
                var page = e._new;
                this.silentSelectPage(e._old, page);
                page && page.OnSelected.Invoke(page, [page]);
            };
            Layout.__fields__ = function () { return [this.DPSelectedPage, this.DPCurrentModal = corelib_1.bind.DObject.CreateField("CurrentModal", Modal, null, this.prototype._onCurrentModalChanged)]; };
            Layout.prototype.Logout = function () {
            };
            Layout.prototype.silentSelectPage = function (oldPage, page) {
                this.Foot.Pop(oldPage);
                this.showPage(page);
                this.Foot.Push(page);
            };
            Layout.prototype.Open = function (page) {
                this.SelectedPage = page;
            };
            Layout.prototype.PagesChanged = function (e) {
                if (e.event == corelib_1.collection.CollectionEvent.Added) {
                    this.Foot.Register(e.newItem);
                }
            };
            Layout.prototype.OpenPage = function (pageNme) {
                var ps = this.Pages.AsList();
                for (var i = 0, l = ps.length; i < l; i++) {
                    var p = ps[i];
                    if (p.Name !== pageNme)
                        continue;
                    this.SelectedPage = p;
                    return true;
                }
                return false;
            };
            Layout.prototype.AddPage = function (child) {
                if (child == null)
                    return;
                this.Pages.Add(child);
            };
            Layout.prototype.SelectNaxtPage = function () {
                var t = this.Pages;
                var i = t.IndexOf(this.SelectedPage);
                var p = t.Get(i + 1);
                if (p)
                    this.SelectedPage = p;
            };
            Layout.prototype.SelectPrevPage = function () {
                var t = this.Pages;
                var i = t.IndexOf(this.SelectedPage);
                var p = t.Get(i - 1);
                if (p)
                    this.SelectedPage = p;
            };
            Layout.prototype.Update = function () {
                var s = this.SelectedPage;
                if (s)
                    s.Update();
            };
            Layout.prototype.OnKeyDown = function (e) {
                var s = this.SelectedPage;
                if (s)
                    s.OnKeyDown(e);
            };
            Layout.prototype.OnKeyCombined = function (e, v) {
                var s = this.SelectedPage;
                if (s)
                    return s.OnKeyCombined(e, v);
            };
            Layout.prototype.OnPrint = function () {
                var s = this.SelectedPage;
                if (s)
                    s.OnPrint();
            };
            Layout.prototype.OnDeepSearche = function () {
                var s = this.SelectedPage;
                if (s)
                    s.OnDeepSearche();
            };
            Layout.prototype.OnContextMenu = function (e) {
                var cp = this.SelectedPage;
                if (cp)
                    cp.OnContextMenu(e);
            };
            Layout.prototype.handleEvent = function (e) { };
            Layout.prototype.Show = function () {
                if (_app != null)
                    document.body.removeChild(_app.View);
                _app = this;
                Desktop.Current.Show(this);
            };
            Layout.prototype.initialize = function () {
                this.Pages.Listen = this.opcd;
            };
            Layout.getView = function () {
                var app = document.createElement('app');
                app.id = 'app-' + Date.now();
                return app;
            };
            Layout.prototype.searchActioned = function (s, o, n) {
                this.SelectedPage.OnSearche(o, n);
            };
            Layout.prototype.OnAttached = function () {
            };
            Layout.prototype.OnDetached = function () { };
            Layout.prototype.OpenModal = function (m) {
                this.CurrentModal = m;
            };
            Layout.prototype.CloseModal = function (m) {
                var im = this.openedModal.indexOf(m);
                if (im != -1)
                    this.openedModal.splice(im, 1);
                this.CurrentModal = this.openedModal[this.openedModal.length - 1];
            };
            Layout.prototype._onCurrentModalChanged = function (e) {
                var m = e._old;
                if (m) {
                    m.disapplyStyle('in');
                    if (m.View.parentNode)
                        corelib_1.helper.TryCatch(m.View, Element.prototype.remove);
                    m.Parent = null;
                    m.Visible = false;
                }
                m = e._new;
                if (m) {
                    if (this.openedModal.indexOf(m) == -1)
                        this.openedModal.push(m);
                    if (m.View.parentNode)
                        corelib_1.helper.TryCatch(m.View, Element.prototype.remove);
                    this._view.appendChild(m.View);
                    m.applyStyle('in');
                    this.applyStyle('modal-open');
                    m.View.style.display = 'block';
                    m.View.style.zIndex = this.zIndex++ + "";
                    m.Visible = true;
                    m.Parent = this;
                }
                else
                    this.disapplyStyle('modal-open');
            };
            Layout.prototype.OpenContextMenu = function (cm, e) {
                var _this_1 = this;
                if (!this._contextMenuLayer) {
                    this._contextMenuLayer = new UI.ContentControl().applyStyle('context-menu-layer');
                    this._contextMenuLayer.Parent = this;
                    this._contextMenuLayer.addEventListener('click', function (s, e, p) {
                        var src = e.target || e.srcElement;
                        if (src === _this_1._contextMenuLayer.View) {
                            _this_1.CloseContextMenu(void 0);
                        }
                    }, void 0, this);
                    this._view.appendChild(this._contextMenuLayer.View);
                }
                else if (this._currentContextMenu && !this.CloseContextMenu())
                    return false;
                this._contextMenuLayer.disapplyStyle('hidden');
                this._contextMenuLayer.View.style.zIndex = "" + (++this._contextMenuZIndex);
                this._contextMenuLayer.Content = cm.getView();
                this._currentContextMenu = cm;
                this._currentContextMenuEventArgs = e;
                cm.OnAttached(e);
            };
            Layout.prototype.CloseContextMenu = function (r) {
                if (this._currentContextMenuEventArgs) {
                    this._currentContextMenuEventArgs.cancel = false;
                    if (this._currentContextMenu && this._currentContextMenu.OnClosed(r, this._currentContextMenuEventArgs))
                        return false;
                }
                this._contextMenuLayer.Content = void 0;
                this._currentContextMenu = void 0;
                this._currentContextMenuEventArgs = void 0;
                this._contextMenuLayer.applyStyle('hidden');
                return true;
            };
            Layout.DPSelectedPage = corelib_1.bind.DObject.CreateField("SelectedPage", Object, null, function (e) { return e.__this.OnPageChanged(e); }, function (e) { return e.__this.OnPageChanging(e); });
            return Layout;
        }(Control));
        UI.Layout = Layout;
        var App = (function (_super) {
            __extends(App, _super);
            function App(name) {
                var _this_1 = _super.call(this, App.getView()) || this;
                _this_1.name = name;
                _this_1.intern = true;
                return _this_1;
            }
            Object.defineProperty(App.prototype, "Title", {
                get: function () { return this.get(App.DPTitle); },
                set: function (v) { this.set(App.DPTitle, v); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(App.prototype, "Badge", {
                get: function () { return this.get(App.DPBadge); },
                set: function (v) {
                    this.set(App.DPBadge, v);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(App, "CurrentApp", {
                get: function () { return _app; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(App.prototype, "Name", {
                get: function () { return this.name; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(App.prototype, "SearchBox", {
                get: function () {
                    var _this_1 = this;
                    if (!this._search) {
                        this._search = new ActionText();
                        this._search.OnInitialized = function (n) {
                            n.Box.applyStyle("inputPage");
                            n.applyStyle("actionPage");
                            n.Box.View.style.borderWidth = '0';
                            n.Box.View.style.boxShadow = '0 0 transparent';
                            n.OnAction.Add(_this_1.searchActioned.bind(_this_1), 'ts');
                            n.AutoAction = UI.SearchActionMode.Instantany;
                            n.addEventListener('focusout', function (s, e, p) {
                                var cp = p._this.SelectedPage;
                                var hs = cp && cp.HasSearch;
                                if (hs == UI.SearchActionMode.Instantany)
                                    p.wrapper.Content = p._this.slogant;
                            }, { _this: _this_1, wrapper: _this_1.AppTitle });
                        };
                    }
                    return this._search;
                },
                enumerable: true,
                configurable: true
            });
            App.prototype.createTitle = function (t) {
                var _this_1 = this;
                var div = new ContentControl();
                div.applyStyle('page_title');
                var c = new Dom('div');
                div.Content = c;
                div.addEventListener('click', function (s, e, p) {
                    var cp = _this_1.SelectedPage;
                    var hs = cp && cp.HasSearch;
                    if (hs !== SearchActionMode.None && hs != null) {
                        var isLabel = p.wrapper.Content == p._this.slogant;
                        if (isLabel) {
                            p.wrapper.Content = p._this.SearchBox;
                            p._this.SearchBox.Focus();
                        }
                        else
                            p.wrapper.Content = p._this.slogant;
                    }
                    else {
                        if (!isLabel)
                            p.wrapper.Content = p._this.slogant;
                    }
                }, { _this: this, wrapper: div });
                c.View.textContent = t;
                this.slogant = c;
                return div;
            };
            App.prototype.showPage = function (page) {
                this.PageBody.Content = page;
            };
            App.prototype.OnPageChanged = function (e) {
                document.title = this.Title + "(Version D'Essaie)";
                this.slogant.View.textContent = e._new.GetValue(e._new.getDPTitle());
                _super.prototype.OnPageChanged.call(this, e);
            };
            App.prototype.initialize = function () {
                var _this_1 = this;
                _super.prototype.initialize.call(this);
                this.applyStyle('app');
                this.Head = new Head(true).applyStyle('top-navbar');
                this.AppBody = new DivControl('div').applyStyle('app-body');
                this.Foot = new ServiceNavBar(this, false).applyStyle('bottom-navbar');
                this.AppTitle = this.createTitle(this.Title).applyStyle('app-title');
                this.PageBody = new ContentControl().applyStyle('app-page');
                this.AppBody.Add(this.AppTitle).Add(this.PageBody);
                intern = true;
                this.Add(this.Head).Add(this.AppBody).Add(this.Foot);
                intern = false;
                this.Foot.applyStyle('appFoot', 'app-foot');
                this.PageBody.disapplyStyle('container');
                this.Head.OnInitialized = function (h) { return h.Header.OnInitialized = function (h) { return h.Title = _this_1.Name; }; };
                this.Head.Menu.Items.Source = this.Pages;
                this.Head.OnPropertyChanged(Head.DPSelectedItem, function (v, e) { _this_1.SelectedPage = (e._new || e._old); });
                if (corelib_1.basic.Settings.get("AppTitleHidden") == true)
                    this.AppTitle.applyStyle('hideTitle');
                else
                    this.AppTitle.disapplyStyle('hideTitle');
                init.loadCss();
                window['App'] = this;
            };
            App.prototype.IsTopNavBarhidden = function () {
                var t = new URL(context_2.context.GetPath('../assets/style/bundle.css')).href;
                for (var i in document.styleSheets) {
                    var s = document.styleSheets[i];
                    if (s.href && s.href === t) {
                        var last;
                        for (var k = 0; k < s.cssRules.length; k++) {
                            var r = s.cssRules[k];
                            if (r.selectorText === ".app" && r.style.getPropertyValue("--top-navbar-height")) {
                                last = r;
                            }
                        }
                        if (last)
                            return parseInt(last.style.getPropertyValue("--top-navbar-height")) < 5;
                    }
                }
                return void 0;
            };
            App.prototype.HideTopNavBar = function (v) {
                var t = new URL(context_2.context.GetPath('../assets/style/bundle.css')).href;
                for (var i in document.styleSheets) {
                    var s = document.styleSheets[i];
                    if (s.href && s.href === t) {
                        var last;
                        for (var k = 0; k < s.cssRules.length; k++) {
                            var r = s.cssRules[k];
                            if (r.selectorText === ".app" && r.style.getPropertyValue("--top-navbar-height")) {
                                last = r;
                            }
                        }
                        if (last) {
                            if (v) {
                                last.style.setProperty("--top-navbar-height", "0px");
                                this.Head.Visible = false;
                            }
                            else {
                                last.style.setProperty("--top-navbar-height", "50px");
                                this.Head.Visible = true;
                            }
                            return true;
                        }
                    }
                }
                return false;
            };
            App.prototype.ToggleTitle = function () {
                if (this.AppTitle.View.classList.contains('hideTitle')) {
                    corelib_1.basic.Settings.set("AppTitleHidden", false);
                    this.AppTitle.disapplyStyle('hideTitle');
                }
                else {
                    corelib_1.basic.Settings.set("AppTitleHidden", true);
                    this.AppTitle.applyStyle('hideTitle');
                }
            };
            App.prototype.IsTitleBringged = function () { return this.AppTitle.View.classList.contains('hideTitle'); };
            App.prototype.Check = function (page) {
                return ((page instanceof JControl) || (page instanceof QBar) || (page instanceof Head) || (page instanceof Foot) || (page instanceof ContentControl));
            };
            App.prototype.Add = function (child) {
                if (child instanceof Page)
                    this.AddPage(child);
                else
                    JControl.prototype.Add.call(this, child);
                return this;
            };
            App.__fields__ = function () { return [this.DPTitle, this.DPBadge]; };
            App.DPTitle = App.CreateField('Title', String, 'App');
            App.DPBadge = App.CreateField('Badge', String, null);
            App.Apps = new corelib_1.collection.List(App);
            return App;
        }(Layout));
        UI.App = App;
        var AuthApp = (function (_super) {
            __extends(AuthApp, _super);
            function AuthApp(key, b) {
                var _this_1 = _super.call(this, 'Authentication') || this;
                if (authApp || !(b instanceof corelib_1.bind.EventListener))
                    throw '';
                b.On = isLogged.bind(_this_1);
                _this_1.OnStatStatChanged = new corelib_1.bind.EventListener(key);
                return _this_1;
            }
            Object.defineProperty(AuthApp.prototype, "IsAuthentication", {
                get: function () { return true; },
                enumerable: true,
                configurable: true
            });
            return AuthApp;
        }(App));
        UI.AuthApp = AuthApp;
        var NotifyType;
        (function (NotifyType) {
            NotifyType[NotifyType["Focuse"] = 0] = "Focuse";
            NotifyType[NotifyType["UnFocus"] = 1] = "UnFocus";
        })(NotifyType = UI.NotifyType || (UI.NotifyType = {}));
        var ServiceType;
        (function (ServiceType) {
            ServiceType[ServiceType["Main"] = 0] = "Main";
            ServiceType[ServiceType["Stackable"] = 1] = "Stackable";
            ServiceType[ServiceType["Instantany"] = 3] = "Instantany";
        })(ServiceType = UI.ServiceType || (UI.ServiceType = {}));
        var _dsk = new UI.Desktop();
        var FunctionGroup = (function (_super) {
            __extends(FunctionGroup, _super);
            function FunctionGroup() {
                var _this_1 = _super.call(this) || this;
                _this_1._ = [];
                _this_1.map = {};
                return _this_1;
            }
            FunctionGroup.prototype.Push = function (f, name) {
                this._.push(f);
                if (name !== undefined) {
                    this.map[name] = f;
                }
            };
            FunctionGroup.prototype.Remove = function (name) {
                var t = this.map[name];
                if (t !== undefined) {
                    var c = this._.indexOf(t);
                    if (c !== -1)
                        this._.splice(c, 1);
                    delete this.map[name];
                }
                return t;
            };
            FunctionGroup.prototype.Create = function () {
                var FunctionGroup = (function (_super) {
                    __extends(FunctionGroup, _super);
                    function FunctionGroup(context, args) {
                        var _this_1 = _super.call(this) || this;
                        for (var i = 0; i < FunctionGroup._.length; i++) {
                            var t = FunctionGroup._[i];
                            t.apply(context, args);
                        }
                        return _this_1;
                    }
                    FunctionGroup.Push = function (f, name) {
                        this._.push(f);
                        if (name !== undefined) {
                            this.map[name] = f;
                        }
                    };
                    FunctionGroup.Remove = function (name) {
                        var t = this.map[name];
                        if (t !== undefined) {
                            var c = this._.indexOf(t);
                            if (c !== -1)
                                this._.splice(c, 1);
                            delete this.map[name];
                        }
                        return t;
                    };
                    FunctionGroup._ = [];
                    FunctionGroup.map = {};
                    return FunctionGroup;
                }(Function));
                return FunctionGroup;
            };
            return FunctionGroup;
        }(Function));
        UI.FunctionGroup = FunctionGroup;
        var Modal = (function (_super) {
            __extends(Modal, _super);
            function Modal() {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1._fm = false;
                _this_1.events = [];
                _this_1._onClick = new corelib_1.bind.EventListener('test');
                return _this_1;
            }
            Object.defineProperty(Modal.prototype, "Content", {
                set: function (v) {
                    this._body.Content = v;
                },
                enumerable: true,
                configurable: true
            });
            Modal.prototype.getSearchBox = function (d) {
                if (!this._searchBox) {
                    var group_cnt = new UI.Div().applyStyle('pull-left', 'flat');
                    var btn_filter = new Glyph(Glyphs.filter, false, 'Search');
                    var div = group_cnt;
                    div.Add(btn_filter);
                    div.Add(btn_filter);
                    this.abonment = new UI.ProxyAutoCompleteBox(new UI.Input(document.createElement('input')), d);
                    this.abonment.Box.Placeholder = 'Search ...';
                    div.Add(this.abonment.Box);
                    div.Enable = true;
                    this._searchBox = div;
                    this.abonment.OnValueChanged(this, this.callBack);
                    return div;
                }
                this.abonment.DataSource = d;
                return this._searchBox;
            };
            Modal.prototype.callBack = function (b, old, _new) {
                if (this.onSearch)
                    this.onSearch(this, b, old, _new);
            };
            Modal.prototype.OnSearch = function (i) {
                this.onSearch = i;
            };
            Modal.prototype.OkTitle = function (v) {
                return this.createBtn(MessageResult.ok, v);
            };
            Modal.prototype.AbortTitle = function (v) {
                return this.createBtn(MessageResult.abort, v);
            };
            Modal.prototype.Canceltitle = function (v) {
                return this.createBtn(MessageResult.cancel, v);
            };
            Modal.prototype.Title = function (v) {
                this._ts = v;
                if (this._dtitle)
                    this._dtitle.View.innerHTML = v;
                this.asSearch = false;
                return this;
            };
            Modal.prototype.Search = function (d) {
                if (this._dtitle) {
                    this._dtitle.Clear();
                    this._dtitle.View.innerHTML = '';
                    this._dtitle.Add(this.getSearchBox(d));
                }
                else
                    this.getSearchBox(d);
                this.asSearch = true;
            };
            Modal.prototype.SetDialog = function (title, content) {
                var t;
                if (!this.IsInit)
                    this.OnInitialized = function (n) {
                        n._body.Clear();
                        n.Title(title);
                        n._body.Content = content;
                    };
                else {
                    this._body.Clear();
                    this.Title(title);
                    this._body.Add(content);
                }
            };
            Modal.NextZIndex = function () { return ++this.zIndex; };
            Object.defineProperty(Modal.prototype, "IsOpen", {
                get: function () { return document.body.contains(this.View); },
                enumerable: true,
                configurable: true
            });
            Modal.prototype.Open = function () {
                Desktop.Current.CurrentApp.OpenModal(this);
                this.OnInitialized = function (n) {
                    var c = document.activeElement;
                    c && c.blur && c.blur();
                    corelib_1.thread.Dispatcher.call(n.focuser, function () {
                        corelib_1.thread.Dispatcher.OnIdle(this, this.reFocuseOn, true);
                    });
                };
            };
            Modal.prototype.silentClose = function () {
                (this.targetApp || Desktop.Current.CurrentApp).CloseModal(this);
            };
            Modal.prototype.Close = function (msg) {
                var e = new MessageEventArgs(this, msg, MessageResult[msg]);
                var r = this._onClick.PInvok('test', [e], this);
                if (!e.stayOpen)
                    this.silentClose();
            };
            Modal.prototype.initialize = function () {
                this.applyStyle('modal', 'fade');
                this.View.setAttribute('role', 'dialog');
                this._container = new Dom('div').applyStyle('modal-dialog');
                this._container1 = new Dom('div').applyStyle('modal-content');
                this._head = new Dom('div').applyStyle('modal-header');
                this._body = new ContentControl().applyStyle('modal-body');
                this._foot = new Dom('div').applyStyle('modal-footer');
                this.createHeader(this._head);
                this.createFoot(this._foot);
                this._container.Add(this._container1.AddRange([this._head, this._body, this._foot]));
                _super.prototype.Add.call(this, this._container);
                this.drgmngr = new DragManager(this._head, this._container1);
                this._container1.View.style.top = 0 + px;
                this.focuser = new corelib_1.basic.focuser(this._view, false);
            };
            Modal.prototype.createHeader = function (head) {
                var _this_1 = this;
                var b = new Dom('div')
                    .applyStyle('close').setAttribute('data-dismiss', 'modal').setAttribute('aria-label', 'close');
                var sp = new Dom('span').setAttribute('aria-hidden', 'true');
                sp.View.innerHTML = '&times;';
                var h4 = new Dom('h4').applyStyle('modal-title');
                if (this.asSearch)
                    h4.Add(this._searchBox);
                else
                    h4.View.innerHTML = this._ts == null ? 'Dialog' : this._ts;
                head.AddRange([b.Add(sp), h4]);
                b.View.onclick = function (e) { return _this_1.Close(MessageResult.Exit); };
                this._dtitle = h4;
            };
            Modal.prototype.createFoot = function (foot) {
                this.createBtn(MessageResult.ok);
                this.createBtn(MessageResult.cancel);
            };
            Modal.prototype._setText = function (role, text) {
                var b1 = this.events[role];
                b1.btn.Visible = text !== null && text !== "";
                b1.btn.Text = text === undefined ? MessageResult[role].toUpperCase() : text == null ? "" : text;
            };
            Modal.prototype.SetVisible = function (role, visible) {
                var _this_1 = this;
                var b1 = this.events[role];
                if (b1)
                    b1.btn.Visible = visible;
                else {
                    this.OnInitialized = function (n) {
                        var b1 = _this_1.events[role];
                        if (b1)
                            b1.btn.Visible = visible;
                        else {
                            _this_1.createBtn(role);
                            var b1 = _this_1.events[role];
                            b1.btn.Visible = visible;
                        }
                    };
                }
            };
            Modal.prototype.createBtn = function (result, title) {
                var b1 = this.events[result];
                if ((title !== null && title !== "") || b1)
                    if (this.IsInit)
                        if (b1)
                            this._setText(result, title);
                        else
                            this._initBtn(title, result);
                    else
                        this.OnInitialized = function (n) { return n._initBtn(title, result); };
                return this;
            };
            Modal.prototype._initBtn = function (title, result) {
                var b1 = this.events[result];
                if (!b1)
                    if (title === null || title === "")
                        return;
                    else {
                        this.events[result] = b1 = {
                            btn: new Button().applyStyle(Modal.casses[result]),
                            event: null
                        };
                        b1.event = b1.btn.addEventListener('click', this._btnClicked, result, this);
                        this._foot.Add(b1.btn);
                    }
                this._setText(result, title);
            };
            Modal.prototype._btnClicked = function (sender, e, t) {
                return this.Close(t);
            };
            Modal.prototype.Add = function (child) {
                if (!this._body)
                    this.initialize();
                this._body.Add(child);
                return this;
            };
            Modal.prototype.Remove = function (child) {
                return this._body.Remove(child);
            };
            Modal.prototype.Insert = function (child, i) {
                this._body.Insert(child, i);
                return this;
            };
            Modal.prototype.Dispose = function () {
                this.silentClose();
                _super.prototype.Dispose.call(this);
            };
            Object.defineProperty(Modal.prototype, "OnClosed", {
                get: function () { return this._onClick; },
                enumerable: true,
                configurable: true
            });
            Modal.prototype.OnKeyDown = function (e) {
                var c = this._body.Content;
                if (c && c['OnKeyDown'] && c['OnKeyDown'](e))
                    return true;
                if (e.keyCode == 27)
                    this.Close(MessageResult.cancel);
                else if (e.keyCode == 13) {
                    var t = this.focuser.focuse(false, e.shiftKey);
                    if (t == true) {
                        for (var i = 1; i < 4; i++) {
                            var x_1 = this.events[i];
                            if (x_1 && x_1.btn.View === document.activeElement)
                                return false;
                        }
                        var x = this.events[1] || this.events[2] || this.events[3];
                        x.btn.Focus();
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        return true;
                    }
                    else
                        return t;
                }
            };
            Modal.prototype.OnKeyCombined = function (e, v) {
                var s = this._body.Content;
                if (s)
                    return s.OnKeyCombined(e, v);
            };
            Modal.prototype.Clear = function () {
                this.Content = null;
                this._body.Clear();
            };
            Modal._ShowDialog = function (title, msg, callback, ok, cancel) {
                if (this.closedMessages.length == 0) {
                    var message = new Modal();
                }
                else {
                    message = this.closedMessages.pop();
                }
                message.OnInitialized = function (m) {
                    message.Title(title == null ? 'Confirm' : title);
                    message.Clear();
                    if (typeof msg === 'string')
                        message._body.View.innerHTML = '<h5>' + msg + '</h5>';
                    else if (msg instanceof HTMLElement)
                        message._body.View.appendChild(msg);
                    else
                        message._body.Content = msg;
                    message.OkTitle(ok == null ? 'Ok' : ok);
                    message.Canceltitle(cancel === undefined ? 'Cancel' : cancel);
                    message.OnClosed.Add(function (s) {
                        message.OnClosed.Remove(0);
                        if (callback)
                            callback(s.msg, s.Modal);
                        var c = Modal.closedMessages.indexOf(message);
                        if (c == -1)
                            Modal.closedMessages.push(message);
                    }, 0);
                };
                message.Open();
                return message.Close.bind(message);
            };
            Modal.ShowDialog = function (title, msg, callback, ok, cancel, abort) {
                if (this.closedMessages.length == 0) {
                    var message = new Modal();
                }
                else {
                    message = this.closedMessages.pop();
                }
                message.OnInitialized = function (m) {
                    message.Title(title == null ? 'Confirm' : title);
                    message.Clear();
                    if (typeof msg === 'string')
                        message._body.View.innerHTML = '<h5>' + msg + '</h5>';
                    else if (msg instanceof HTMLElement)
                        message._body.View.appendChild(msg);
                    else
                        message._body.Content = msg;
                    message.OkTitle(ok == null ? 'Ok' : ok);
                    message.Canceltitle(cancel === undefined ? 'Cancel' : cancel);
                    message.AbortTitle(abort);
                    message.OnClosed.Add(function (s) {
                        if (callback)
                            callback(s);
                        if (s.stayOpen)
                            return;
                        message.OnClosed.Remove(0);
                        var c = Modal.closedMessages.indexOf(message);
                        if (c == -1)
                            Modal.closedMessages.push(message);
                    }, 0);
                };
                message.Open();
                return message;
            };
            Modal.prototype.setStyle = function (name, value) {
                this._container.View.style[name] = value;
                return this;
            };
            Modal.prototype.setWidth = function (value) {
                this._container.View.style.width = value;
                return this;
            };
            Modal.prototype.setHeight = function (value) {
                this._container.View.style.height = value;
                return this;
            };
            Object.defineProperty(Modal.prototype, "IsMaterial", {
                set: function (v) {
                    if (v)
                        this.applyStyle('material');
                    else
                        this.disapplyStyle('material');
                },
                enumerable: true,
                configurable: true
            });
            Modal.prototype.OnContextMenu = function (e) {
                var c = this.Content;
                if (c)
                    return c.OnContextMenu(e);
            };
            Modal.zIndex = 10000;
            Modal.casses = ['', 'btn-primary', 'btn-danger', 'btn-warning'];
            Modal.closedMessages = [];
            return Modal;
        }(JControl));
        UI.Modal = Modal;
        var MessageResult;
        (function (MessageResult) {
            MessageResult[MessageResult["Exit"] = 0] = "Exit";
            MessageResult[MessageResult["ok"] = 1] = "ok";
            MessageResult[MessageResult["cancel"] = 2] = "cancel";
            MessageResult[MessageResult["abort"] = 3] = "abort";
        })(MessageResult = UI.MessageResult || (UI.MessageResult = {}));
        var MessageEventArgs = (function () {
            function MessageEventArgs(Modal, Result, msg) {
                this.Modal = Modal;
                this.Result = Result;
                this.msg = msg;
            }
            Object.defineProperty(MessageEventArgs.prototype, "stayOpen", {
                get: function () {
                    return this._stayOpen;
                },
                enumerable: true,
                configurable: true
            });
            MessageEventArgs.prototype.StayOpen = function () {
                this._stayOpen = true;
            };
            MessageEventArgs.prototype.Close = function () {
                this._stayOpen = true;
            };
            return MessageEventArgs;
        }());
        UI.MessageEventArgs = MessageEventArgs;
        var Image = (function (_super) {
            __extends(Image, _super);
            function Image() {
                return _super.call(this, document.createElement('img')) || this;
            }
            Object.defineProperty(Image.prototype, "Source", {
                get: function () { return this._view.src; },
                set: function (v) { this._view.src = v; },
                enumerable: true,
                configurable: true
            });
            Image.prototype.initialize = function () {
            };
            return Image;
        }(JControl));
        UI.Image = Image;
        var CarouselItem = (function (_super) {
            __extends(CarouselItem, _super);
            function CarouselItem(url, caption) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.OnInitialized = function (x) {
                    x._image.Source = url;
                    if (caption instanceof HTMLElement)
                        x._caption.View.appendChild(caption);
                    else if (typeof caption === 'string')
                        x._caption.View.innerText = caption;
                    else
                        throw '';
                };
                return _this_1;
            }
            CarouselItem.prototype.initialize = function () {
                this.applyStyle('item');
                this._image = new Image();
                this._caption = new Div().applyStyle('carousel-caption');
                this.AddRange([this._image, this._caption]);
            };
            Object.defineProperty(CarouselItem.prototype, "Active", {
                set: function (v) {
                    if (v)
                        this.applyStyle('active');
                    else
                        this.disapplyStyle('active');
                },
                enumerable: true,
                configurable: true
            });
            return CarouselItem;
        }(JControl));
        UI.CarouselItem = CarouselItem;
        var Carousel = (function (_super) {
            __extends(Carousel, _super);
            function Carousel() {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.opcd = { Owner: _this_1, Invoke: _this_1.ItemsChanged };
                _this_1.fromInit = false;
                _this_1.OnInitialized = function (x) { return x.ItemsChanged(corelib_1.utils.ListEventArgs.ResetEvent); };
                return _this_1;
            }
            Carousel.prototype.initialize = function () {
                this.applyStyle('carousel', 'slide');
                this.View.setAttribute('data-ride', 'carousel');
                this._indecators = new Dom('ol').applyStyle('carousel-indicators');
                this._inner = new Div().applyStyle('carousel-inner');
                this._items = new corelib_1.collection.List(CarouselItem);
                this._items.Listen = this.opcd;
                this.leftButton = this.createButton(true);
                this.rightButton = this.createButton(false);
                this.fromInit = true;
                _super.prototype.Add.call(this, this._indecators);
                _super.prototype.Add.call(this, this._inner);
                _super.prototype.Add.call(this, this.leftButton);
                _super.prototype.Add.call(this, this.rightButton);
                this.fromInit = false;
            };
            Carousel.prototype.createButton = function (isLeft) {
                var fl = isLeft === true ? 'left' : 'right';
                var i = new Dom('a').applyStyle(fl, 'carousel-control');
                var v = i.View;
                v.setAttribute('href', '#' + this.Id);
                v.setAttribute('role', 'button');
                v.setAttribute('data-slide', isLeft === true ? 'prev' : 'next');
                var x = document.createElement('span');
                x.classList.add('glyphicon', 'glyphicon-chevron-' + fl);
                v.appendChild(x);
                return i;
            };
            Carousel.prototype.createIndecator = function (i) {
                var d = new Dom('li');
                d.View.setAttribute('data-target', '#' + this.Id);
                d.View.setAttribute('data-slide-to', i + '');
                return d;
            };
            Carousel.prototype.ItemsChanged = function (e) {
                if (this.IsInit) {
                    var m = this._inner;
                    var n = this._indecators;
                    var t = e.newItem;
                    var ind = void 0, rit = void 0;
                    switch (e.event) {
                        case corelib_1.collection.CollectionEvent.Added:
                            ind = this.createIndecator(e.startIndex);
                            m.Add(t);
                            n.Add(ind);
                            t.Indicator = ind;
                        case corelib_1.collection.CollectionEvent.Cleared:
                            this.Clear();
                            return;
                        case corelib_1.collection.CollectionEvent.Removed:
                            rit = e.oldItem;
                            n.Remove(rit.Indicator);
                            m.Remove(rit);
                            break;
                        case corelib_1.collection.CollectionEvent.Replace:
                            rit = e.oldItem;
                            n.Remove(rit.Indicator);
                            m.Remove(rit);
                            ind = this.createIndecator(e.startIndex);
                            m.Add(t);
                            n.Add(ind);
                            t.Indicator = ind;
                            break;
                        case corelib_1.collection.CollectionEvent.Reset:
                            this.Clear();
                            for (var i = 0, l = this._items.Count; i < l; i++) {
                                var c = this._items.Get(0);
                                var ind_1 = c.Indicator || this.createIndecator(e.startIndex);
                                m.Add(c);
                                n.Add(ind_1);
                                c.Indicator = ind_1;
                            }
                            break;
                    }
                    this.selectNext();
                }
            };
            Carousel.prototype.selectNext = function () {
                var t = this._items;
                for (var i = 0, l = t.Count; i < l; i++) {
                    if (t.Get(i).View.classList.contains('active'))
                        return;
                }
                if (l > 0)
                    t.Get(0).Active = true;
            };
            Carousel.prototype.Clear = function () {
                this._indecators.Clear();
                this._inner.Clear();
            };
            Carousel.prototype.Check = function (child) { return this.fromInit || child instanceof CarouselItem; };
            Carousel.prototype.Add = function (child) {
                if (this.fromInit)
                    _super.prototype.Add.call(this, child);
                else
                    this._items.Add(child);
                return this;
            };
            Carousel.prototype.Remove = function (child) {
                this._items.Remove(child);
                return true;
            };
            Carousel.prototype.RemoveAt = function (i) {
                this._items.RemoveAt(i);
                return true;
            };
            return Carousel;
        }(Control));
        UI.Carousel = Carousel;
        var PaginationSurf = (function (_super) {
            __extends(PaginationSurf, _super);
            function PaginationSurf(isNext) {
                var _this_1 = _super.call(this, document.createElement('li')) || this;
                _this_1.isNext = isNext;
                var t;
                return _this_1;
            }
            PaginationSurf.prototype.initialize = function () {
                var a = new Anchore();
                var s = new Dom('span');
                var t = new Dom('a');
                this.anchore = a;
                this.span = s;
                this.text = t;
                if (this.isNext != null) {
                    a.View.setAttribute('aria-label', this.isNext ? 'Next' : 'Previous');
                    s.View.setAttribute('aria-hidden', this.isNext ? 'true' : 'false');
                    if (this.isNext)
                        s.View.innerHTML = '»';
                    else
                        s.View.innerHTML = '«';
                }
                this.View.addEventListener('click', this);
                this.Add(a.AddRange([s, t]));
            };
            Object.defineProperty(PaginationSurf.prototype, "Icon", {
                set: function (v) {
                    this.span.View.innerHTML = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PaginationSurf.prototype, "Title", {
                set: function (v) {
                    this.text.View.innerHTML = v;
                },
                enumerable: true,
                configurable: true
            });
            PaginationSurf.prototype.handleEvent = function (e) {
                if (this.OnClick)
                    this.OnClick(this);
            };
            return PaginationSurf;
        }(JControl));
        UI.PaginationSurf = PaginationSurf;
        var BiPagination = (function (_super) {
            __extends(BiPagination, _super);
            function BiPagination() {
                var _this_1 = _super.call(this, document.createElement('nav')) || this;
                _this_1.isc = false;
                return _this_1;
            }
            BiPagination.__fields__ = function () {
                return [BiPagination.DPMax, BiPagination.DPIndex];
            };
            BiPagination.prototype.initialize = function () {
                var _this_1 = this;
                this.list = new Dom('ul').applyStyle('pager');
                this.prev = new PaginationSurf(false).applyStyle('previous');
                this.next = new PaginationSurf(true).applyStyle('next');
                var li = new Dom('li');
                this.actionText = new Textbox().applyStyle('text-center', 'borderless');
                this.actionText.View.addEventListener('change', this);
                this.actionText.View.style.width = '80px';
                this.actionText.View.style.border = '0px';
                this.actionText.Text = '0';
                li.Add(new Anchore(this.actionText));
                this.Add(this.list.AddRange([this.prev, li, this.next]));
                this.prev.Icon = '<';
                this.prev.Title = '<<<<';
                this.next.Icon = '>';
                this.next.Title = '>>>>';
                this.next.OnClick = function () { _this_1.Index++; };
                this.prev.OnClick = function () { _this_1.Index--; };
            };
            BiPagination.prototype.handleEvent = function (e) {
                if (this.isc)
                    return;
                var t;
                this.Index = parseFloat(this.actionText.Text);
            };
            BiPagination.ctor = function () {
                this.DPMax = BiPagination.CreateField('Max', Number, Infinity, function (e) {
                    var n = e._new;
                    if (e.__this.Index > n)
                        e.__this.Index = n;
                }, function (e) {
                    if (e._new < 0)
                        e._new = 0;
                });
                this.DPIndex = BiPagination.CreateField('Index', Number, 0, this.prototype._onIndexChanged, function (e) {
                    if (e._new < 0)
                        e._new = 0;
                    else if (isNaN(e._new))
                        e._new = isNaN(e._old) ? 0 : e._old;
                    else if (e._new > e.__this.Max)
                        e._new = e.__this.Max;
                });
            };
            BiPagination.prototype._onIndexChanged = function (e) {
                this.isc = true;
                this.actionText.Text = e._new + '/' + this.Max;
                this.isc = false;
            };
            return BiPagination;
        }(JControl));
        UI.BiPagination = BiPagination;
        var Pagination = (function (_super) {
            __extends(Pagination, _super);
            function Pagination() {
                var _this_1 = _super.call(this, document.createElement('ul')) || this;
                _this_1.items = new corelib_1.collection.List(PaginationSurf);
                _this_1.opcd = { Owner: _this_1, Invoke: _this_1.OnItemsChanged };
                return _this_1;
            }
            Object.defineProperty(Pagination.prototype, "SelectedRange", {
                get: function () {
                    return this.get(Pagination.DPRange);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pagination.prototype, "Count", {
                get: function () {
                    return this.get(Pagination.DPCount);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pagination.prototype, "StartIndex", {
                get: function () {
                    return this.get(Pagination.DPStartIndex);
                },
                set: function (v) {
                    this.set(Pagination.DPStartIndex, v);
                },
                enumerable: true,
                configurable: true
            });
            Pagination.prototype.OnCountChanged = function (o, n) {
                var t;
                for (var i = o; i < n; i++) {
                    this.items.Add(t = new PaginationSurf());
                    t.OnClick = this.OnClick;
                }
                for (var i = n; i < o; i++) {
                    t = this.items.Get(i - 1);
                    var j = this.items.RemoveAt(i - 1);
                    t.OnClick = null;
                }
                this.StartIndex = n * this.SelectedRange;
            };
            Pagination.prototype.OnRangeChanged = function (o, n) {
                this.StartIndex = n * this.Count;
            };
            Pagination.prototype.OnStartIndexChanged = function (n) {
                var c = this.Count;
                for (var i = 0; i < c; i++) {
                    var t = this.items.Get(i);
                    t.Icon = i + '';
                }
            };
            Pagination.prototype.AddItem = function (page) {
            };
            Pagination.prototype.initialize = function () {
                this.applyStyle('pagination');
                this.prev = new PaginationSurf(false);
                this.next = new PaginationSurf(true);
                this.Add(this.prev);
                this.Add(this.next);
                this.items.Listen = this.opcd;
                for (var i = 0; i < 10; i++) {
                    var t = new PaginationSurf();
                    (function (i) { return t.OnInitialized = function (t) { return t.Icon = i.toString(); }; })(i);
                    this.items.Add(t);
                }
                for (var i = 0; i < this.items.Count; i++)
                    this.Add(this.items.Get(i));
            };
            Pagination.prototype.OnClick = function (e) {
                if (this.sp)
                    this.sp.disapplyStyle('active');
                this.sp = e;
                this.sp.applyStyle('active');
            };
            Pagination.prototype.isInRange = function (i) {
                var s = i - this.SelectedRange * this.Count;
                return s < this.Count && s >= 0;
            };
            Pagination.prototype.convert = function (i) {
                return i - this.SelectedRange * this.Count;
            };
            Pagination.prototype.OnItemsChanged = function (e) {
                switch (e.event) {
                    case corelib_1.collection.CollectionEvent.Added:
                        e.newItem.OnClick = this.OnClick;
                        var t = e.startIndex;
                        if (t < 0 || t >= this.Count)
                            this.Insert(e.newItem, t + 1);
                        break;
                    case corelib_1.collection.CollectionEvent.Removed:
                        this.Remove(e.oldItem);
                        e.oldItem.OnClick = null;
                        break;
                    case corelib_1.collection.CollectionEvent.Cleared:
                        var c = e.collection;
                        for (var i = 0, l = this.Count; i < l; i++) {
                            var m = c[0];
                            this.Remove(m);
                            m.OnClick = null;
                        }
                        break;
                    case corelib_1.collection.CollectionEvent.Reset:
                        var ci = this.items;
                        for (var i = 0, l = this.Count; i < l; i++) {
                            var m = ci.Get(0);
                            this.Remove(m);
                            m.OnClick = null;
                        }
                        break;
                }
            };
            Pagination.DPRange = Pagination.CreateField('Range', Number, 0, function (e) { return e.__this.OnRangeChanged(e._old, e._new); });
            Pagination.DPStartIndex = Pagination.CreateField('StartIndex', Number, 0, function (e) { return e.__this.OnStartIndexChanged(e._new); });
            Pagination.DPCount = Pagination.CreateField('Count', Number, 10, function (e) { return e.__this.OnCountChanged(e._old, e._new); });
            return Pagination;
        }(JControl));
        UI.Pagination = Pagination;
        var NumericUpDown = (function (_super) {
            __extends(NumericUpDown, _super);
            function NumericUpDown() {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.f = false;
                _this_1.minValue = -Number.MAX_VALUE;
                _this_1.defaultValue = 0;
                _this_1.maxvalue = Number.MAX_VALUE;
                return _this_1;
            }
            Object.defineProperty(NumericUpDown.prototype, "Value", {
                get: function () { return this.get(NumericUpDown.DPValue); },
                set: function (v) { this.set(NumericUpDown.DPValue, v); },
                enumerable: true,
                configurable: true
            });
            NumericUpDown.__fields__ = function () { return [NumericUpDown.DPValue]; };
            NumericUpDown.prototype._hasValue_ = function () { return true; };
            NumericUpDown.prototype.initialize = function () {
                var _this_1 = this;
                this.applyStyle('input-group', 'input-group-lg');
                var l = new Dom('a').applyStyle('btn', 'btn-primary', 'input-group-addon', 'glyphicon', 'glyphicon-minus-sign');
                var r = new Dom('a').applyStyle('btn', 'btn-primary', 'input-group-addon', 'glyphicon', 'glyphicon-plus-sign');
                var t = new Input();
                this.AddRange([this.sleft = l, this.text = t, this.sright = r]);
                this.text.Text = '0';
                this.text.View.onchange = this.textChanged.bind(this);
                l.View.onclick = function () {
                    _this_1.Value--;
                };
                r.View.onclick = function () {
                    _this_1.Value++;
                };
            };
            NumericUpDown.prototype.textChanged = function (e) {
                this.Value = parseFloat(this.text.Text);
            };
            NumericUpDown.prototype.Focus = function () {
                this.text.View.focus();
            };
            NumericUpDown.prototype.SelectAll = function () {
                var inp = this.text.View;
                inp.select();
            };
            NumericUpDown.DPValue = corelib_1.bind.DObject.CreateField('Value', Number, 0, function (e) {
                e.__this.text.Text = (e._new == null ? 0 : e._new) + '';
            }, function (e) {
                var t = e.__this;
                var n = e._new;
                if (n == null || !isFinite(n)) {
                    e._new = t.defaultValue;
                }
                else if (n < t.minValue)
                    e._new = t.minValue;
                else if (n > t.maxvalue)
                    e._new = t.maxvalue;
            });
            return NumericUpDown;
        }(JControl));
        UI.NumericUpDown = NumericUpDown;
        var NavList = (function (_super) {
            __extends(NavList, _super);
            function NavList() {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.caption = document.createElement('div');
                _this_1._view.appendChild(_this_1.caption);
                return _this_1;
            }
            Object.defineProperty(NavList.prototype, "Caption", {
                set: function (v) {
                    this.caption.textContent = v;
                },
                enumerable: true,
                configurable: true
            });
            NavList.prototype.initialize = function () {
                this.applyStyle('inavigation');
                this.caption.classList.add('icaption');
            };
            NavList.prototype.getTemplate = function (child) {
                return new Div().applyStyle('itab-header', 'sp-tooltip').Add(child);
            };
            NavList.prototype.Add = function (panel) {
                _super.prototype.Add.call(this, panel.CaptionControl);
                return this;
            };
            NavList.prototype.AddRange = function (c) {
                throw "Not Implimented";
            };
            NavList.prototype.Remove = function (c) {
                return _super.prototype.Remove.call(this, c.CaptionControl);
            };
            NavList.prototype.Insert = function (c, i) {
                _super.prototype.Insert.call(this, c.CaptionControl, i);
                return this;
            };
            NavList.prototype.SetSeparator = function () {
                var i = new Div();
                i.applyStyle('separator');
                _super.prototype.Add.call(this, i);
            };
            return NavList;
        }(JControl));
        var NavPanel = (function (_super) {
            __extends(NavPanel, _super);
            function NavPanel(Name, caption) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.Name = Name;
                _this_1.title = new Div().applyStyle('icontent-header', 'hidden');
                _this_1.container = new Div();
                _this_1.caption = new Button();
                _this_1.Caption = caption;
                return _this_1;
            }
            NavPanel.prototype.OnPrint = function () {
            };
            Object.defineProperty(NavPanel.prototype, "CaptionControl", {
                get: function () { return this.caption; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NavPanel.prototype, "Title", {
                set: function (v) {
                    if (v != null && v != "") {
                        if (typeof v === 'string')
                            this.title.View.textContent = v;
                        else
                            this.title.View.appendChild(v);
                        this.title.disapplyStyle('hidden');
                    }
                    else {
                        this.title.View.innerHTML = '';
                        this.title.applyStyle('hidden');
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NavPanel.prototype, "Caption", {
                set: function (v) {
                    this.caption.Text = v;
                },
                enumerable: true,
                configurable: true
            });
            NavPanel.prototype.initialize = function () {
                this.applyStyle('fitHeight');
                this.container.applyStyle('fitHeight', 'nav-panel');
                _super.prototype.Add.call(this, this.title);
                _super.prototype.Add.call(this, this.container);
            };
            Object.defineProperty(NavPanel.prototype, "ToolTip", {
                set: function (v) {
                    var c = document.createElement('text');
                    c.textContent = v;
                    c.classList.add('sp-tooltiptext');
                    this.caption.Content = c;
                },
                enumerable: true,
                configurable: true
            });
            NavPanel.prototype.Add = function (item) {
                this.container.Add(item);
                return this;
            };
            NavPanel.prototype.AddRange = function (items) {
                this.container.AddRange(items);
                return this;
            };
            NavPanel.prototype.Remove = function (item) {
                return this.container.Remove(item);
            };
            NavPanel.prototype.RemoveAt = function (i, dispose) {
                return this.container.RemoveAt(i, dispose);
            };
            NavPanel.prototype.Clear = function () {
                this.container.Clear();
            };
            NavPanel.prototype.Update = function () {
            };
            NavPanel.prototype.GetLeftBar = function () {
                return null;
            };
            NavPanel.prototype.GetRightBar = function () {
                return null;
            };
            NavPanel.prototype.Handled = function () {
                return true;
            };
            Object.defineProperty(NavPanel.prototype, "ServiceType", {
                get: function () {
                    return ServiceType.Instantany;
                },
                enumerable: true,
                configurable: true
            });
            NavPanel.prototype.Callback = function () { };
            NavPanel.prototype.OnBringIntoFront = function () {
            };
            NavPanel.prototype.OnKeyDown = function (e) {
            };
            NavPanel.prototype.OnSearche = function (oldPatent, newPatent) {
            };
            NavPanel.prototype.OnDeepSearch = function () {
            };
            NavPanel.prototype.getHelp = function (t) {
                var l = ["primary", "success", "danger", "info", "warning"];
                var k = 0;
                var s = "";
                for (var i in t) {
                    s += '<div class="input-group" style="background:gray"> <span class="input-group-btn"> <label class="btn btn-' + l[(k++) % l.length] + '">' + i + '</label> </span> <label class="form-control" >' + t[i] + '</label> </div>';
                }
                UI.InfoArea.push(s, true, 10000);
            };
            return NavPanel;
        }(JControl));
        UI.NavPanel = NavPanel;
        var IContent = (function (_super) {
            __extends(IContent, _super);
            function IContent(navPage) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.navPage = navPage;
                return _this_1;
            }
            IContent.prototype.initialize = function () {
                this.applyStyle('icontent');
            };
            IContent.prototype.Check = function (item) { return true; };
            IContent.prototype.Add = function (p) {
                this._view.appendChild(p.View);
                p.Parent = this.navPage;
                return this;
            };
            IContent.prototype.Remove = function (p) {
                this._view.removeChild(p.View);
                p.Parent = null;
                return true;
            };
            return IContent;
        }(JControl));
        UI.IContent = IContent;
        var NavPage = (function (_super) {
            __extends(NavPage, _super);
            function NavPage(app, title, name) {
                var _this_1 = _super.call(this, app, title, name) || this;
                _this_1.con = new IContent(_this_1);
                _this_1.nav = new NavList();
                _this_1.caption = new Button();
                _this_1.children = [];
                _this_1.events = [];
                _this_1.panels = {};
                return _this_1;
            }
            NavPage.__fields__ = function () { return [NavPage.DPSelectedItem]; };
            NavPage.prototype._onSelectedItemChanged = function (e) {
                var o = e._old;
                var n = e._new;
                if (o) {
                    this.con.Remove(o);
                    o.IsActive = false;
                    o.CaptionControl.Parent.disapplyStyle('selected');
                    o.disapplyStyle('selected');
                    this.app.Foot.Pop(o);
                }
                if (n) {
                    this.con.Add(n);
                    n.IsActive = true;
                    n.CaptionControl.Parent.applyStyle('selected');
                    n.applyStyle('selected');
                    n.OnBringIntoFront();
                    this.app.Foot.Push(n);
                }
            };
            Object.defineProperty(NavPage.prototype, "Caption", {
                set: function (v) { this.nav.Caption = v; },
                enumerable: true,
                configurable: true
            });
            NavPage.prototype.initialize = function () {
                _super.prototype.initialize.call(this);
                this._view.classList.add('inavPanel');
                this.caption.applyStyle('icaption');
                this.islocal = true;
                _super.prototype.Add.call(this, this.nav);
                _super.prototype.Add.call(this, this.con);
                delete this.islocal;
            };
            NavPage.prototype.ToggleNav = function () {
                var v = this.nav.View;
                var x = v.classList.contains('hideNav');
                if (x)
                    v.classList.remove('hideNav');
                else
                    v.classList.add('hideNav');
            };
            NavPage.prototype.Add = function (c) {
                throw "Not Implimented";
            };
            NavPage.prototype.AddRange = function (c) {
                throw "Not Implimented";
            };
            NavPage.prototype.Check = function (j) { return !!this.islocal; };
            Object.defineProperty(NavPage.prototype, "SelectedItem", {
                get: function () {
                    return this.get(NavPage.DPSelectedItem);
                },
                set: function (v) {
                    this.set(NavPage.DPSelectedItem, v);
                },
                enumerable: true,
                configurable: true
            });
            NavPage.prototype.SetPanel = function (panel) {
                var p = this.panels[panel.Name];
                if (p)
                    throw "this panel exist";
                this.panels[panel.Name] = panel;
                this.children.push(panel);
                var itemList = this.nav.Add(panel);
                this.events.push(panel.CaptionControl.addEventListener('click', NavPage._onItemSelected, { Item: panel, List: this }));
                if (!this.get(NavPage.DPSelectedItem))
                    this.SelectedItem = panel;
            };
            NavPage.prototype.GetPanelOf = function (type) {
                for (var i in this.panels) {
                    if (this.panels[i] instanceof type)
                        return this.panels[i];
                }
                return undefined;
            };
            NavPage.prototype.GetPanelsOf = function (type) {
                var x = [];
                for (var i in this.panels) {
                    if (this.panels[i] instanceof type)
                        x.push(this.panels[i]);
                }
                return x;
            };
            NavPage.prototype.SetSeparator = function () {
                this.nav.SetSeparator();
            };
            NavPage.prototype.OnKeyCombined = function (e, v) {
                var s = this.SelectedItem;
                if (s)
                    return s.OnKeyCombined(e, v);
            };
            NavPage.prototype.OnKeyDown = function (e) {
                var s = this.SelectedItem;
                if (e.altKey)
                    if (e.keyCode === UI.Keys.Down) {
                        this.SelectedItem = this.children[(1 + this.children.indexOf(s)) % this.children.length];
                        e.stopPropagation();
                        return e.preventDefault();
                    }
                    else if (e.keyCode === UI.Keys.Up) {
                        var i = this.children.indexOf(s);
                        if (i == 0)
                            i = this.children.length;
                        this.SelectedItem = this.children[(-1 + i) % this.children.length];
                        e.stopPropagation();
                        e.preventDefault();
                        return;
                    }
                ;
                if (!s)
                    return;
                s.OnKeyDown(e);
            };
            NavPage.prototype.OnContextMenu = function (e) {
                var s = this.SelectedItem;
                if (s && s.OnContextMenu(e))
                    return true;
                return _super.prototype.OnContextMenu.call(this, e);
            };
            NavPage.prototype.OnPrint = function () {
                var s = this.SelectedItem;
                if (s)
                    s.OnPrint();
            };
            NavPage._onItemSelected = function (s, e, p) {
                var o = p.List.SelectedItem;
                if (o)
                    o.IsActive = false;
                var n = p.Item;
                if (n)
                    n.IsActive = true;
                p.List.SelectedItem = p.Item;
            };
            NavPage.prototype.Select = function (name) {
                var p = this.panels[name];
                if (p)
                    this.SelectedItem = p;
                else
                    return false;
                return true;
            };
            NavPage.prototype.GetLeftBar = function () {
                var p = this.SelectedItem;
                return p && p.GetLeftBar();
            };
            Object.defineProperty(NavPage.prototype, "HasSearch", {
                get: function () {
                    return this.SelectedItem && this.SelectedItem.HasSearch;
                },
                set: function (v) { },
                enumerable: true,
                configurable: true
            });
            NavPage.prototype.GetRightBar = function () {
                var p = this.SelectedItem;
                return p && p.GetRightBar();
            };
            NavPage.prototype.Update = function () {
                var n = this.SelectedItem;
                if (n)
                    n.Update();
            };
            NavPage.prototype.OnSearche = function (oldPatent, newPatent) {
                var p = this.SelectedItem;
                if (p)
                    p.OnSearche(oldPatent, newPatent);
            };
            NavPage.prototype.OnDeepSearche = function () {
                var p = this.SelectedItem;
                if (p)
                    p.OnDeepSearch();
            };
            NavPage.DPSelectedItem = corelib_1.bind.DObject.CreateField("SelectedItem", NavPanel, null, NavPage.prototype._onSelectedItemChanged);
            return NavPage;
        }(UI.Page));
        UI.NavPage = NavPage;
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var TemplateShadow = (function (_super) {
            __extends(TemplateShadow, _super);
            function TemplateShadow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TemplateShadow.Create = function (item) {
                var isscop = item instanceof corelib_1.bind.Scop;
                var c = document.createElement('label');
                c.textContent = ((isscop ? item.Value : item) || '').toString();
                return new ScopicTemplateShadow(c, isscop ? item : new corelib_1.bind.ValueScop(item));
            };
            return TemplateShadow;
        }(UI.JControl));
        UI.TemplateShadow = TemplateShadow;
        var ScopicTemplateShadow = (function (_super) {
            __extends(ScopicTemplateShadow, _super);
            function ScopicTemplateShadow(dom, scop, cnt) {
                var _this_1 = _super.call(this, dom) || this;
                _this_1.scop = scop;
                _this_1.cnt = new corelib_1.bind.Controller(cnt || _this_1);
                if (!scop)
                    stop();
                return _this_1;
            }
            Object.defineProperty(ScopicTemplateShadow.prototype, "Controller", {
                get: function () { return this.cnt; },
                enumerable: true,
                configurable: true
            });
            ScopicTemplateShadow.prototype.setDataContext = function (data) { if (this.scop)
                this.scop.Value = data; };
            ScopicTemplateShadow.prototype.getDataContext = function () { return this.scop ? this.scop.Value : null; };
            ScopicTemplateShadow.prototype.initialize = function () {
                if (this.scop == undefined) {
                    var c = this._view.getAttribute('db-bind');
                    if (c)
                        if (c.indexOf('$') === 0)
                            this.scop = corelib_1.bind.Scop.Create(c);
                }
                var oldAttribute = this._view.getAttribute('db-bind');
                this._view.setAttribute('db-bind', '~' + corelib_1.bind.AnonymouseScop.Register(this.scop) + (oldAttribute && oldAttribute != '' ? '.' + oldAttribute : ''));
                this.cnt.processHowEver = true;
                this.cnt.View = this._view;
            };
            ScopicTemplateShadow.prototype.Check = function (c) {
                return false;
            };
            Object.defineProperty(ScopicTemplateShadow.prototype, "Scop", {
                get: function () { return this.scop; },
                enumerable: true,
                configurable: true
            });
            ScopicTemplateShadow.prototype.getScop = function () { return this.scop; };
            ScopicTemplateShadow.prototype.Dispose = function () {
                stop();
            };
            return ScopicTemplateShadow;
        }(TemplateShadow));
        UI.ScopicTemplateShadow = ScopicTemplateShadow;
        var EScopicTemplateShadow = (function () {
            function EScopicTemplateShadow(control, scop) {
                this.control = control;
                this.scop = scop;
                this.cnt = new corelib_1.bind.Controller(control);
                this.initialize();
            }
            Object.defineProperty(EScopicTemplateShadow.prototype, "Controller", {
                get: function () { return this.cnt; },
                enumerable: true,
                configurable: true
            });
            EScopicTemplateShadow.prototype.setDataContext = function (data) { if (this.scop)
                this.scop.Value = data; };
            EScopicTemplateShadow.prototype.getDataContext = function () { return this.scop ? this.scop.Value : null; };
            EScopicTemplateShadow.prototype.initialize = function () {
                if (this.scop == undefined) {
                    var c = this.control.View.getAttribute('db-bind');
                    if (c)
                        if (c.indexOf('$') === 0)
                            this.scop = corelib_1.bind.Scop.Create(c);
                }
                var oldAttribute = this.control.View.getAttribute('db-bind');
                this.control.View.setAttribute('db-bind', '~' + corelib_1.bind.AnonymouseScop.Register(this.scop) + (oldAttribute && oldAttribute != '' ? '.' + oldAttribute : ''));
                this.cnt.processHowEver = true;
                this.cnt.View = this.control.View;
            };
            EScopicTemplateShadow.prototype.Check = function (c) {
                return false;
            };
            Object.defineProperty(EScopicTemplateShadow.prototype, "Scop", {
                get: function () { return this.scop; },
                enumerable: true,
                configurable: true
            });
            EScopicTemplateShadow.prototype.getScop = function () { return this.scop; };
            return EScopicTemplateShadow;
        }());
        UI.EScopicTemplateShadow = EScopicTemplateShadow;
        var Template = (function () {
            function Template() {
            }
            Template.ToTemplate = function (itemTemplate, asTemplate) {
                if (itemTemplate instanceof Template || itemTemplate instanceof HtmlTemplate)
                    return itemTemplate;
                else if (itemTemplate instanceof HTMLTemplateElement)
                    return new HtmlTemplate(itemTemplate.content.firstElementChild, true);
                else if (itemTemplate instanceof HTMLElement)
                    return new HtmlTemplate(itemTemplate, asTemplate);
                else if (typeof itemTemplate === "string") {
                    var x = ListAdapter._getTemplate(itemTemplate);
                    if (x == null) {
                        var cc = "the template { " + itemTemplate + " } was not found";
                        console.error(new $Error(cc));
                        var d = document.createElement('error');
                        d.innerText = cc;
                        return new HtmlTemplate(d, false);
                    }
                    return new ScopicTemplate(x);
                }
                else
                    return new ScopicTemplate(ListAdapter._getTemplate(itemTemplate));
            };
            return Template;
        }());
        UI.Template = Template;
        var HtmlTemplate = (function () {
            function HtmlTemplate(dom, asTemplate) {
                this.dom = dom;
                if (dom instanceof HTMLTemplateElement) {
                    this.dom = dom.content.firstElementChild;
                    this.asTemplate = true;
                }
                else
                    this.asTemplate = !!asTemplate;
                Object.freeze(this);
            }
            HtmlTemplate.prototype.CreateShadow = function (data, cnt) {
                return new ScopicTemplateShadow(this.asTemplate ? this.dom.cloneNode(true) : this.dom, data instanceof corelib_1.bind.Scop ? data : new corelib_1.bind.ValueScop(data), cnt);
            };
            return HtmlTemplate;
        }());
        UI.HtmlTemplate = HtmlTemplate;
        var ScopicTemplate = (function () {
            function ScopicTemplate(templatePath) {
                this.template = typeof templatePath === 'string' ? corelib_1.mvc.MvcDescriptor.Get(templatePath) : templatePath;
                if (this.template == null) {
                    throw new $Error("the template { " + templatePath + " } was not found");
                }
            }
            ScopicTemplate.prototype.CreateShadow = function (data, cnt) {
                return new ScopicTemplateShadow(this.template.Create(), data instanceof corelib_1.bind.Scop ? data : (new corelib_1.bind.ValueScop(data)), cnt);
            };
            return ScopicTemplate;
        }());
        UI.ScopicTemplate = ScopicTemplate;
        var actions;
        var TControl = (function (_super) {
            __extends(TControl, _super);
            function TControl(itemTemplate, data) {
                var _this_1 = _super.call(this, null) || this;
                _this_1.data = data;
                _this_1._onCompiled = new corelib_1.bind.EventListener(_this_1, true);
                _this_1.compiled = false;
                _this_1._template = Template.ToTemplate(itemTemplate, false);
                if (_this_1._template == null) { }
                _this_1.Shadow = _this_1._template.CreateShadow(data === TControl.Me ? _this_1 : data, _this_1);
                _this_1.Shadow.Parent = _this_1;
                _this_1._view = _this_1.Shadow.View;
                return _this_1;
            }
            TControl.__fields__ = function () { return [this.DPData]; };
            TControl.ctor = function () {
                this.DPData = corelib_1.bind.DObject.CreateField("Data", Object, null, TControl.prototype.OnDataChanged);
            };
            TControl.prototype.OnFullInitialized = function () {
                var c = this.Shadow.Controller;
                c && (c.OnCompiled = { Owner: this, Invoke: this._onTemplateCompiled });
                _super.prototype.OnFullInitialized.call(this);
            };
            TControl.prototype._onTemplateCompiled = function (cnt) {
                this.compiled = true;
                this.OnCompileEnd(cnt);
                this._onCompiled.PInvok(this, [this, cnt]);
            };
            TControl.prototype.OnCompileEnd = function (cnt) {
            };
            TControl.prototype.getScop = function () { return this.Shadow instanceof ScopicTemplateShadow ? this.Shadow.Scop : null; };
            TControl.prototype.initialize = function () {
            };
            Object.defineProperty(TControl.prototype, "OnCompiled", {
                set: function (m) {
                    if (this.compiled)
                        m(this);
                    else
                        this._onCompiled.On = m;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TControl.prototype, "IsCompiled", {
                get: function () {
                    return this.compiled;
                },
                enumerable: true,
                configurable: true
            });
            TControl.prototype.OnDataChanged = function (e) {
                this.Shadow.setDataContext(e._new);
            };
            TControl.Me = new Object();
            return TControl;
        }(UI.JControl));
        UI.TControl = TControl;
        var ListAdapter = (function (_super) {
            __extends(ListAdapter, _super);
            function ListAdapter(template, itemTemplate, data, getSourceFromScop) {
                var _this_1 = _super.call(this, template || document.createElement('div'), data) || this;
                _this_1.garbage = [];
                _this_1.AcceptNullValue = true;
                _this_1.OnItemSelected = new corelib_1.bind.EventListener('');
                _this_1.OnItemInserted = new corelib_1.bind.EventListener('');
                _this_1.OnItemRemoved = new corelib_1.bind.EventListener('');
                _this_1.OnChildClicked = new corelib_1.bind.EventListener('');
                _this_1.sli = { Owner: _this_1, Invoke: _this_1.OnSourceChanged };
                _this_1.count = 0;
                _this_1.initTemplate(itemTemplate, getSourceFromScop);
                return _this_1;
            }
            ListAdapter.prototype.instantanyInitializeParent = function () { return true; };
            ListAdapter.__fields__ = function () { return [ListAdapter.DPSelectedIndex, ListAdapter.DPTemplate, ListAdapter.DPSource, this.DPSelectedItem]; };
            Object.defineProperty(ListAdapter.prototype, "Source", {
                get: function () { return this.get(ListAdapter.DPSource); },
                set: function (v) { this.set(ListAdapter.DPSource, v); },
                enumerable: true,
                configurable: true
            });
            ListAdapter.prototype.__checkSelectedIndex = function (e) {
                var s = this.Source;
                var l = s == null ? 0 : s.Count;
                var n = isNaN(e._new) || e._new == null || e._new < 0 ? -1 : e._new;
                if (n === -1)
                    e._new = this.AcceptNullValue || l == 0 ? -1 : 0;
                else if (n >= l)
                    e._new = this.AcceptNullValue ? l : l - 1;
            };
            ListAdapter.prototype.swap = function (i) {
                var s = this.Source;
                var l = s == null ? 0 : s.Count;
                var n = i;
                if (i < 0)
                    return -1;
                else if (n >= l)
                    return l - 1;
                return i;
            };
            Object.defineProperty(ListAdapter.prototype, "SelectedIndex", {
                get: function () { return this.get(ListAdapter.DPSelectedIndex); },
                set: function (v) { this.set(ListAdapter.DPSelectedIndex, v); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListAdapter.prototype, "ItemStyle", {
                get: function () {
                    return this.get(ListAdapter.DPItemStyle);
                },
                set: function (v) {
                    this.set(ListAdapter.DPItemStyle, v);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListAdapter.prototype, "Template", {
                get: function () {
                    return this.get(ListAdapter.DPTemplate);
                },
                set: function (v) {
                    this.set(ListAdapter.DPTemplate, v);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListAdapter.prototype, "Content", {
                get: function () { return this._content; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListAdapter.prototype, "SelectedChild", {
                get: function () { return this._selectedItem; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListAdapter.prototype, "SelectedItem", {
                get: function () { return this._selectedItem && this._selectedItem.getDataContext(); },
                set: function (v) {
                    this.SelectedIndex = this.Source && this.Source.IndexOf(v);
                },
                enumerable: true,
                configurable: true
            });
            ListAdapter.prototype.OnSelectedIndexChanged = function (_old, _new) {
                var x = this._content.getChild(_new);
                var lx = this._content.getChild(_old);
                var li = _old;
                if (lx)
                    lx.disapplyStyle(this.activateClass || 'active');
                if (x)
                    x.applyStyle(this.activateClass || 'active');
                this._selectedItem = x;
                if (_old !== _new) {
                    this.set(ListAdapter.DPSelectedItem, x && x.getDataContext());
                    this.riseItemSelectedEvent(this.SelectedIndex, x, li, lx);
                    return true;
                }
            };
            ListAdapter.prototype.riseItemSelectedEvent = function (ni, nc, oi, oc) {
                this.OnItemSelected.Invoke('', [this, ni, nc, oi, oc]);
                var v = nc && nc.View;
                if (v)
                    if (v.scrollIntoViewIfNeeded)
                        v.scrollIntoViewIfNeeded();
                    else
                        v.scrollIntoView();
            };
            ListAdapter.prototype.Select = function (t) {
                this.SelectedIndex = this._content.IndexOf(t);
            };
            ListAdapter.prototype.SelectItem = function (t) {
                var s = this.Source;
                if (s)
                    this.SelectedIndex = s.IndexOf(t);
            };
            ListAdapter._getTemplate = function (template) {
                switch (typeof template) {
                    case 'string':
                        return corelib_1.mvc.MvcDescriptor.Get(template);
                    case 'function':
                        return corelib_1.mvc.MvcDescriptor.GetByType(template).Default;
                    default:
                        if (template instanceof corelib_1.mvc.ITemplate)
                            return template;
                        var c = corelib_1.mvc.MvcDescriptor.GetByType(template);
                        return c ? c.Default : undefined;
                }
            };
            ListAdapter._getTemplateShadow = function (template) {
                if (template instanceof HTMLElement)
                    return template;
                var t = ListAdapter._getTemplate(template);
                return t == undefined ? document.createElement('div') : t.Create();
            };
            ListAdapter.ctor = function () {
                actions = [this.prototype.OnAdd, this.prototype.OnRemove, this.prototype.OnReplace, this.prototype.OnClear, this.prototype.Reset, this.prototype.OnSet];
            };
            ListAdapter.prototype.initTemplate = function (itemTemplate, getSourceFromScop) {
                var dom = this._view;
                var x = $('[db-content]', dom)[0] || dom;
                var attSI = $('[attach-SelectedItem]', dom)[0];
                if (attSI)
                    this.AttachSelectedItem(attSI);
                if (getSourceFromScop)
                    this.getSourceFromScop(x);
                this._content = new UI.DivControl(x);
                var itemStyle = dom.getAttribute('item-style') || x.getAttribute('item-style');
                if (itemStyle)
                    this.ItemStyle = itemStyle.split(' ');
                this.Template = Template.ToTemplate(itemTemplate || ListAdapter.getTemplate(x) || this._content.View.getAttribute('item-template') || dom.getAttribute('item-template'), true);
                this._content.Parent = this;
            };
            ListAdapter.getFirstChild = function (dom) {
                var f = dom.firstChild;
                var node;
                while (f) {
                    if (f instanceof Element)
                        return f;
                    if (!node && f instanceof Node)
                        node = f;
                    f = f.nextSibling;
                }
                return node;
            };
            ListAdapter.getTemplate = function (d) {
                var t = d.children;
                for (var i = 0, l = t.length; i < l; i++) {
                    var x = t[i];
                    if (corelib_1.basic.polyfill.IsTemplate(x)) {
                        var w = ListAdapter.getFirstChild(x.content);
                        x.remove();
                        return w;
                    }
                }
            };
            ListAdapter.prototype.getSourceFromScop = function (x) {
                x.setAttribute('db-cmd', corelib_1.ScopicCommand.Register({ Invoke: this.CmdExecuter, Owner: this }));
            };
            ListAdapter.prototype.CmdExecuter = function (n, d, s) {
                corelib_1.ScopicCommand.Delete(n);
                this._scop = s;
                this.Source = s.Value;
                this.RlSourceScop = new corelib_1.bind.TwoBind(corelib_1.bind.BindingMode.TwoWay, s, this, corelib_1.bind.Scop.DPValue, ListAdapter.DPSource);
                this.Source = s.Value;
            };
            ListAdapter.prototype.AttachSelectedItem = function (x) {
                x.setAttribute('db-cmd', corelib_1.ScopicCommand.Register({ Invoke: this.CmdAttacheSelectedItemExecuter, Owner: this }));
            };
            ListAdapter.prototype.CmdAttacheSelectedItemExecuter = function (n, d, s) {
                corelib_1.ScopicCommand.Delete(n);
                this.OnPropertyChanged(ListAdapter.DPSelectedIndex, function (s, e) {
                    this.s.Value = this.t.SelectedItem;
                }, { t: this, s: s });
            };
            ListAdapter.prototype.initialize = function () {
                var _this_1 = this;
                var s = this.Source;
                this.Content.OnInitialized = function (n) { return _this_1.Reset(s ? new corelib_1.utils.ListEventArgs(null, null, null, corelib_1.collection.CollectionEvent.Reset, s.AsList()) : undefined); };
            };
            ListAdapter.prototype.OnSourceChanged = function (e) {
                if (this.Template)
                    actions[e.event].call(this, e);
            };
            ListAdapter.prototype.ReSelect = function () {
                var i = this.get(ListAdapter.DPSelectedIndex);
                var j = this.swap(i);
                if (!this.AcceptNullValue && j < 0 && this.Source && this.Source.Count > 0)
                    j = 0;
                if (i !== j) {
                    this.SelectedIndex = j;
                    return true;
                }
                return this.OnSelectedIndexChanged(i, j);
            };
            Object.defineProperty(ListAdapter.prototype, "Scop", {
                get: function () {
                    if (!this._scop) {
                        var pscop = _super.prototype.getScop.call(this);
                        if (pscop)
                            return pscop;
                        this._scop = corelib_1.bind.NamedScop.Create(null, this.Source);
                        this._scop.setParent(this);
                        return this._scop;
                    }
                },
                enumerable: true,
                configurable: true
            });
            ListAdapter.prototype.BindTo = function (scop) {
                if (scop) {
                    scop.OnPropertyChanged(corelib_1.bind.Scop.DPValue, this.OnScopValueChanged, this);
                    this.Source = scop.Value;
                }
            };
            ListAdapter.prototype.OnScopValueChanged = function (pb, e) {
                this.Source = e._new;
            };
            ListAdapter.prototype.OnItemClicked = function (s, e, t) {
                var e1 = { sender: this, Event: e, index: this.Source.IndexOf(s.getDataContext()), template: s };
                this.OnChildClicked.PInvok('', [e1], this);
                if (e1.Cancel)
                    return;
                t.Select(s);
            };
            ListAdapter.prototype.getItemShadow = function (item, i) {
                var ch = this.garbage.pop();
                if (!ch) {
                    var t = this.Template;
                    ch = t == null ? TemplateShadow.Create(item) : t.CreateShadow(item, undefined);
                }
                return ch;
            };
            ListAdapter.prototype.disposeItemShadow = function (item, child, i) {
                if (item instanceof Array && i == NaN && child == void 0) {
                    this.garbage.push.apply(this.garbage, this.CloneChildren());
                }
                else {
                    if (!child)
                        return;
                    this.garbage.push(child);
                    return child;
                }
            };
            ListAdapter.prototype.disposeItemsShadow = function (items, child) {
                this.garbage.push.apply(this.garbage, this.CloneChildren());
            };
            ListAdapter.prototype._insert = function (item, i) {
                var _this_1 = this;
                this.count++;
                var ch = this.getItemShadow(item, i);
                var sc = ch.getScop();
                if (sc)
                    sc.setParent(this.Scop);
                ch.setDataContext(item);
                if (i)
                    this.Insert(ch, i);
                else
                    this.Add(ch);
                if (i == undefined)
                    i = this.Source.Count - 1;
                var h = ch.__events;
                if (h != undefined)
                    h.Dispose();
                ch.__events = [ch.addEventListener('click', this.OnItemClicked, this, this), ch.addEventListener('contextmenu', this.OnItemClicked, this, this)];
                var c = ch.View.classList;
                if (this.ItemStyle)
                    c.add.apply(c, this.ItemStyle);
                this.OnItemInserted.Invok('', function (f) { return f(_this_1, i, item, ch); });
                var r = this.ReSelect();
                if (!r && i == this.SelectedIndex)
                    this.riseItemSelectedEvent(i, ch, i, this._content.getChild(i));
            };
            ListAdapter.prototype._remove = function (item, i) {
                var _this_1 = this;
                var ch = this.disposeItemShadow(item, this._content.getChild(i), i);
                var res = i === this.SelectedIndex;
                this.count--;
                ch.disapplyStyle(this.activateClass || 'active');
                this._content.RemoveAt(i, false);
                for (var _i = 0, _a = ch.__events; _i < _a.length; _i++) {
                    var h = _a[_i];
                    if (h != undefined)
                        h.Dispose();
                }
                ch.__events = undefined;
                var c = ch.View.classList;
                if (this.ItemStyle)
                    c.remove.apply(c, this.ItemStyle);
                this.OnItemRemoved.Invok('', function (f) { return f(_this_1, i, item, ch); });
                var r = this.ReSelect();
                if (!r && i == this.SelectedIndex)
                    this.riseItemSelectedEvent(i, this._content.getChild(i), i, ch);
            };
            ListAdapter.prototype.OnAdd = function (e) {
                this._insert(e.newItem, e.startIndex);
            };
            ListAdapter.prototype.OnSet = function (e) {
                var ch = this._content.getChild(e.startIndex);
                if (!ch)
                    return;
                ch.setDataContext(e.newItem);
            };
            ListAdapter.prototype.OnClear = function (e) {
                this.SelectedIndex = -1;
                this.disposeItemsShadow(e && e.collection, this.CloneChildren());
                if (e && e.collection && this.count > 0)
                    for (var i = e.collection.length - 1; i >= 0; i--)
                        this._remove(e.collection[i], i);
                this.count = 0;
            };
            ListAdapter.prototype.OnRemove = function (e) {
                this._remove(e.oldItem, e.startIndex);
            };
            ListAdapter.prototype.OnReplace = function (e) {
                this._content.getChild(e.startIndex).setDataContext(e.newItem);
            };
            ListAdapter.prototype.Reset = function (e) {
                var _this_1 = this;
                var si = this.SelectedIndex;
                var c = this.Source;
                this.OnClear(e);
                if (c)
                    for (var i = 0, l = c.Count; i < l; i++)
                        this._insert(c.Get(i), i);
                corelib_1.thread.Dispatcher.call(this, function (si) { _this_1.SelectedIndex = si; }, si);
            };
            ListAdapter.prototype.clearGarbage = function () {
                for (var i = 0, l = this.garbage.length; i < l; i++)
                    this.garbage[i].Dispose();
                this.garbage.length = 0;
            };
            ListAdapter.prototype.Recycle = function () {
                this.Clear();
                this.clearGarbage();
                this.Reset();
            };
            ListAdapter.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.Source.Unlisten = this.sli;
                this.sli = null;
                this.clearGarbage();
                this._content.Dispose();
                this._content = null;
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            ListAdapter.prototype.Add = function (child) {
                this._content.Add(child);
                return this;
            };
            ListAdapter.prototype.AddRange = function (children) {
                this._content.AddRange(children);
                return this;
            };
            ListAdapter.prototype.Remove = function (child, dispose) {
                return this._content.Remove(child);
            };
            ListAdapter.prototype.RemoveAt = function (i, dispose) {
                return this._content.RemoveAt(i, dispose);
            };
            ListAdapter.prototype.Clear = function (dispose) {
                var c = this.Source;
                if (c) {
                    for (var i = this.Content.Count - 1; i >= 0; i--)
                        this._remove(c.Get(i), i);
                }
            };
            ListAdapter.prototype.Insert = function (c, i) {
                this._content.Insert(c, i);
                return this;
            };
            ListAdapter.prototype.CloneChildren = function () { return this._content.CloneChildren(); };
            ListAdapter.prototype.Check = function (c) {
                return c instanceof TemplateShadow;
            };
            ListAdapter.prototype.OnKeyDown = function (e) {
                if (e.keyCode == UI.Keys.Down)
                    this.SelectedIndex++;
                else if (e.keyCode == UI.Keys.Up)
                    this.SelectedIndex--;
                else if (e.keyCode == UI.Keys.End)
                    this.SelectedIndex = Number.MAX_VALUE;
                else if (e.keyCode == UI.Keys.Home)
                    this.SelectedIndex = -1;
                else
                    return false;
                e.preventDefault();
                e.stopPropagation();
                return true;
            };
            ListAdapter.DPSource = corelib_1.bind.DObject.CreateField('Source', corelib_1.collection.List, null, function (e) {
                var t = e.__this;
                if (e._old)
                    e._old.Unlisten = e.__this.sli;
                if (e._new)
                    e._new.Listen = e.__this.sli;
                if (t.IsInit)
                    t.Reset(e);
            }, function (e) { if (e.__this.IsInit)
                e.__this.Clear(); });
            ListAdapter.DPSelectedIndex = corelib_1.bind.DObject.CreateField('SelectedIndex', Number, -2, function (e) { return e.__this.OnSelectedIndexChanged(e._old, e._new); }, ListAdapter.prototype.__checkSelectedIndex);
            ListAdapter.DPItemStyle = corelib_1.bind.DObject.CreateField('ItemStyle', Array, undefined, function (e) {
                var t = e.__this._content;
                if (!t)
                    return;
                var n = e._new;
                var o = e._old;
                for (var i = 0, l = t.Count; i < l; i++) {
                    var c = t.getChild(i).View.classList;
                    if (o)
                        c.remove.apply(c, o);
                    if (n)
                        c.add.apply(c, n);
                }
            });
            ListAdapter.DPTemplate = corelib_1.bind.DObject.CreateField('Template', Object, null, function (e) { return e.__this.Recycle(); }, function (e) {
                if (e._new)
                    if (typeof e._new.CreateShadow !== 'function')
                        e.IsValid = false;
            });
            ListAdapter.DPSelectedItem = corelib_1.bind.DObject.CreateField("SelectedItem", Object);
            return ListAdapter;
        }(TControl));
        UI.ListAdapter = ListAdapter;
        var Spinner = (function (_super) {
            __extends(Spinner, _super);
            function Spinner(test) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.isStarted = false;
                return _this_1;
            }
            Spinner.prototype.initialize = function () {
                this.container = document.createElement('div');
                this.circle = document.createElement('div');
                this.message = document.createElement('p');
                this.message.textContent = 'Wait';
                this.applyStyle('full-fixedlayout');
                this.container.classList.add('spinner');
                this.circle.classList.add('spinner-circle');
                this.message.classList.add('spinner-message');
                this.container.appendChild(this.circle);
                this.container.appendChild(this.message);
                this._view.appendChild(this.container);
            };
            Spinner.prototype.Start = function (logo) {
                var _this_1 = this;
                this.OnInitialized = function (l) { return l.circle.classList.add('spinner-start'); };
                this.Parent = UI.Desktop.Current;
                this.OnInitialized = function (n) {
                    _this_1.Message = logo || 'Wait';
                    document.body.appendChild(_this_1.View);
                };
                this.isStarted = true;
            };
            Spinner.prototype.Pause = function () {
                if (this.isStarted) {
                    this.Parent = null;
                    this.circle.classList.remove('spinner-start');
                    document.body.removeChild(this.View);
                }
                this.isStarted = false;
            };
            Object.defineProperty(Spinner.prototype, "Message", {
                set: function (v) { this.message.textContent = v; },
                enumerable: true,
                configurable: true
            });
            Spinner.Default = new Spinner(undefined);
            return Spinner;
        }(UI.JControl));
        UI.Spinner = Spinner;
        (function () {
            var e = document.getElementById('spinner');
            if (e) {
                e.parentElement.removeChild(e);
            }
            Spinner.Default.Start("Loadding");
        })();
        var t = Date.now();
        var RichMenu = (function (_super) {
            __extends(RichMenu, _super);
            function RichMenu(itemTemplate, data, parent) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.isOpen = false;
                _this_1._view.classList.add('full-fixedlayout1');
                _this_1._view.addEventListener('click', _this_1);
                if (itemTemplate)
                    _this_1.itemTemplate = Template.ToTemplate(itemTemplate, false);
                if (parent === void 0)
                    _this_1.Parent = UI.Desktop.Current;
                else
                    _this_1.Parent = parent;
                if (data)
                    _this_1.OnInitialized = function (rm) { return rm.Data = data; };
                return _this_1;
            }
            RichMenu.prototype.handleEvent = function (e) {
                this.Close(true);
            };
            RichMenu.prototype.initialize = function () {
                var _this_1 = this;
                this.menu = new UI.Div().applyStyle('contextmenu', 'panel');
                this.adapter = new ListAdapter(document.createElement('div'), 'menu.simple').applyStyle('panel-body', 'verticalList');
                this.adapter.ItemStyle = ['focusable'];
                this.adapter.AcceptNullValue = true;
                this.Add(this.menu.Add(this.adapter));
                this.menu.View.style.backgroundColor = '#333';
                this.menu.View.style.color = 'white';
                this.adapter.OnItemSelected.On = function (x, k, j) {
                    if (k == -1)
                        return;
                    if (!_this_1.isOpen)
                        return;
                    _this_1.Close(true);
                    if (_this_1.i && j)
                        _this_1.i.Invoke.call(_this_1.i.Owner, _this_1, j.getDataContext());
                };
                this.menu.addEventListener('mouseleave', function (s, e, p) {
                    p.Close(false);
                }, this);
                this.menu.addEventListener('mouseenter', function (s, e, p) {
                    clearTimeout(p.timeout);
                }, this);
                this._view.style.zIndex = '2000000';
            };
            RichMenu.prototype.toInt = function (b) { return b === false ? 0 : b == null ? -0.5 : -1; };
            RichMenu.prototype.Open = function (e, callback, left, bottom) {
                var _this_1 = this;
                if (this.isOpen == true)
                    return;
                this.adapter.SelectedIndex = -1;
                this.menu.disapplyStyle('chide');
                var mn = this.menu.View;
                var v = this.menu.View.style;
                e = { x: e.x, y: e.y };
                this.adapter.SelectedIndex = -1;
                document.body.appendChild(this._view);
                this.i = callback;
                this.isOpen = true;
                this.adapter.OnInitialized = function (n) {
                    return setTimeout(function () {
                        var l = (_this_1.toInt(left) * mn.clientWidth + e.x);
                        var p = (_this_1.toInt(bottom) * mn.clientHeight + e.y);
                        v.left = (l < 0 ? 0 : l) + px;
                        v.top = (p < 0 ? 0 : p) + px;
                    }, 200);
                };
            };
            RichMenu.prototype.Close = function (imediate) {
                var _this_1 = this;
                if (this.isOpen == false)
                    return;
                if (imediate) {
                    this.isOpen = null;
                    this.menu.applyStyle('chide');
                    setTimeout(function () {
                        _this_1.isOpen = false;
                        _this_1._view.remove();
                    }, 500);
                    this.adapter.SelectedIndex = -1;
                }
                else
                    this.timeout = setTimeout(function (p) { return p.Close(true); }, 1500, this);
            };
            Object.defineProperty(RichMenu.prototype, "Data", {
                set: function (items) {
                    var a = this.adapter;
                    if (a.Source) {
                        a.Source.Clear();
                        a.Source.AddRange(items);
                    }
                    else
                        a.Source = new corelib_1.collection.List(Object, items);
                },
                enumerable: true,
                configurable: true
            });
            return RichMenu;
        }(UI.JControl));
        UI.RichMenu = RichMenu;
        window.rm = RichMenu;
        window.rmt = function () {
            var rm = new RichMenu();
            rm.Parent = UI.Desktop.Current;
            rm.OnInitialized = function (rm) {
                rm.Data = ["File", "Save", "Close", "Discart"];
                document.addEventListener('click', function (e) {
                    ii = (ii + 1) % lst.length;
                    rm.Open(e, { Owner: null, Invoke: function (r, s) { } }, lst[ii], lst1[ii]);
                    e.stopPropagation();
                    e.preventDefault();
                });
            };
            var lst = [null, null, null, true, true, true, false, false, false];
            var lst1 = [null, true, false, null, true, false, null, true, false];
            var ii = 0;
        };
        var Location;
        (function (Location) {
            Location[Location["Left"] = 1] = "Left";
            Location[Location["Top"] = 2] = "Top";
            Location[Location["Right"] = 4] = "Right";
            Location[Location["Bottom"] = 8] = "Bottom";
            Location[Location["HCenter"] = 5] = "HCenter";
            Location[Location["VCenter"] = 10] = "VCenter";
            Location[Location["Center"] = 15] = "Center";
            Location[Location["TopLeft"] = 3] = "TopLeft";
        })(Location = UI.Location || (UI.Location = {}));
        var ExContextMenu = (function (_super) {
            __extends(ExContextMenu, _super);
            function ExContextMenu(items) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.dic = new corelib_1.collection.Dictionary('');
                _this_1.list = new UI.ListAdapter("templates.contextmenu", undefined, _this_1, true);
                _this_1.OnAction = new corelib_1.bind.EventListener('', false);
                _this_1.location = Location.TopLeft;
                _this_1.Items = new corelib_1.collection.List(Object, items);
                return _this_1;
            }
            ExContextMenu.__fields__ = function () { return [this.DPTitle, this.DPItems]; };
            Object.defineProperty(ExContextMenu, "NextZIndex", {
                get: function () { return ++this.zIndex; },
                enumerable: true,
                configurable: true
            });
            ExContextMenu.prototype.initialize = function () {
                this.applyStyle("fit");
                this.list.OnItemSelected.Add(this.OnItemSelected.bind(this));
                this.list.OnItemInserted.Add(this.OnItemInserted.bind(this));
                this.list.OnItemRemoved.Add(this.OnItemRemoved.bind(this));
                this.list.applyStyle('shadow');
                this._view.addEventListener('mousedown', this);
                this.Add(this.list);
            };
            ExContextMenu.prototype.OnItemSelected = function (lst, i, tmp, oldi, oldtmp) {
            };
            ExContextMenu.prototype.OnItemInserted = function (lst, i, data, cnt) {
                var t = { p: this, cnt: cnt, data: data, handleEvent: function (e) { this.p.Action(this.cnt, this.data, e); } };
                this.dic.Set(cnt, t);
                cnt.applyStyle('focusable');
                cnt.View.addEventListener('click', t);
            };
            ExContextMenu.prototype.OnItemRemoved = function (lst, i, data, cnt) {
                var t = this.dic.Get(cnt);
                var v = cnt.View;
                v.removeEventListener('click', t);
                this.dic.Remove(cnt);
            };
            ExContextMenu.prototype.Action = function (cnt, data, e) {
                e.stopPropagation();
                e.preventDefault();
                this.OnAction.PInvok('', [this, data]);
                this.Close();
            };
            ExContextMenu.prototype.ShowForTarget = function () {
                var v = this.target;
                v = v instanceof HTMLElement ? v : v instanceof UI.JControl ? v.View : null;
                if (v == null)
                    return;
                var x = v.offsetLeft + v.offsetWidth;
                var y = v.offsetTop + v.offsetHeight;
                this.Show(x, y + 7);
            };
            ExContextMenu.prototype.Show = function (x, y) {
                var _this_1 = this;
                this.list.SelectedIndex = -1;
                var ths = this.list;
                this.disapplyStyle('hidden');
                this._view.style.zIndex = ExContextMenu.NextZIndex.toString();
                if (!this.parent)
                    this.Parent = UI.Desktop.Current;
                document.body.appendChild(this._view);
                this.OnInitialized = function (n) {
                    return corelib_1.thread.Dispatcher.call(n, function () {
                        var mn = _this_1.list.View;
                        var l = (_this_1.HorizontalFraction * mn.clientWidth + x);
                        var p = (_this_1.VerticalFraction * mn.clientHeight + y);
                        var v = _this_1.list.View.style;
                        var tv = _this_1.list.View;
                        var wv = { w: _this_1.View.clientWidth, h: _this_1.View.clientHeight };
                        l = l < 0 ? 0 : l;
                        p = p < 0 ? 0 : p;
                        l = l + tv.clientWidth > wv.w ? wv.w - tv.clientWidth : l;
                        p = p + tv.clientHeight > wv.h ? wv.h - tv.clientHeight : p;
                        v.left = l + px;
                        v.top = p + px;
                    });
                };
            };
            ExContextMenu.prototype.toInt = function (b) { return b === false ? 0 : b == null ? -0.5 : -1; };
            Object.defineProperty(ExContextMenu.prototype, "HorizontalFraction", {
                get: function () {
                    var v = this.location;
                    if ((v & Location.HCenter) == Location.HCenter)
                        return -0.5;
                    if ((v & Location.Left) == Location.Left)
                        return 0;
                    return -1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExContextMenu.prototype, "VerticalFraction", {
                get: function () {
                    var v = this.location;
                    if ((v & Location.VCenter) == Location.VCenter)
                        return -0.5;
                    if ((v & Location.Top) == Location.Top)
                        return 0;
                    return -1;
                },
                enumerable: true,
                configurable: true
            });
            ExContextMenu.prototype.handleEvent = function (e) {
                switch (e.type) {
                    case 'mousedown':
                        if (e.srcElement == this._view)
                            this.Close();
                        return;
                    case 'contextmenu':
                        this._OnContextMenu(this.target instanceof UI.JControl ? this.target : null, this.target instanceof HTMLElement ? this.target : this.target.View, e);
                        return;
                }
            };
            ExContextMenu.prototype._OnContextMenu = function (target, dom, e) {
                this.Show(e.x, e.y);
                e.preventDefault();
                e.stopPropagation();
            };
            ExContextMenu.prototype.Close = function () {
                this.applyStyle('hidden');
                this._view.remove();
            };
            Object.defineProperty(ExContextMenu.prototype, "Target", {
                set: function (v) {
                    if (this.target) {
                        var ov = this.target instanceof HTMLElement ? this.target : this.target.View;
                        ov.removeEventListener('contextmenu', this);
                        this.target = null;
                    }
                    if (!v)
                        return;
                    var nv = v instanceof HTMLElement ? v : v.View;
                    nv.addEventListener('contextmenu', this);
                    this.target = v;
                },
                enumerable: true,
                configurable: true
            });
            ExContextMenu.DPTitle = corelib_1.bind.DObject.CreateField('Title', String, 'Menu');
            ExContextMenu.DPItems = corelib_1.bind.DObject.CreateField('Items', corelib_1.collection.List);
            ExContextMenu.zIndex = 20000;
            return ExContextMenu;
        }(UI.JControl));
        UI.ExContextMenu = ExContextMenu;
        var ContextMenu = (function (_super) {
            __extends(ContextMenu, _super);
            function ContextMenu(items) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.dic = new corelib_1.collection.Dictionary('');
                _this_1.itemChangedDlg = { Invoke: _this_1.SourceChanged, Owner: _this_1 };
                _this_1.OnItemSelected = function (m) {
                    this.OnMenuItemSelected.Invoke(this.OnItemSelected, [this, m]);
                }.bind(_this_1);
                _this_1.OnMenuItemSelected = new corelib_1.bind.EventListener(_this_1.OnItemSelected);
                if (items)
                    for (var i = 0; i < items.length; i++) {
                        var e = items[i];
                        if (e instanceof UI.MenuItem)
                            continue;
                        var c = items[i] = new UI.CItem(e, e, '#', null);
                        c.Content.applyStyle('col-xs-12');
                    }
                _this_1.Items = new corelib_1.collection.List(UI.CItem, items);
                return _this_1;
            }
            ContextMenu.prototype.initialize = function () {
                this.applyStyle('contextmenu');
                this.reset();
                this.Items.Listen = this.itemChangedDlg;
            };
            ContextMenu.prototype.SourceChanged = function (e) {
                switch (e.event) {
                    case corelib_1.collection.CollectionEvent.Added:
                        this.add(e.newItem);
                        break;
                    case corelib_1.collection.CollectionEvent.Replace:
                        this.replace(e.oldItem, e.newItem);
                        break;
                    case corelib_1.collection.CollectionEvent.Removed:
                        this.remove(e.oldItem);
                        break;
                    case corelib_1.collection.CollectionEvent.Cleared:
                        this.clear();
                        break;
                    case corelib_1.collection.CollectionEvent.Reset:
                        this.clear();
                        this.reset();
                        break;
                }
            };
            ContextMenu.prototype.add = function (t) {
                var jc = new UI.MenuItem(t).applyStyle('row');
                _super.prototype.Add.call(this, jc);
                this.dic.Set(t, jc);
                t.OnItemSelected = this.OnItemSelected;
            };
            ContextMenu.prototype.remove = function (t) {
                _super.prototype.Remove.call(this, this.dic.Remove(t), true);
            };
            ContextMenu.prototype.replace = function (o, n) {
                throw 'not implimented';
            };
            ContextMenu.prototype.clear = function () {
                var d = this.dic;
                for (var i = d.Count - 1; i >= 0; i--)
                    _super.prototype.Remove.call(this, this.dic.RemoveAt(i).Value, true);
            };
            ContextMenu.prototype.reset = function () {
                for (var i = 0, l = this.Items.Count; i < l; i++) {
                    var t = this.Items.Get(i);
                    this.add(t);
                }
            };
            ContextMenu.prototype.Add = function (j) {
                throw '';
            };
            ContextMenu.prototype.AddRange = function (citem) {
                throw '';
            };
            ContextMenu.prototype.Remove = function (j, dispose) {
                return false;
            };
            ContextMenu.prototype.Show = function (x, y) {
                this.disapplyStyle('hidden');
                var s = this._view.style;
                s.left = x + "px";
                s.top = y + "px";
                this._view.addEventListener('mouseout', this);
                this._view.addEventListener('mousein', this);
                if (!this.parent)
                    this.Parent = UI.Desktop.Current;
                document.body.appendChild(this._view);
            };
            ContextMenu.prototype.handleEvent = function (e) {
                switch (e.type) {
                    case 'mouseout':
                        break;
                    case 'mousein':
                        clearTimeout(this.thrid);
                        break;
                    case 'contextmenu':
                        this._OnContextMenu(this.target, this.target instanceof HTMLElement ? this.target : this.target.View, e);
                        break;
                }
            };
            ContextMenu.prototype._OnContextMenu = function (target, dom, e) {
                this.Show(e.x, e.y);
                e.preventDefault();
                e.stopPropagation();
            };
            ContextMenu.prototype.timeout = function (t) {
                t.applyStyle('hidden');
                t._view.remove();
            };
            Object.defineProperty(ContextMenu.prototype, "Target", {
                set: function (v) {
                    if (this.target) {
                        var ov = this.target instanceof HTMLElement ? this.target : this.target.View;
                        ov.removeEventListener('contextmenu', this);
                        this.target = null;
                    }
                    if (!v)
                        return;
                    var nv = v instanceof HTMLElement ? v : v.View;
                    nv.addEventListener('contextmenu', this);
                    this.target = v;
                },
                enumerable: true,
                configurable: true
            });
            return ContextMenu;
        }(UI.JControl));
        UI.ContextMenu = ContextMenu;
        var Gage = (function () {
            function Gage() {
            }
            Gage.prototype.initialize = function () {
            };
            Gage.deg2str = function (diam, n) {
                return n * (2 * Math.PI * diam) / 360;
            };
            Gage.createDashArray = function (diam, degs) {
                var t = '';
                var c = (2 * Math.PI * diam) / 360;
                for (var i = 0; i < degs.length; i++)
                    t += (i !== 0 ? ',' : '') + (c * degs[i]) + 'px';
            };
            return Gage;
        }());
        UI.Gage = Gage;
        var CostumizedShadow = (function (_super) {
            __extends(CostumizedShadow, _super);
            function CostumizedShadow(dom, data) {
                var _this_1 = _super.call(this, dom) || this;
                _this_1.data = data;
                _this_1.setDataContext(_this_1.data);
                return _this_1;
            }
            CostumizedShadow.prototype.setDataContext = function (data) { this.data = data; this._view.textContent = this._view.label = data ? data.toString() : ""; };
            CostumizedShadow.prototype.getDataContext = function () { return this.data; };
            CostumizedShadow.prototype.initialize = function () {
                this.setDataContext(this.data);
            };
            CostumizedShadow.prototype.getScop = function () { return this.data instanceof corelib_1.bind.Scop ? this.data : null; };
            return CostumizedShadow;
        }(TemplateShadow));
        UI.CostumizedShadow = CostumizedShadow;
        var CostumizedTemplate = (function (_super) {
            __extends(CostumizedTemplate, _super);
            function CostumizedTemplate() {
                return _super.call(this) || this;
            }
            CostumizedTemplate.prototype.CreateShadow = function (data) {
                return new CostumizedShadow(document.createElement('option'), data);
            };
            return CostumizedTemplate;
        }(Template));
        UI.CostumizedTemplate = CostumizedTemplate;
        var ComboBox = (function (_super) {
            __extends(ComboBox, _super);
            function ComboBox(dom, DataSource) {
                var _this_1 = _super.call(this, dom || document.createElement('select'), new CostumizedTemplate()) || this;
                _this_1.Source = DataSource;
                return _this_1;
            }
            return ComboBox;
        }(ListAdapter));
        UI.ComboBox = ComboBox;
        var TreeComboBox = (function (_super) {
            __extends(TreeComboBox, _super);
            function TreeComboBox(tree, getString) {
                var _this_1 = _super.call(this, document.createElement('select')) || this;
                _this_1.tree = tree;
                _this_1.getString = getString;
                return _this_1;
            }
            TreeComboBox.prototype.initialize = function () {
                this.Reset();
            };
            TreeComboBox.prototype.Reset = function () {
                var t = this.tree;
                t.Reset();
                var b = t.getBases();
                for (var i = 0; i < b.length; i++) {
                    this.add(this._view, b[i]);
                }
                this._view.innerHTML = this._view.innerHTML;
            };
            TreeComboBox.prototype.add = function (cont, node) {
                if (node.children.length === 0) {
                    var t = document.createElement('option');
                    t.label = this.getString(node.Value);
                    t.textContent = t.label;
                    node.param = t;
                    cont.appendChild(t);
                    return;
                }
                var pt = document.createElement('optgroup');
                pt.label = this.getString(node.Value);
                var t = document.createElement('option');
                t.label = this.getString(node.Value);
                t.textContent = t.label;
                node.param = [pt, t];
                for (var i = 0; i < node.children.length; i++)
                    this.add(pt, node.children[i]);
                cont.appendChild(pt);
            };
            return TreeComboBox;
        }(UI.JControl));
        UI.TreeComboBox = TreeComboBox;
        var help;
        (function (help) {
            function createHeader(hd, cols, orderBy) {
                for (var i = 0; i < cols.length; i++) {
                    var col = cols[i];
                    if (typeof col.Header === 'string')
                        col.Header = { Content: col.Header };
                    var b = generateCell(col.Header, 'th');
                    if (orderBy && col.Header && col.Header.OrderBy) {
                        var owner = {
                            handleEvent: function (e) {
                                this.method.Invoke.apply(this.method.Owner, [this.method.Owner, this.col.Header.OrderBy, this.col, this.view]);
                            }, method: orderBy, col: clone(col), view: b
                        };
                        b.addEventListener('click', owner);
                    }
                    hd.appendChild(b);
                }
                return hd;
            }
            help.createHeader = createHeader;
            function createTemplate(cols, tmp) {
                tmp = tmp || document.createElement('tr');
                for (var i = 0; i < cols.length; i++) {
                    var col = cols[i];
                    if (typeof col.Header === 'string')
                        col.Header = { Content: col.Header };
                    tmp.appendChild(generateCell(col.Cell, 'td'));
                }
                return tmp;
            }
            help.createTemplate = createTemplate;
            function generateCell(h, stype) {
                var type = HTMLTableCellElement;
                var hdr;
                if (h.Content == null)
                    h.Content = "";
                if (h.Content instanceof type) {
                    hdr = h.Content;
                }
                else if (h.Content instanceof Node) {
                    hdr = document.createElement(stype);
                    hdr.appendChild(h.Content);
                }
                else {
                    hdr = document.createElement(stype);
                    h.ContentAsHtml ? (hdr.innerHTML = String(h.Content)) : (hdr.innerText = String(h.Content));
                }
                if (h.Attributes)
                    applyAttrybute(hdr, h.Attributes);
                return hdr;
            }
            help.generateCell = generateCell;
            function applyAttrybute(hdr, h) {
                for (var n in h) {
                    var isb = false;
                    var o = h[n];
                    if (typeof o === 'object') {
                        if (hdr.hasAttribute(n)) {
                            var t = o.values.slice();
                            t.unshift(hdr.getAttribute(n));
                            hdr.setAttribute(n, t.join(o.spliter));
                        }
                        else
                            hdr.setAttribute(n, o.values.join(o.spliter));
                    }
                    else
                        hdr.setAttribute(n, o);
                }
            }
        })(help = UI.help || (UI.help = {}));
        var _Grid = (function () {
            function _Grid() {
                UI.Grid;
            }
            return _Grid;
        }());
        UI._Grid = _Grid;
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var Popup = (function (_super) {
            __extends(Popup, _super);
            function Popup(target) {
                var _this_1 = _super.call(this, document.createElement('div')) || this;
                _this_1.target = target;
                return _this_1;
            }
            Popup.prototype.initialize = function () {
            };
            Popup.prototype.Close = function (valid) {
                this.applyStyle('ihide');
            };
            Popup.prototype.Open = function (acb) {
                if (this._isOpen)
                    return;
                this._isOpen = false;
                var l = this._view;
                l.classList.remove('ihide');
                var v = acb.View.getBoundingClientRect();
                l.style.left = v.left + "px";
                l.style.top = v.top + v.height + "px";
                l.style.width = v.width + "px";
                acb.Box.Text = (acb.Value || '').toString();
                acb.IsChanged = false;
            };
            return Popup;
        }(UI.JControl));
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var ACBManager = (function () {
            function ACBManager() {
            }
            ACBManager.prototype.IsOpen = function (v) {
                console.log('popup ' + (v ? 'open' : 'close'));
                this._isopen = v;
            };
            ACBManager.prototype.invoke = function (c) {
                if (0) {
                    var e = c.e;
                    var kc = e.keyCode;
                    if (!this._isopen) {
                        if (kc === 9 || kc === 13)
                            return c.Result = UI.KeyboardControllerResult.Release || UI.KeyboardControllerResult.ByPass;
                        if (kc === 27) {
                            this.box.Blur();
                            return UI.KeyboardControllerResult.Release;
                        }
                        else if (kc === UI.Keys.Delete)
                            del(e);
                        else if (isControlKey(kc))
                            return UI.KeyboardControllerResult.Handled;
                        else
                            return this.Open(c);
                    }
                }
                document.title = document.title !== "A" ? "A" : "B";
            };
            ACBManager.prototype.onResume = function (e) {
                console.log('Resume');
                return true;
            };
            ACBManager.prototype.onPause = function (e) {
                console.log('Pause');
                return true;
            };
            ACBManager.prototype.onStop = function (e) {
                console.log('Stop');
                return true;
            };
            ACBManager.prototype.FocuseOn = function (box) {
                this.box = box;
                UI.Desktop.Current.KeyboardManager.GetController(this);
            };
            ACBManager.prototype.Blur = function () {
                UI.Desktop.Current.KeyboardManager.Release(this);
            };
            ACBManager.prototype.del = function (e) {
                if (e.shiftKey) {
                    _ithis.Value = null;
                    Close(true);
                }
            };
            ACBManager.prototype.Close = function (e) {
            };
            ACBManager.prototype.Open = function (e) {
            };
            return ACBManager;
        }());
        var list;
        var filtred;
        var sf = new Filters_1.filters.list.LStringFilter();
        var tmp = document.createElement('li');
        tmp.innerHTML = '<div db-job="tostring"></div>';
        var defTemplate = UI.Template.ToTemplate(tmp, true);
        var fisc;
        var tm;
        var lto = false;
        function keyup() {
            list.SelectedIndex--;
            var sc = list.SelectedChild;
            if (sc)
                sc.View.scrollIntoView(false);
        }
        function keydown() {
            list.SelectedIndex++;
            var sc = list.SelectedChild;
            if (sc)
                sc.View.scrollIntoView(false);
        }
        function keyleft(e, acb) {
            list.SelectedIndex -= 4;
            var sc = list.SelectedChild;
            if (sc)
                sc.View.scrollIntoView(false);
        }
        function keyright(e, acb) {
            list.SelectedIndex += 4;
            var sc = list.SelectedChild;
            if (sc)
                sc.View.scrollIntoView(false);
        }
        function pageDown() {
            pager.next();
        }
        function pageUp() {
            pager.previouse();
        }
        function del(e) {
            if (!isclosed)
                return others(e);
            if (e.shiftKey) {
                _ithis.Value = null;
                Close(true);
            }
        }
        function enter() {
            if (isclosed)
                return;
            fisc = false;
            return Close(true);
        }
        function esc() { fisc = false; Close(false); }
        function isControlKey(k) {
            if (k === 8)
                return false;
            return k < 32 || (k > 126 && k < 160);
        }
        function others(e) {
            if (isControlKey(e.keyCode))
                return;
            var lt = tm;
            var nt = Date.now();
            if (lto)
                return;
            setTimeout(function () {
                corelib_1.helper.TryCatch(filtred, function (filters) { this.Filter.Patent = new filters.list.StringPatent(_ithis.Box.Text || ''); }, null, [Filters_1.filters]);
                lto = false;
                pager.update();
            }, 200);
            lto = true;
        }
        function initPopup() {
            var ex = document.createElement('ul');
            ex.classList.add('popup', 'ihide');
            list = new UI.ListAdapter(ex, defTemplate);
            list.OnInitialized = function (list) { return list.Source = pager.List; };
            list.Parent = UI.Desktop.Current;
            document.body.appendChild(list.View);
        }
        var lt = Date.now();
        filtred = new corelib_1.collection.ExList(null);
        filtred.Filter = sf;
        var pager = Filters_1.filters.list.indexdFilter(filtred, 15);
        initPopup();
        list.OnItemSelected.On = function (s, i, t) {
            if (i == -1)
                return;
            fisc = true;
            corelib_1.thread.Dispatcher.call(_ithis.Box.View, _ithis.Box.View.focus);
        };
        list.Content.addEventListener('click', function (s, e, p) {
            fisc = true;
            if (lt - (lt = Date.now()) < -500)
                return;
            else
                lt = 0;
            _ithis.Value = list.SelectedItem || _ithis.Value;
            fisc = false;
            Close(false);
        }, list);
        list.Content.View.addEventListener('pointerenter', function () { return clearTimeout(to); });
        list.Content.View.onmouseleave = function (e) { if (!fisc)
            to = setTimeout(Close, 500, e); fisc = false; };
        var fns = {
            40: keydown,
            38: keyup,
            37: keyleft,
            39: keyright,
            13: enter,
            27: esc,
            33: pageUp,
            34: pageDown,
        };
        function Init(acb) {
            clearTimeout(to);
            UI.Desktop.Current.GetKeyControl(null, _onkeydown, [acb]);
            if (_ithis !== acb)
                resetEvents(acb);
        }
        function resetEvents(acb) {
            acb.IsChanged = false;
            _ithis = acb;
            filtred.Source = acb.DataSource;
            corelib_1.thread.Dispatcher.call(null, function () { filtred.Filter.Patent = new Filters_1.filters.list.StringPatent(acb.Box.Text); });
            if (okd)
                okd.Dispose();
            if (ofo)
                ofo.Dispose();
            tm = Date.now();
            lto = false;
            UI.Desktop.Current.GetKeyControl(null, _onkeydown, [acb]);
            ofo = _ithis.Box.addEventListener('focusout', onfocusout, null);
        }
        function relocate(acb) {
            var l = list.View;
            var v = acb.View.getBoundingClientRect();
            l.style.left = v.left + "px";
            l.style.top = v.top + v.height + "px";
            l.style.width = v.width + "px";
        }
        function onfocusout(s, e, acb) {
            clearTimeout(to);
            to = setTimeout(focusOutImediate, 500, false);
            fisc = false;
        }
        function focusOutImediate(valid) {
            UI.Desktop.Current.ReleaseKeyControl();
            Close(valid);
        }
        function _onkeydown(e, acb) {
            relocate(acb);
            var kc = e.keyCode;
            if (isclosed)
                if (kc === 9 || kc === 13)
                    return acb.View.hasAttribute('handleClose') ? UI.KeyboardControllerResult.Handled : UI.KeyboardControllerResult.Release || UI.KeyboardControllerResult.ByPass;
                else if (kc === 27) {
                    acb.View.blur();
                    return UI.KeyboardControllerResult.Release;
                }
                else if (kc === UI.Keys.Delete)
                    return del(e);
                else if (isControlKey(kc))
                    return UI.KeyboardControllerResult.Handled;
                else
                    return Open(acb, true);
            else if (kc == 9) {
                fisc = false;
                Close(false);
                return UI.KeyboardControllerResult.Release;
            }
            return (fns[e.keyCode] || others)(e, acb) || UI.KeyboardControllerResult.Handled;
        }
        function Open(acb, forceOpen) {
            Init(acb);
            if (acb.AutoPopup || forceOpen) {
                isclosed = false;
                list.Template = acb.Template || defTemplate;
                try {
                    list.SelectedIndex = 0;
                }
                catch (e) {
                }
                var l = list.View;
                l.classList.remove('ihide');
                relocate(acb);
            }
            return UI.KeyboardControllerResult.Handled;
        }
        function _Open(acb, forceOpen) {
            Init(acb);
            if (acb.AutoPopup || forceOpen) {
                isclosed = false;
                try {
                    list.SelectedIndex = 0;
                }
                catch (e) {
                }
                var l = list.View;
                l.classList.remove('ihide');
                relocate(acb);
            }
        }
        var isclosed = true;
        var to;
        var okd;
        var ofo;
        var _ithis;
        var zindex = 100000;
        function Close(valid) {
            if (fisc) {
                fisc = false;
                return;
            }
            isclosed = true;
            list.applyStyle('ihide');
            if (valid == true)
                _ithis.Value = list.SelectedItem;
            if (valid) {
                _ithis.Box.Text = (_ithis.Value || '').toString();
            }
            else {
                if (_ithis.Value != null)
                    _ithis.Box.Text = _ithis.Value.toString();
                else {
                    _ithis.Box.Text = "";
                }
            }
            return _ithis.View.hasAttribute('handleClose') ? UI.KeyboardControllerResult.Handled : UI.KeyboardControllerResult.ByPass;
        }
        var AutoCompleteBox = (function (_super) {
            __extends(AutoCompleteBox, _super);
            function AutoCompleteBox(input) {
                var _this_1 = _super.call(this, input) || this;
                _this_1.dataSource = new corelib_1.collection.List(Object);
                input.setAttribute('autocomplete', 'off');
                return _this_1;
            }
            Object.defineProperty(AutoCompleteBox.prototype, "DataSource", {
                get: function () { return this.dataSource; },
                set: function (d) {
                    if (d === this.dataSource)
                        return;
                    this.IsChanged;
                    this.dataSource.Clear();
                    if (d)
                        this.dataSource.AddRange(d.AsList());
                },
                enumerable: true,
                configurable: true
            });
            AutoCompleteBox.prototype.initialize = function () {
                var _this_1 = this;
                _super.prototype.initialize.call(this);
                this.Box.View.addEventListener('focusin', function (e) { return Init(_this_1); });
            };
            AutoCompleteBox.prototype.Blur = function () {
            };
            return AutoCompleteBox;
        }(UI.ActionText));
        UI.AutoCompleteBox = AutoCompleteBox;
        var ProxyAutoCompleteBox = (function () {
            function ProxyAutoCompleteBox(Box, source) {
                this.Box = Box;
                this.callback = [];
                Box.View.setAttribute('autocomplete', 'off');
                this.DataSource = source;
            }
            ProxyAutoCompleteBox.prototype.Blur = function () {
                this.Box.Blur();
            };
            ProxyAutoCompleteBox.prototype.OnValueChanged = function (owner, invoke) {
                this.callback.push({ Invoke: invoke, Owner: owner });
            };
            Object.defineProperty(ProxyAutoCompleteBox.prototype, "View", {
                get: function () { return this.Box.View; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProxyAutoCompleteBox.prototype, "Value", {
                get: function () { return this._value; },
                set: function (v) {
                    var ov = this._value;
                    if (v == ov)
                        return;
                    this._value = v;
                    this.Box.Text = v ? v.toString() : '';
                    for (var _i = 0, _a = this.callback; _i < _a.length; _i++) {
                        var t = _a[_i];
                        t.Invoke.call(t.Owner, this, ov, v);
                    }
                },
                enumerable: true,
                configurable: true
            });
            ProxyAutoCompleteBox.prototype.initialize = function () {
                var _this_1 = this;
                this.Box.View.addEventListener('focusin', function (e) { return Init(_this_1); });
                return this;
            };
            return ProxyAutoCompleteBox;
        }());
        UI.ProxyAutoCompleteBox = ProxyAutoCompleteBox;
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var Paginator = (function (_super) {
            __extends(Paginator, _super);
            function Paginator(countPerPage, dom, full) {
                var _this_1 = _super.call(this, dom || document.createElement('div')) || this;
                _this_1.countPerPage = countPerPage;
                _this_1.full = full;
                _this_1.paginationFilter = new Filters_1.filters.list.SubListFilter();
                _this_1.paginationFilter.Patent = new Filters_1.filters.list.SubListPatent(0, _this_1.countPerPage - 1);
                if (full) {
                    var c = new corelib_1.collection.ExList(Object);
                    c.Filter = _this_1.paginationFilter;
                    _this_1.set(Paginator.DPOutput, c);
                }
                return _this_1;
            }
            Object.defineProperty(Paginator.prototype, "Filter", {
                get: function () { return this.paginationFilter; },
                enumerable: true,
                configurable: true
            });
            Paginator.prototype.initialize = function () {
                this.applyStyle('paginator');
                _super.prototype.Add.call(this, this.content = new UI.Div().applyStyle('fitHeight'));
                _super.prototype.Add.call(this, this.paginator = new UI.BiPagination());
                this.paginator.OnPropertyChanged(UI.BiPagination.DPIndex, this.whenIndexChanged, this);
                this.paginationFilter.Patent = new Filters_1.filters.list.SubListPatent(0, this.countPerPage - 1);
            };
            Object.defineProperty(Paginator.prototype, "Content", {
                set: function (v) {
                    if (this._cnt)
                        this.content.Remove(this._cnt, true);
                    this._cnt = v;
                    if (v)
                        this.content.Add(v);
                },
                enumerable: true,
                configurable: true
            });
            Paginator.prototype.whenIndexChanged = function (b, e) {
                this.paginationFilter.Patent = new Filters_1.filters.list.SubListPatent(e._new * this.countPerPage, (e._new + 1) * this.countPerPage - 1);
            };
            Paginator.prototype.OnIndexChanged = function (ev) {
                return this.paginator.OnPropertyChanged(UI.BiPagination.DPIndex, ev, this);
            };
            Paginator.prototype.OffIndexChanged = function (b) {
                return this.paginator.removeEvent(UI.BiPagination.DPIndex, b);
            };
            Object.defineProperty(Paginator.prototype, "Max", {
                get: function () { return this.paginator.Max; },
                set: function (v) { this.paginator.Max = v; },
                enumerable: true,
                configurable: true
            });
            Paginator.prototype.BindMaxToSourceCount = function (x) {
                this.bm2sc = x.OnPropertyChanged(corelib_1.collection.ExList.DPCount, function (s, e) { this.paginator.Max = Math.floor(e._new / this.countPerPage); }, this);
                this.paginator.Max = Math.floor(x.Count / this.countPerPage);
            };
            Paginator.prototype.UnbindMaxFromSourceCount = function (x) {
                if (this.bm2sc)
                    x.removeEvent(corelib_1.collection.List.DPCount, this.bm2sc);
            };
            Paginator.prototype.Next = function () {
                this.paginator.Index++;
            };
            Paginator.prototype.Previous = function () {
                this.paginator.Index--;
            };
            Paginator.prototype.OnKeyCombined = function (e, v) {
                var s = this.Content;
                if (s)
                    return s.OnKeyCombined(e, v);
            };
            Paginator.prototype.OnKeyDown = function (e) {
                var c = this._cnt;
                if (c)
                    if (c.OnKeyDown(e))
                        return true;
                switch (e.keyCode) {
                    case UI.Keys.Left:
                        this.Previous();
                        return true;
                    case UI.Keys.Right:
                        this.Next();
                        return true;
                }
                return _super.prototype.OnKeyDown.call(this, e);
            };
            Object.defineProperty(Paginator.prototype, "Output", {
                get: function () { return this.get(Paginator.DPOutput); },
                enumerable: true,
                configurable: true
            });
            Paginator.prototype.OnInputChanged = function (e) {
                if (e._old && this.bindInputToMax)
                    e._old.removeEvent(corelib_1.collection.List.DPCount, this.bindInputToMax);
                this.bindInputToMax = null;
                this.Output.Source = e._new;
                if (e._new) {
                    this.bindInputToMax = e._new.OnPropertyChanged(corelib_1.collection.ExList.DPCount, function (s, e) { this.paginator.Max = Math.floor(e._new / this.countPerPage); }, this);
                    this.paginator.Max = Math.floor(e._new.Count / this.countPerPage);
                }
            };
            Object.defineProperty(Paginator.prototype, "InputScop", {
                set: function (scop) {
                    var _this_1 = this;
                    if (this.bindInputToMax) {
                        this.bindScopToInput.Owner.removeEvent(corelib_1.bind.Scop.DPValue, this.bindScopToInput);
                        this.bindScopToInput = null;
                    }
                    this.bindScopToInput = scop.OnPropertyChanged(corelib_1.bind.Scop.DPValue, function (s, e) {
                        _this_1.Input = e._new;
                    }, scop);
                    this.Input = scop.Value;
                },
                enumerable: true,
                configurable: true
            });
            Paginator.__fields__ = function () { return [this.DPInput, this.DPOutput]; };
            Paginator.createPaginator = function (adapter, dataSource, max) {
                if (max === void 0) { max = 10; }
                var paginator = new UI.Paginator(max, undefined, true);
                paginator.OnInitialized = function (p) {
                    adapter.OnInitialized = function (l) {
                        p.Input = dataSource;
                        l.Source = p.Output;
                    };
                    paginator.Content = adapter;
                };
                paginator.OnPropertyChanged(this.DPOutput, function (s, e) {
                    adapter.Source = e._new;
                });
                return paginator;
            };
            Paginator.DPInput = corelib_1.bind.DObject.CreateField("Input", corelib_1.collection.List, null, Paginator.prototype.OnInputChanged);
            Paginator.DPOutput = corelib_1.bind.DObject.CreateField("Output", corelib_1.collection.ExList);
            return Paginator;
        }(UI.JControl));
        UI.Paginator = Paginator;
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var Grid = (function (_super) {
            __extends(Grid, _super);
            function Grid() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Grid.prototype.initialize = function () {
                this._view.classList.add('grid');
            };
            Grid.prototype.createRule = function () {
                var e = document.styleSheets.item(document.styleSheets.length - 1);
            };
            return Grid;
        }(UI.JControl));
        UI.Grid = Grid;
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var StrechyButtonItemData = (function (_super) {
            __extends(StrechyButtonItemData, _super);
            function StrechyButtonItemData(Title) {
                var _this_1 = _super.call(this) || this;
                _this_1.Title = Title;
                return _this_1;
            }
            StrechyButtonItemData.__fields__ = function () { return [this.DPTitle, this.DPIcon]; };
            StrechyButtonItemData.DPTitle = corelib_1.bind.DObject.CreateField('Title', String, null);
            StrechyButtonItemData.DPIcon = corelib_1.bind.DObject.CreateField('Icon', String, null);
            return StrechyButtonItemData;
        }(corelib_1.bind.DObject));
        UI.StrechyButtonItemData = StrechyButtonItemData;
        var StrechyButton = (function (_super) {
            __extends(StrechyButton, _super);
            function StrechyButton(__data) {
                var _this_1 = _super.call(this, 'controls.StretchyButton', 'controls.StretchyButtonItem') || this;
                _this_1.__data = __data;
                return _this_1;
            }
            StrechyButton.prototype.initialize = function () {
                this.triggerButton = $('.cd-nav-trigger', this._view)[0];
                ;
                this.triggerButton.addEventListener('click', this);
                this.Source = this.__data;
            };
            StrechyButton.RegisterEvents = function (enable) {
                if (this.EventCloseIsRegistered == enable)
                    return;
                if (!enable)
                    document.removeEventListener('click', this.handleEvent);
                else
                    document.addEventListener('click', this.handleEvent);
                this.EventCloseIsRegistered = enable;
            };
            StrechyButton.CloseAll = function (enableEvent) {
                for (var i = 0; i < StrechyButton.OpenedStrechyButtons.length; i++) {
                    var x = StrechyButton.OpenedStrechyButtons[i];
                    x.simpleClose();
                }
                StrechyButton.OpenedStrechyButtons = [];
                this.RegisterEvents(enableEvent);
            };
            StrechyButton.prototype.Open = function () {
                StrechyButton.CloseAll(true);
                StrechyButton.OpenedStrechyButtons = [this];
                this.simpleOpen();
            };
            StrechyButton.prototype.Close = function () {
                StrechyButton.CloseAll(false);
            };
            StrechyButton.prototype.simpleClose = function () {
                this.IsOpen = false;
                this._view.classList.remove('nav-is-visible');
                this._view.classList.add('cd-stretchy-nav-collapsed');
            };
            StrechyButton.prototype.simpleOpen = function () {
                this.IsOpen = true;
                this._view.classList.add('nav-is-visible');
                this._view.classList.remove('cd-stretchy-nav-collapsed');
            };
            StrechyButton.handleEvent = function (event) {
                var target = event.target;
                var classList = target.classList;
                if (classList.contains('cd-nav-trigger'))
                    return;
                if (classList.contains('cd-nav-trigger') || target.tagName === 'SPAN')
                    return;
                StrechyButton.CloseAll(false);
            };
            StrechyButton.prototype.handleEvent = function (event) {
                event.preventDefault();
                if (this.IsOpen)
                    this.Close();
                else
                    this.Open();
            };
            StrechyButton.OpenedStrechyButtons = [];
            return StrechyButton;
        }(UI.ListAdapter));
        UI.StrechyButton = StrechyButton;
        var UISearch = (function (_super) {
            __extends(UISearch, _super);
            function UISearch(el) {
                var _this_1 = _super.call(this, el) || this;
                _this_1.inputEl = el.querySelector('form > input.sb-search-input');
                return _this_1;
            }
            UISearch.prototype.initialize = function () {
                var _this_1 = this;
                var initSearchFn = function (ev) { return _this_1.validate(ev); };
                this._view.addEventListener('click', initSearchFn);
                this._view.addEventListener('touchstart', initSearchFn);
                this.inputEl.addEventListener('click', function (ev) { ev.stopPropagation(); });
                this.inputEl.addEventListener('touchstart', function (ev) { ev.stopPropagation(); });
                this.inputEl.addEventListener('keydown', this);
            };
            UISearch.prototype.handleEvent = function (e) {
                if (e.keyCode == 13) {
                    this.validate(e);
                }
                else if (e.keyCode == 27) {
                    if (this.inputEl.value == "")
                        this.close();
                    else {
                        this.inputEl.value = "";
                        e.stopImmediatePropagation();
                        e.preventDefault();
                    }
                }
            };
            UISearch.prototype.validate = function (ev) {
                ev.stopPropagation();
                this.inputEl.value = this.inputEl.value.trim();
                if (!this._view.classList.contains('sb-search-open')) {
                    ev.preventDefault();
                    this.open();
                }
                else if (/^\s*$/.test(this.inputEl.value)) {
                    ev.preventDefault();
                    this.close();
                }
                else if (this.OnSearch)
                    this.OnSearch(this.inputEl.value);
            };
            UISearch.prototype.open = function () {
                var self = this;
                this.applyStyle('sb-search-open');
                this.IsOpen = true;
                this.inputEl.focus && this.inputEl.focus();
                var bodyFn = function (ev) {
                    self.close();
                    this.removeEventListener('click', bodyFn);
                    this.removeEventListener('touchstart', bodyFn);
                };
                document.addEventListener('click', bodyFn);
                document.addEventListener('touchstart', bodyFn);
            };
            UISearch.prototype.close = function () {
                this.inputEl.blur();
                this.disapplyStyle('sb-search-open');
                this.IsOpen = false;
            };
            return UISearch;
        }(UI.JControl));
        UI.UISearch = UISearch;
        function showSPTooltips(v) {
            corelib_1.basic.Settings.set('show-sp-tooltips', v);
            if (v)
                document.body.classList.add('sp-show');
            else
                document.body.classList.remove('sp-show');
        }
        UI.showSPTooltips = showSPTooltips;
        showSPTooltips(corelib_1.basic.Settings.get('show-sp-tooltips'));
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var Modals;
        (function (Modals) {
            function CreateGlyph(dom, icon, title, type, attri) {
                var t = document.createElement(dom);
                t.classList.add('btn', 'btn-' + type, 'glyphicon', 'glyphicon-' + icon);
                t.textContent = '  ' + title;
                for (var i in attri)
                    t.setAttribute(i, attri[i]);
                return t;
            }
            Modals.CreateGlyph = CreateGlyph;
            var ModalEditorEventArgs = (function () {
                function ModalEditorEventArgs() {
                }
                return ModalEditorEventArgs;
            }());
            Modals.ModalEditorEventArgs = ModalEditorEventArgs;
            var BasicModalEditor = (function (_super) {
                __extends(BasicModalEditor, _super);
                function BasicModalEditor() {
                    var _this_1 = _super !== null && _super.apply(this, arguments) || this;
                    _this_1.scop = new corelib_1.bind.ValueScop(null, 3);
                    return _this_1;
                }
                BasicModalEditor.__fields__ = function () { return [this.DPIsEditable]; };
                Object.defineProperty(BasicModalEditor.prototype, "Data", {
                    get: function () {
                        return this.scop.Value;
                    },
                    set: function (v) {
                        this.scop.Value = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                BasicModalEditor.prototype.OnKeyDown = function (e) {
                    return (this.Content && this.Content.OnKeyDown(e)) || _super.prototype.OnKeyDown.call(this, e);
                };
                BasicModalEditor.DPIsEditable = corelib_1.bind.DObject.CreateField("IsEditable", Boolean, true);
                return BasicModalEditor;
            }(UI.Modal));
            Modals.BasicModalEditor = BasicModalEditor;
            var EModalEditer = (function (_super) {
                __extends(EModalEditer, _super);
                function EModalEditer(templateName, allowEditNullVaue) {
                    var _this_1 = _super.call(this) || this;
                    _this_1.templateName = templateName;
                    _this_1.allowEditNullVaue = allowEditNullVaue;
                    return _this_1;
                }
                EModalEditer.prototype.initialize = function () {
                    _super.prototype.initialize.call(this);
                    this.Content = new UI.TControl(this.templateName, this.scop);
                };
                EModalEditer.prototype.edit = function (data, isNew, action, editable) {
                    if (editable === void 0) { editable = true; }
                    if (!data && !this.allowEditNullVaue)
                        return;
                    if (this.IsOpen || this._isOpen)
                        throw new $Error("The editor is Open. Close it first .");
                    this._isOpen = true;
                    this.IsNew = isNew;
                    if (data !== undefined)
                        this.scop.Value = data;
                    this.backupData = data && data.CreateBackup();
                    this.action = action;
                    this.IsEditable = editable;
                    _super.prototype.Open.call(this);
                    this.SetVisible(UI.MessageResult.ok, editable);
                };
                EModalEditer.prototype.Open = function () {
                    this.edit(this.scop.Value, this.IsNew, this.action);
                };
                EModalEditer.prototype.Close = function (msg) {
                    var e = new UI.MessageEventArgs(this, msg, UI.MessageResult[msg]);
                    var data = this.scop.Value;
                    var e1 = {
                        Data: data, BackupData: this.backupData, E: e, Editor: this, IsDataChanged: data && data.IsPropertiesChanged(this.backupData),
                        IsNew: this.IsNew, Error: corelib_1.basic.DataStat.None
                    };
                    corelib_1.reflection.Invoke(this.action, this, [this, e1]);
                    if (data && this.backupData && !e1.CommitOrBackupHandled)
                        if (e.msg == 'ok' && this.IsEditable)
                            data.Commit(e1.BackupData);
                        else
                            data.Rollback(e1.BackupData);
                    var r = this.OnClosed.PInvok('test', [e], this);
                    if (!e.stayOpen)
                        this.silentClose();
                };
                EModalEditer.prototype.NativeClose = function (msg, commit) {
                    var e = new UI.MessageEventArgs(this, msg, UI.MessageResult[msg]);
                    var t = this.scop.Value;
                    if (t)
                        if (this.backupData && commit)
                            t.Commit(this.backupData);
                        else
                            t.Rollback(this.backupData);
                    this.OnClosed.PInvok('test', [e], this);
                    if (!e.stayOpen)
                        this.silentClose();
                };
                EModalEditer.prototype.silentClose = function () {
                    this._isOpen = false;
                    _super.prototype.silentClose.call(this);
                };
                return EModalEditer;
            }(BasicModalEditor));
            Modals.EModalEditer = EModalEditer;
            var ModalEditer = (function (_super) {
                __extends(ModalEditer, _super);
                function ModalEditer(templateName) {
                    var _this_1 = _super.call(this) || this;
                    _this_1.templateName = templateName;
                    return _this_1;
                }
                ModalEditer.prototype.initialize = function () {
                    var _this_1 = this;
                    _super.prototype.initialize.call(this);
                    this.Content = new UI.TControl(this.templateName, this.scop);
                    this.OnClosed.On = function (e) {
                        var t = _this_1.scop.Value;
                        var action = false;
                        if (e.msg === 'ok' && _this_1.IsEditable === true) {
                            if (_this_1.ChangedStatControled || t.IsPropertiesChanged(_this_1.backupData)) {
                                if (_this_1.Action.OnSuccess)
                                    action = _this_1.Action.OnSuccess.Invoke.call(_this_1.Action.OnSuccess.Owner, t, _this_1.IsNew, e);
                                if (!action)
                                    t.Commit(_this_1.backupData);
                                _this_1.IsNew = false;
                                return;
                            }
                        }
                        if (_this_1.Action.OnError)
                            action = _this_1.Action.OnError.Invoke.call(_this_1.Action.OnError.Owner, t, _this_1.IsNew, e);
                        if (!action)
                            t.Rollback(_this_1.backupData);
                    };
                };
                ModalEditer.prototype.edit = function (product, isNew, action, editable) {
                    if (editable === void 0) { editable = true; }
                    if (!product)
                        return;
                    this.IsNew = isNew;
                    if (product !== undefined)
                        this.scop.Value = product;
                    this.backupData = product.CreateBackup();
                    this.Action = action || emptyAction;
                    this.IsEditable = editable;
                    _super.prototype.Open.call(this);
                    this.SetVisible(UI.MessageResult.ok, editable);
                };
                ModalEditer.prototype.Open = function () {
                    this.edit(this.scop.Value, this.IsNew, this.Action);
                };
                return ModalEditer;
            }(BasicModalEditor));
            Modals.ModalEditer = ModalEditer;
            var emptyAction = {};
            var EditorAction = (function () {
                function EditorAction(proxyAction, callback) {
                    this.proxyAction = proxyAction;
                    this.callback = callback;
                    this.OnSuccess = { Owner: this, Invoke: this.onSuccess };
                    this.OnError = { Owner: this, Invoke: this.onError };
                }
                EditorAction.prototype.invoke = function (x, p, isNew) {
                    if (x && x.Invoke)
                        return x.Invoke.call(x.Owner, p, isNew, this.callback);
                    return undefined;
                };
                EditorAction.prototype.onSuccess = function (p, isNew) {
                    return this.invoke(this.proxyAction.OnSuccess, p, isNew);
                };
                EditorAction.prototype.onError = function (p, isNew) {
                    return this.invoke(this.proxyAction.OnError, p, isNew);
                };
                EditorAction.prototype.Clone = function (callback) {
                    return new EditorAction(this.proxyAction, callback);
                };
                EditorAction.Create = function (_this, onSuccess, onError, defaltCallback) {
                    if (!onSuccess && !onError)
                        return undefined;
                    var t = {};
                    if (onSuccess)
                        t.OnSuccess = { Owner: _this, Invoke: onSuccess };
                    if (onError)
                        t.OnError = { Owner: _this, Invoke: onError };
                    return new EditorAction(t, defaltCallback);
                };
                return EditorAction;
            }());
            Modals.EditorAction = EditorAction;
        })(Modals = UI.Modals || (UI.Modals = {}));
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var Modals;
        (function (Modals) {
            var ModalList = (function (_super) {
                __extends(ModalList, _super);
                function ModalList(source, tableTmplate, itemTemplate, datas, asScopic, isMatch) {
                    var _this_1 = _super.call(this) || this;
                    _this_1.source = source;
                    _this_1.tableTmplate = tableTmplate;
                    _this_1.itemTemplate = itemTemplate;
                    _this_1.datas = datas;
                    _this_1.asScopic = asScopic;
                    _this_1.isMatch = isMatch;
                    return _this_1;
                }
                ModalList.IsMatch = function (p, item) {
                    return p.Check(item);
                };
                Object.defineProperty(ModalList.prototype, "IsMatch", {
                    get: function () { return this.isMatch; },
                    set: function (v) {
                        if (this._exList) {
                            var flt = this._exList.Filter;
                            if (flt._isMatch === v)
                                return;
                            flt._isMatch = v;
                            this._exList.Reset();
                        }
                        this.isMatch = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                ModalList.prototype.initialize = function () {
                    var _this_1 = this;
                    _super.prototype.initialize.call(this);
                    var l = this.Datacontext = new UI.ListAdapter(this.tableTmplate, this.itemTemplate, this.datas, this.asScopic);
                    var p;
                    l.AcceptNullValue = true;
                    if (this.isMatch)
                        this.createFilter();
                    var r1 = new UI.Div().applyStyle('row');
                    var r2 = new UI.Div().applyStyle('row');
                    var t = new UI.ActionText();
                    t.AutoAction = UI.SearchActionMode.Instantany;
                    var c1 = new UI.Div().applyStyle('col-md-12', 'col-xs-12', 'col-sm-12');
                    t.View.style.maxWidth = 'none';
                    t.View.style.width = '100%';
                    c1.View.style.padding = '0';
                    c1.Add(t);
                    r1.Add(c1);
                    if (!this.asScopic) {
                        this._exList = corelib_1.collection.ExList.New(this.source, new Filters_1.filters.list.BoundStringFilter());
                        this.paginator = p = ModalList.createPaginator(l, this._exList);
                        r2.Add(p);
                    }
                    else {
                        r2.Add(l);
                    }
                    this.Add(r1);
                    this.Add(r2);
                    t.OnAction.On = function (l, o, n) {
                        _this_1._exList.Filter.Patent = new Filters_1.filters.list.StringPatent(n);
                    };
                    l.OnItemSelected.On = function (l, i, t) { return _this_1.SelectedItem = t && t.getDataContext(); };
                };
                ModalList.createPaginator = function (adapterView, source) {
                    var paginator = new UI.Paginator(12, undefined, true);
                    source = source || adapterView.Source;
                    paginator.OnInitialized = function (p) {
                        adapterView.OnInitialized = function (l) { return adapterView.Source = p.Output; };
                        paginator.Content = adapterView;
                        paginator.Input = source;
                    };
                    return paginator;
                };
                Object.defineProperty(ModalList.prototype, "SelectedItem", {
                    get: function () { return this.Datacontext && this.Datacontext.SelectedItem; },
                    set: function (v) { this.Datacontext && this.Datacontext.SelectItem(v); },
                    enumerable: true,
                    configurable: true
                });
                ModalList.prototype.show = function (onc, list) {
                    var _this_1 = this;
                    if (list)
                        this.OnInitialized = function (n) { return _this_1._exList.Source = list; };
                    this.onc = onc;
                    _super.prototype.Open.call(this);
                };
                Object.defineProperty(ModalList.prototype, "Source", {
                    set: function (l) {
                        this.OnInitialized = function (n) { return n._exList.Source = l; };
                    },
                    enumerable: true,
                    configurable: true
                });
                ModalList.prototype.Open = function () { };
                ModalList.prototype.OnKeyCombined = function (e, v) {
                    return this.paginator.OnKeyCombined(e, v);
                };
                ModalList.prototype.OnKeyDown = function (e) {
                    if (!this.paginator.OnKeyDown(e))
                        return _super.prototype.OnKeyDown.call(this, e);
                };
                ModalList.prototype.Close = function (msg) {
                    var c = this.onc;
                    var s = this.SelectedItem;
                    this.onc = null;
                    _super.prototype.Close.call(this, msg);
                    try {
                        this.Datacontext.SelectedIndex = -1;
                    }
                    catch (e) {
                    }
                    if (c)
                        c.call(this, this, s, msg);
                };
                ModalList.prototype.createFilter = function () {
                    var _this_1 = this;
                    var v = this.Datacontext.Content.View;
                    this._exList = new corelib_1.collection.ExList(Object);
                    this._exList.Filter = new corelib_1.utils.CostumeFilter(this.IsMatch);
                    var spec = corelib_1.basic.New() + '';
                    v.setAttribute('db-filter', spec);
                    corelib_1.bind.RegisterFilter({
                        Name: spec, BindingMode: 1, CreateNew: function (p, f, s) {
                            return new Filters_1.filters.scopic.ListFilter(p, 1, null, _this_1._exList);
                        }
                    });
                };
                return ModalList;
            }(UI.Modal));
            Modals.ModalList = ModalList;
        })(Modals = UI.Modals || (UI.Modals = {}));
    })(UI = exports.UI || (exports.UI = {}));
    (function (UI) {
        var TabControl = (function (_super) {
            __extends(TabControl, _super);
            function TabControl(name, caption, items) {
                var _this_1 = _super.call(this, name, caption) || this;
                _this_1.Items = new corelib_1.collection.List(Object, items);
                return _this_1;
            }
            TabControl.__fields__ = function () { return [this.DPItems, this.DPSelectedItem, this.DPTabContent, this.DPTabNav]; };
            TabControl.prototype.initialize = function () {
                var _this_1 = this;
                _super.prototype.initialize.call(this);
                this.TabNav = new UI.ListAdapter('tabcontrol.navTabsItem', undefined);
                this.TabContent = new UI.ContentControl().applyStyle('tab-content');
                this.TabNav.AcceptNullValue = false;
                _super.prototype.Add.call(this, this.TabNav);
                _super.prototype.Add.call(this, this.TabContent);
                this.TabNav.OnItemSelected.On = function (n, ind, indCNT, oind, oindCNT) { return _this_1.onSelectedTabChanged(ind, oind, indCNT, oindCNT); };
                this.TabNav.OnInitialized = function (n) {
                    n.Source = _this_1.Items;
                    corelib_1.thread.Dispatcher.call(_this_1, function () { this.SelectedIndex = 0; });
                };
            };
            TabControl.prototype.OnBringIntoFront = function () {
                this.TabNav.SelectedIndex = 0;
            };
            TabControl.prototype.onSelectedTabChanged = function (newIndex, oldIndex, newChild, oldChild) {
                var si = this.Items.Get(newIndex);
                if (si) {
                    this.TabContent.Content = si.Content;
                    if (si.OnSelected)
                        si.OnSelected(this, si);
                }
                else
                    this.TabContent.Content = null;
                this.SelectedItem = si;
            };
            TabControl.prototype.Reslect = function () {
                var si = this.TabNav.SelectedItem;
                if (si) {
                    this.TabContent.Content = si.Content;
                    if (si.OnSelected)
                        si.OnSelected(this, si);
                }
                else
                    this.TabContent.Content = null;
                this.SelectedItem = si;
            };
            TabControl.prototype.OnKeyCombined = function (e, v) {
                var s = this.SelectedItem;
                if (s)
                    return s.Content && s.Content.OnKeyCombined(e, v);
            };
            TabControl.prototype.OnKeyDown = function (e) {
                var s = this.SelectedItem;
                if (e.ctrlKey) {
                    var i = e.shiftKey ? 1 : -1;
                    switch (e.keyCode) {
                        case UI.Keys.Left:
                            this.TabNav.SelectedIndex += i;
                            return true;
                        case UI.Keys.Right:
                            this.TabNav.SelectedIndex -= i;
                            return true;
                    }
                }
                if (s && s.Content)
                    return s.Content.OnKeyDown(e);
            };
            TabControl.prototype.CloseTab = function (e, dt, scopValue, events) {
                var x = dt.controller.MainControll.getDataContext();
                if (x) {
                    this.Items.Remove(x);
                }
            };
            TabControl.DPItems = corelib_1.bind.DObject.CreateField("Items", corelib_1.collection.List);
            TabControl.DPTabNav = corelib_1.bind.DObject.CreateField("TabNav", UI.ListAdapter);
            TabControl.DPTabContent = corelib_1.bind.DObject.CreateField("TabContent", UI.ContentControl);
            TabControl.DPSelectedItem = corelib_1.bind.DObject.CreateField("SelectedItem", Object, null, function (e) { e.__this.TabNav.SelectedIndex = e.__this.Items.IndexOf(e._new); });
            return TabControl;
        }(UI.NavPanel));
        UI.TabControl = TabControl;
        var UniTabControl = (function (_super) {
            __extends(UniTabControl, _super);
            function UniTabControl(name, caption, items, content, onSelectedItemChanged) {
                var _this_1 = _super.call(this, name, caption) || this;
                _this_1.content = content;
                _this_1.onSelectedItemChanged = onSelectedItemChanged;
                _this_1.OnTabSelected = new corelib_1.bind.EventListener(0);
                _this_1.OnTabClosed = new corelib_1.bind.EventListener(0);
                _this_1.Items = items;
                return _this_1;
            }
            UniTabControl.__fields__ = function () { return [this.DPItems, this.DPSelectedItem, this.DPTabContent, this.DPTabNav]; };
            UniTabControl.prototype.initialize = function () {
                var _this_1 = this;
                _super.prototype.initialize.call(this);
                this.TabNav = new UI.ListAdapter('unitabcontrol.navTabsItem', undefined);
                this.TabContent = new UI.ContentControl().applyStyle('tab-content');
                this.TabNav.AcceptNullValue = false;
                _super.prototype.Add.call(this, this.TabNav);
                _super.prototype.Add.call(this, this.TabContent);
                this.TabNav.OnItemSelected.On = function (n, ind, indCNT, oind, oindCNT) { return _this_1.onSelectedTabChanged(ind, oind, indCNT, oindCNT); };
                this.TabNav.OnInitialized = function (n) { n.Source = _this_1.Items; n.SelectedIndex = 0; };
                this.TabContent.Content = this.content;
                this.Items.Listen = function (t) {
                    if (t.event == corelib_1.collection.CollectionEvent.Removed) {
                        var e = { Sender: _this_1, Cancel: false, Stat: 'closed', Target: t.newItem };
                        _this_1.OnTabClosed.PInvok(0, [e]);
                    }
                };
            };
            UniTabControl.prototype.onSelectedTabChanged = function (newIndex, oldIndex, newChild, oldChild) {
                var si = this.Items.Get(newIndex);
                if (si && this.content) {
                    this.content.Visible = true;
                    this.TabContent.Content = this.content;
                    si.Title = this.onSelectedItemChanged(this, this.content, si);
                    if (si.OnSelected)
                        si.OnSelected(this, si);
                }
                else
                    this.TabContent.Content = null;
                this.SelectedItem = si;
            };
            UniTabControl.prototype.OnKeyCombined = function (e, v) {
                var s = this.SelectedItem;
                s = s.Content;
                if (s instanceof UI.JControl)
                    return s.OnKeyCombined(e, v);
            };
            UniTabControl.prototype.OnKeyDown = function (e) {
                var s = this.SelectedItem;
                if (e.ctrlKey) {
                    var i = e.shiftKey ? 1 : -1;
                    switch (e.keyCode) {
                        case UI.Keys.Left:
                            this.TabNav.SelectedIndex += i;
                            return true;
                        case UI.Keys.Right:
                            this.TabNav.SelectedIndex -= i;
                            return true;
                    }
                }
                if (this.content)
                    return this.content.OnKeyDown(e);
            };
            UniTabControl.prototype.CloseTab = function (e, dt, scopValue, events) {
                var x = dt.controller.MainControll.getDataContext();
                if (x) {
                    var ex = { Sender: this, Cancel: false, Stat: 'closing', Target: x };
                    this.OnTabClosed.PInvok(0, [ex]);
                    if (ex.Cancel)
                        return;
                    this.Items.Remove(x);
                    if (x.Dispose)
                        x.Dispose(true);
                }
            };
            UniTabControl.prototype.GetLeftBar = function () {
                if (this.content.GetLeftBar)
                    return this.content.GetLeftBar();
            };
            UniTabControl.prototype.GetRightBar = function () {
                if (this.content.GetRightBar)
                    return this.content.GetRightBar();
            };
            UniTabControl.prototype.OnPrint = function () {
                if (this.content.OnPrint)
                    return this.content.OnPrint();
                else
                    _super.prototype.OnPrint.call(this);
            };
            UniTabControl.prototype.Update = function () {
                if (this.content.Update)
                    return this.content.Update();
                else
                    _super.prototype.Update.call(this);
            };
            UniTabControl.prototype.OnSearche = function (oldPatent, newPatent) {
                if (this.content.OnSearche)
                    return this.content.OnSearche(oldPatent, newPatent);
            };
            UniTabControl.prototype.OnDeepSearch = function () {
                if (this.content.OnDeepSearch)
                    return this.content.OnDeepSearch();
            };
            Object.defineProperty(UniTabControl.prototype, "HasSearch", {
                get: function () {
                    var x = this.content.HasSearch;
                    if (x == undefined)
                        return;
                    return x;
                },
                enumerable: true,
                configurable: true
            });
            UniTabControl.DPItems = corelib_1.bind.DObject.CreateField("Items", corelib_1.collection.List);
            UniTabControl.DPTabNav = corelib_1.bind.DObject.CreateField("TabNav", UI.ListAdapter);
            UniTabControl.DPTabContent = corelib_1.bind.DObject.CreateField("TabContent", UI.ContentControl);
            UniTabControl.DPSelectedItem = corelib_1.bind.DObject.CreateField("SelectedItem", Object, null, function (e) { e.__this.TabNav.SelectedIndex = e.__this.Items.IndexOf(e._new); });
            return UniTabControl;
        }(UI.NavPanel));
        UI.UniTabControl = UniTabControl;
        var TabControlItem = (function (_super) {
            __extends(TabControlItem, _super);
            function TabControlItem(Title, Content) {
                var _this_1 = _super.call(this) || this;
                _this_1.Title = Title;
                _this_1.Content = Content;
                return _this_1;
            }
            TabControlItem.__fields__ = function () { return [this.DPContent, this.DPTitle]; };
            TabControlItem.DPTitle = corelib_1.bind.DObject.CreateField("Title", String);
            TabControlItem.DPContent = corelib_1.bind.DObject.CreateField("Content", Object);
            return TabControlItem;
        }(corelib_1.bind.DObject));
        UI.TabControlItem = TabControlItem;
    })(UI = exports.UI || (exports.UI = {}));
    var init;
    (function (init) {
        var layout = [];
        function for_each(e) {
            if (e.dom.hasAttribute('as-pager')) {
                e.dom.removeAttribute('as-pager');
                return createPaginator(e);
            }
            var x = new UI.ListAdapter(e.dom, undefined, e.parentScop);
            x.BindTo(e.currentScop);
            e.Result = x;
            return x;
        }
        function createPaginator(e) {
            var dom = e.dom;
            if (dom.hasAttribute('as-pager'))
                dom.removeAttribute('as-pager');
            dom.setAttribute('compiled', '');
            var count = dom.getAttribute('count-per-page');
            count = count ? parseInt(count) || 24 : 24;
            var p = new UI.Paginator(count, dom, true);
            p.Parent = e.parentControl || UI.Desktop.Current;
            p.InputScop = e.currentScop;
            var fdom = $('[db-content]', dom)[0];
            if (fdom && fdom !== dom) {
                dom.removeAttribute('db-content');
                var output = corelib_1.bind.Scop.Create('Output', p, corelib_1.bind.BindingMode.TwoWay, e.controller);
                if (!fdom.hasAttribute('db-foreach'))
                    fdom.setAttribute('db-foreach', '');
                var iscp = e.controller.CompileChild(fdom, output, p);
                var l = iscp.Control;
                if (!l)
                    l = new UI.Dom(iscp.dom || fdom);
                p.Content = l;
            }
            return p;
        }
        corelib_1.ScopicControl.register('foreach', for_each);
        corelib_1.ScopicControl.register('pager', createPaginator);
        corelib_1.ScopicControl.register('adapter', for_each);
        function x() { }
        function RegisterLayout(View, classList, remove) {
            if (corelib_1.thread.Dispatcher.InIdle())
                corelib_1.thread.Dispatcher.call(null, x);
            layout.push({ A: View, B: classList, C: remove });
        }
        init.RegisterLayout = RegisterLayout;
        function apply() {
            var layout1 = layout.splice(0);
            for (var i = 0; i < layout1.length; i++) {
                var l = layout1[i];
                if (l.C)
                    l.A.classList.remove.apply(l.A.classList, l.B);
                else
                    l.A.classList.add.apply(l.A.classList, l.B);
            }
            if (layout.length !== 0)
                apply();
        }
        function animation() {
            apply();
        }
        corelib_1.thread.Dispatcher.OnIdle(null, apply);
        ValidateImport(tmplates);
        function loadCss(callback, onerror) {
            var csses = ["../assets/style/bundle.css"
            ];
            for (var _i = 0, csses_1 = csses; _i < csses_1.length; _i++) {
                var i = csses_1[_i];
                require('style|' + i, callback, onerror, context_2.context);
            }
        }
        init.loadCss = loadCss;
    })(init || (init = {}));
    exports.LoadDefaultCSS = function (callback, onerror) { init.loadCss(callback, onerror); };
    UI.JControl;
});
define("sys/QModel", ["require", "exports", "sys/System", "sys/Corelib"], function (require, exports, System_1, Corelib_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var models;
    (function (models) {
        var MessageType;
        (function (MessageType) {
            MessageType[MessageType["Info"] = 0] = "Info";
            MessageType[MessageType["Error"] = 1] = "Error";
            MessageType[MessageType["Command"] = 2] = "Command";
            MessageType[MessageType["Confirm"] = 3] = "Confirm";
        })(MessageType = models.MessageType || (models.MessageType = {}));
        var CallBackMessage = (function () {
            function CallBackMessage() {
            }
            return CallBackMessage;
        }());
        models.CallBackMessage = CallBackMessage;
        var Message = (function (_super) {
            __extends(Message, _super);
            function Message(id, message) {
                var _this = _super.call(this, id || Corelib_3.basic.New()) || this;
                _this.Content = message;
                return _this;
            }
            Message.__fields__ = function () { return [Message.DPContent, Message.DPTitle, Message.DPOkText, Message.DPCancelText, this.DPAbortText, Message.DPAction, Message.DPType, Message.DPData]; };
            Message.getById = function (id, type) {
                return Message.pstore.Get(id);
            };
            Message.prototype.getStore = function () { return Message.pstore; };
            Message.DPData = Corelib_3.bind.DObject.CreateField("Data", Object);
            Message.DPContent = Corelib_3.bind.DObject.CreateField("Content", String, "", null, null, Corelib_3.bind.PropertyAttribute.NonSerializable);
            Message.DPTitle = Corelib_3.bind.DObject.CreateField("Title", String, "", null, null, Corelib_3.bind.PropertyAttribute.NonSerializable);
            Message.DPOkText = Corelib_3.bind.DObject.CreateField("OKText", String, undefined, null, null, Corelib_3.bind.PropertyAttribute.NonSerializable);
            Message.DPType = Corelib_3.bind.DObject.CreateField("Type", Number, MessageType.Info, null, null, Corelib_3.bind.PropertyAttribute.NonSerializable);
            Message.DPAction = Corelib_3.bind.DObject.CreateField("Action", String, undefined);
            Message.DPCancelText = Corelib_3.bind.DObject.CreateField("CancelText", String, undefined, null, null, Corelib_3.bind.PropertyAttribute.NonSerializable);
            Message.DPAbortText = Corelib_3.bind.DObject.CreateField("AbortText", String);
            Message.pstore = new Corelib_3.collection.Dictionary("Messages", true);
            return Message;
        }(System_1.sdata.QShopRow));
        models.Message = Message;
    })(models = exports.models || (exports.models = {}));
});
define("sys/Corelib", ["require", "exports", "context", "plugin|template", "plugin|json", "sys/Syntaxer"], function (require, exports, context_3, plg_template, plg_json, Syntaxer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    if (plg_template)
        plg_template.addEventListener(ModuleStat.Executed, function (e) { return mvc.Initializer.Register(e); }, null);
    if (plg_json)
        plg_json.addEventListener(ModuleStat.Executed, function (e) {
            var c = encoding.SerializationContext.GlobalContext.reset();
            var v = e.exports.value;
            var type = v.__type__;
            var name = v.__name__;
            var tt = c.FromJson(v, context_3.context.GetType(type) || Object, new encoding.Path(e, 'data'));
        }, null);
    var OnNodeLoaded = 'DOMNodeInsertedIntoDocument';
    function $defineProperty(o, p, attributes, onError) {
        return helper.TryCatch(Object, Object.defineProperty, onError, [o, p, attributes]) || false;
    }
    ;
    (function (constructor) {
        if (constructor &&
            constructor.prototype &&
            constructor.prototype.childElementCount == null) {
            Object.defineProperty(constructor.prototype, 'childElementCount', {
                get: function () {
                    var i = 0, count = 0, node, nodes = this.childNodes;
                    while (node = nodes[i++]) {
                        if (node.nodeType === 1)
                            count++;
                    }
                    return count;
                }
            });
        }
    })(window.Node || window.Element);
    var _Instance;
    var max = 9223372036854775807;
    var jobs = {};
    var isRunning = false;
    var id = -1;
    var stack = [];
    var djobs = [];
    var cj = 0;
    var _p = false;
    var Common;
    (function (Common) {
        Common.Message = null;
        Common.Math = Common.Math;
        var RichMenu = (function () {
            function RichMenu() {
            }
            return RichMenu;
        }());
        Common.RichMenu = RichMenu;
    })(Common = exports.Common || (exports.Common = {}));
    var TemplateTypes;
    (function (TemplateTypes) {
        function RichMenu() {
        }
        TemplateTypes.RichMenu = RichMenu;
    })(TemplateTypes = exports.TemplateTypes || (exports.TemplateTypes = {}));
    var vars;
    (function (vars) {
        vars._c = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];
        vars._cnts = [7, 11, 15, 19, 32];
        vars.names_scop_fromIn = false;
    })(vars || (vars = {}));
    var css;
    (function (css_1) {
        function getVar(name) {
        }
        css_1.getVar = getVar;
        function toValidCssName(c) {
            if (typeof c !== 'string')
                return c;
            for (var i = 0; i < c.length; i++) {
                var h = c.charCodeAt(i);
                if (h > 64 && h < 91) {
                    c = c.substring(0, i) + '-' + String.fromCharCode(h + 32) + c.substring(i + 1);
                    i++;
                }
                else if (h === 36) {
                    c = c.substring(0, i) + '-' + c.substring(++i);
                }
                else if (h === 95) {
                    c = c.substring(0, i) + '--' + c.substring(++i);
                }
            }
            return c;
        }
        css_1.toValidCssName = toValidCssName;
        function toValidEnumName(c) {
            if (typeof c !== 'string')
                return c;
            for (var i = 0; i < c.length; i++) {
                var h = c.charCodeAt(i);
                if (h >= 65 && h <= 90)
                    throw "InvalidCssName";
                var nh = c.charCodeAt(i + 1);
                if (h === 45) {
                    if (nh >= 97 && nh <= 122) {
                        c = c.substring(0, i) + String.fromCharCode(nh - 32) + c.substring(i + 2);
                    }
                    else {
                        if (c.charCodeAt(i + 1) === 45) {
                            {
                                c = c.substring(0, i) + '_' + c.substring(i + 2);
                                continue;
                            }
                        }
                        else
                            c = c.substring(0, i) + '$' + c.substring(i + 1);
                        i += 1;
                    }
                }
            }
            return c;
        }
        css_1.toValidEnumName = toValidEnumName;
        function Css2Less(css, callback, param) {
            var t = new XMLHttpRequest();
            t.open("POST", '/css-to-less.php');
            t.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
            t.setRequestHeader('Access-Control-Allow-Origin', 'true');
            t.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            t.send(encodeURIComponent("data") + "=" + encodeURIComponent("body{display:none}"));
            t.onload = function (t) {
                stop();
            };
        }
        css_1.Css2Less = Css2Less;
        var animation;
        (function (animation) {
            function animate(anim) {
                stopAnimation(anim);
                anim.start = performance.now();
                anim.cursor = 0;
                anim.onstart && anim.onstart(anim);
                anim.thread = setInterval(function () {
                    var n = performance.now();
                    anim.cursor = (n - anim.start) / anim.timespan;
                    if (anim.cursor >= 1) {
                        clearInterval(anim.thread);
                        anim.cursor = 1;
                    }
                    for (var i = 0; i < anim.props.length; i++)
                        anim.props[i].animate(anim);
                    if (anim.cursor == 1) {
                        anim.oncomplete && anim.oncomplete(anim);
                        var t;
                        for (var i = 0; i < anim.props.length; i++)
                            (t = anim.props[i]).oncomplete && t.oncomplete(anim);
                    }
                }, anim.interval);
                return anim;
            }
            animation.animate = animate;
            function animates(anim) {
                var start = performance.now();
                stopAnimations(anim);
                anim.thread = setInterval(function () {
                    var es = anim.animations;
                    var n = performance.now();
                    var cursor = (n - start) / anim.timespan;
                    if (cursor >= 1) {
                        clearInterval(anim.thread);
                        cursor = 1;
                    }
                    cursor = 1 - (1 - cursor) * (1 - cursor);
                    for (var i = 0; i < es.length; i++) {
                        var e = es[i];
                        e.cursor = cursor;
                        for (var j = 0; j < e.props.length; j++)
                            e.props[j].animate(e);
                    }
                    if (cursor == 1)
                        complete(es);
                }, anim.interval);
                var es = anim.animations;
                for (var i = 0; i < es.length; i++) {
                    var ae = es[i];
                    ae.start = start;
                    ae.cursor = 0;
                    ae.onstart && ae.onstart(ae);
                }
                return anim;
            }
            animation.animates = animates;
            function stopAnimation(e) {
                if (!e.thread)
                    return;
                clearInterval(e.thread);
                complete([e]);
                return e;
            }
            animation.stopAnimation = stopAnimation;
            function stopAnimations(e) {
                if (!e.thread)
                    return;
                clearInterval(e.thread);
                complete(e.animations);
                return e;
            }
            animation.stopAnimations = stopAnimations;
            function complete(es) {
                for (var i = 0; i < es.length; i++) {
                    var e = es[i];
                    e.thread = 0;
                    e.oncomplete && e.oncomplete(e);
                    var t;
                    for (var j = 0; j < e.props.length; j++)
                        (t = e.props[j]).oncomplete && t.oncomplete(e);
                }
            }
            function colect(f, attrs) {
                var r = {};
                for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {
                    var i = attrs_1[_i];
                    r[i] = f.style[i];
                }
                return r;
            }
            function grabber(e) {
                var d = performance.now();
                for (var i = 0; i < e.elements.length; i++)
                    e.elements[i].result = [colect(e.elements[i].dom, e.attrs)];
                e.thread = setInterval(function () {
                    if (performance.now() - d > e.timespan) {
                        clearInterval(e.thread);
                    }
                    for (var i = 0; i < e.elements.length; i++)
                        e.elements[i].result.push(colect(e.elements[i].dom, e.attrs));
                }, e.interval);
            }
            function trigger(prop, from, to, finalvalue, suffx) {
                if (finalvalue === void 0) { finalvalue = ''; }
                if (suffx === void 0) { suffx = 'px'; }
                return {
                    name: prop,
                    def: to - from,
                    from: from,
                    fnl: finalvalue,
                    suffx: suffx || 'px',
                    animate: function (e) {
                        e.dom.style[this.name] = (this.from + this.def * e.cursor) + suffx;
                    },
                    oncomplete: function (e) {
                        e.dom.style[this.name] = this.fnl;
                    }
                };
            }
            animation.trigger = trigger;
            var constats;
            (function (constats) {
                constats.hideOpacity = { name: 'opacity', animate: function (e) { e.dom.style.opacity = String(1 - e.cursor); }, oncomplete: function (e) { e.dom.style[this.name] = ''; } };
                constats.showOpacity = { name: 'opacity', animate: function (e) { e.dom.style.opacity = String(e.cursor); } };
            })(constats = animation.constats || (animation.constats = {}));
        })(animation = css_1.animation || (css_1.animation = {}));
    })(css = exports.css || (exports.css = {}));
    var math;
    (function (math) {
        function round1(_n, x) {
            var n = _n + '';
            var i = n.indexOf('.');
            var e = n.indexOf('e');
            if (i === -1)
                i = n.length;
            var ex = 0;
            if (e !== -1)
                if (i > e)
                    return n;
                else {
                    ex = parseFloat(n.substring(e + 1));
                    if (ex < x - 1)
                        return '0';
                    n = n.substring(0, e);
                }
            var l = n.length;
            if (ex !== 0) {
                if (i + ex > 1) {
                    var fi = n.substr(0, i);
                    var li = n.substring(i + 1);
                    var shift = l - i <= ex ? l - i : ex;
                    shift--;
                    ex -= shift;
                    i += shift;
                    if (shift > 0) {
                        n = fi + li.substr(0, shift);
                        var lm = li.substring(shift);
                        if (lm.length > 0)
                            n += lm;
                        i = n.indexOf('.');
                    }
                    if (i === -1)
                        i = n.length;
                    l = n.length;
                }
            }
            var l1 = x == 0 ? i : i + x + 1;
            var r = l1 - l;
            if (r > 0)
                l1 = l;
            n = n.substr(0, l1);
            if (r > 0) {
                if (i == l) {
                    n += '.';
                    r--;
                }
                for (; r > 0; r--)
                    n += '0';
            }
            n = ex !== 0 ? n + 'e' + ex : n;
            return n;
        }
        math.round1 = round1;
        function round(_n, x) {
            var n = _n + '';
            var i = n.indexOf('.');
            var e = n.indexOf('e');
            if (i === -1)
                i = e === -1 ? n.length : e;
            var ex = 0;
            if (e !== -1)
                if (i <= e) {
                    ex = parseFloat(n.substring(e + 1));
                    if (ex < x - 1)
                        return '0';
                    n = n.substring(0, e);
                }
                else {
                    ex = parseFloat(n.substring(e + 1));
                    n = n.substring(0, e);
                }
            var l = n.length;
            if (ex !== 0) {
                if (i + ex > 1) {
                    var fi = n.substr(0, i);
                    var li = n.substring(i + 1);
                    var shift = l - i <= ex ? l - i : ex;
                    shift = Math.abs(shift + shift === 0 ? 0 : (shift < 0 ? 1 : -1));
                    ex -= shift;
                    i += shift;
                    if (shift > 0) {
                        n = fi + li.substr(0, shift);
                        var lm = li.substring(shift);
                        if (lm.length > 0)
                            n += lm;
                        i = n.indexOf('.');
                    }
                    if (i === -1)
                        i = n.length;
                    l = n.length;
                }
            }
            var l1 = x == 0 ? i : i + x + 1;
            var r = x - (n.length - i);
            if (r > 0)
                l1 = l;
            n = n.substr(0, l1);
            if (r > 0) {
                if (i == l) {
                    n += '.';
                    r--;
                }
                for (; r >= 0; r--)
                    n += '0';
            }
            n = ex !== 0 ? n + 'e' + ex : n;
            return n;
        }
        math.round = round;
    })(math = exports.math || (exports.math = {}));
    var string;
    (function (string) {
        function IsPrintable(keyCode, charCode) {
            var anyNonPrintable = (keyCode == 8) ||
                (keyCode == 9) ||
                (keyCode == 13) ||
                (keyCode == 27);
            var mozNonPrintable = (keyCode == 19) ||
                (keyCode == 20) ||
                (keyCode == 45) ||
                (keyCode == 46) ||
                (keyCode == 144) ||
                (keyCode == 145) ||
                (keyCode > 32 && keyCode < 41) ||
                (keyCode > 111 && keyCode < 124);
            return !anyNonPrintable && !(charCode == 0 && mozNonPrintable);
        }
        string.IsPrintable = IsPrintable;
    })(string = exports.string || (exports.string = {}));
    var helper;
    (function (helper) {
        function TryCatch(owner, Try, Catch, params) {
            try {
                if (Try)
                    return Try.apply(owner, params);
                var e = new Error('Undefined Try Block');
            }
            catch (ei) {
                e = ei;
            }
            return Catch && Catch.apply(owner, (params = params.slice(), params.unshift(e), params));
        }
        helper.TryCatch = TryCatch;
    })(helper = exports.helper || (exports.helper = {}));
    var basic;
    (function (basic) {
        var Settings;
        (function (Settings) {
            var _store = {};
            function get(name) {
                return _store[name];
            }
            Settings.get = get;
            function set(name, value) {
                _store[name] = value;
                value = helper.TryCatch(JSON, JSON.stringify, void 0, [value]);
                localStorage.setItem(name, value);
            }
            Settings.set = set;
            (function () {
                for (var i = 0; i < localStorage.length; i++) {
                    var n = localStorage.key(i);
                    _store[n] = helper.TryCatch(JSON, JSON.parse, void 0, [localStorage.getItem(n)]);
                }
            })();
        })(Settings = basic.Settings || (basic.Settings = {}));
        var DataStat;
        (function (DataStat) {
            DataStat[DataStat["Fail"] = 0] = "Fail";
            DataStat[DataStat["Success"] = 1] = "Success";
            DataStat[DataStat["OperationCanceled"] = 2] = "OperationCanceled";
            DataStat[DataStat["UnknownStat"] = 3] = "UnknownStat";
            DataStat[DataStat["DataCheckError"] = 4] = "DataCheckError";
            DataStat[DataStat["DataWasChanged"] = 16] = "DataWasChanged";
            DataStat[DataStat["None"] = 5] = "None";
        })(DataStat = basic.DataStat || (basic.DataStat = {}));
        var polyfill;
        (function (polyfill) {
            polyfill.supportTemplate = 'content' in document.createElement('template');
            function IsTemplate(x) {
                return polyfill.supportTemplate ? x instanceof HTMLTemplateElement : (x instanceof HTMLUnknownElement) && x.tagName === 'TEMPLATE';
            }
            polyfill.IsTemplate = IsTemplate;
            if (!polyfill.supportTemplate)
                $defineProperty(HTMLUnknownElement.prototype, 'content', { get: function () { return this.tagName === 'TEMPLATE' ? this : undefined; } });
        })(polyfill = basic.polyfill || (basic.polyfill = {}));
        function defaultUrl(url) {
            if (!url)
                url = document.location.origin;
            if (url.endsWith('/')) {
                url = url.substr(0, url.length - 1);
            }
            return url;
        }
        basic.host = defaultUrl(true ? null : 'http://127.0.0.1:801');
        basic.Crypto = { Decrypt: function (d) { return d; }, Encrypt: function (d) { return d; }, SEncrypt: function (d) { return d; }, SDecrypt: function (d) { return d; } };
        var _guid = null;
        var _end = null;
        function setGuidRange(start, end) {
            _guid = start;
            _end = end;
        }
        basic.setGuidRange = setGuidRange;
        function New() {
            if (_guid == null || _guid >= _end) {
                var x = Date.now() * 100000 + Math.floor(Math.random() * 775823);
                return x < max ? x : (Date.now() * 10000) / 10000 | (Math.random() * 771);
            }
            else {
                if (_guid >= _end - 300)
                    GuidManager.update();
                return _guid++;
            }
        }
        basic.New = New;
        var GuidManager = (function () {
            function GuidManager(vars) {
                this.vars = vars;
            }
            Object.defineProperty(GuidManager, "current", {
                get: function () {
                    return _guid;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GuidManager, "isValid", {
                get: function () {
                    return _guid !== 0 && _guid < _end;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GuidManager, "Next", {
                get: function () {
                    return ++_guid;
                },
                enumerable: true,
                configurable: true
            });
            GuidManager.New = function (callback, pram) {
                if (_guid !== 0 && _guid < _end)
                    callback(++_guid, pram);
                else {
                    this.update(callback, pram);
                }
            };
            GuidManager.update = function (callback, pram) {
                if (this.t != null)
                    return;
                this.t = new net.WebRequest(null);
                this.t.Download({ Url: '/~Guid', HasBody: false, Method: net.WebRequestMethod.Get }, callback);
                this.t.OnComplete.On = function (e) {
                    GuidManager.t.Dispose();
                    GuidManager.t = null;
                    callback && callback(++_guid, pram);
                };
            };
            return GuidManager;
        }());
        basic.GuidManager = GuidManager;
        function isFocused(v) {
            var t = document.activeElement;
            while (t) {
                if (t == v)
                    return true;
                t = t.parentElement;
            }
            return false;
        }
        basic.isFocused = isFocused;
        var focuser = (function () {
            function focuser(bound, andButton) {
                this.bound = bound;
                this.andButton = andButton;
            }
            focuser.prototype.focuse = function (rebound, toPrev) {
                return this[toPrev ? 'focusePrev' : 'focuseNext'](rebound);
            };
            focuser.prototype._focuseOn = function (v) {
                try {
                    v.focus();
                    if (document.activeElement == v) {
                        if (v.select)
                            v.select();
                        return v;
                    }
                }
                catch (_a) { }
            };
            focuser.prototype.getNext = function (p) {
                var ns;
                while (p && !(ns = p.nextElementSibling)) {
                    if (this.bound.contains(p))
                        p = p.parentElement;
                    else
                        return null;
                }
                return ns;
            };
            focuser.prototype._focuseNext = function (v, array) {
                if (!v)
                    return false;
                if (array.indexOf(v) !== -1)
                    return false;
                array.push(v);
                if (v === document.activeElement) {
                    v = this.getNext(v);
                    if (!v)
                        return true;
                    array.push(v);
                }
                var tmp;
                if (v.tabIndex >= 0 && typeof v.focus === 'function') {
                    if (this.andButton || v.constructor !== HTMLButtonElement) {
                        if (this._focuseOn(v))
                            return v;
                    }
                }
                if (v instanceof HTMLElement)
                    if ((tmp = this._focuseNext(v.firstElementChild, array)))
                        return tmp;
                var n = this.getNext(v);
                if (n)
                    return this._focuseNext(n, array);
                return true;
            };
            focuser.prototype.getPrev = function (p) {
                var ns;
                while (p && !(ns = p.previousElementSibling)) {
                    if (this.bound.contains(p))
                        p = p.parentElement;
                    else
                        return null;
                }
                return ns;
            };
            focuser.prototype._focusePrev = function (v, array) {
                if (!v)
                    return false;
                if (array.indexOf(v) !== -1)
                    return false;
                array.push(v);
                if (v === document.activeElement) {
                    v = this.getPrev(v);
                    if (!v)
                        return true;
                    array.push(v);
                }
                var tmp;
                if (v.tabIndex >= 0 && typeof v.focus === 'function')
                    if (this._focuseOn(v))
                        return v;
                if (v instanceof HTMLElement)
                    if ((tmp = this._focusePrev(v.lastElementChild, array)))
                        return tmp;
                var n = this.getPrev(v);
                if (n)
                    return this._focusePrev(n, array);
                return true;
            };
            focuser.prototype.focusePrev = function (rebound) {
                if (this.bound.contains(document.activeElement))
                    var x = this._focusePrev(document.activeElement, []);
                else
                    x = true;
                if (rebound)
                    if (x == true)
                        return this._focusePrev(this.bound, []);
                return x;
            };
            focuser.prototype.focuseNext = function (rebound) {
                if (this.bound.contains(document.activeElement))
                    var x = this._focuseNext(document.activeElement, []);
                else
                    x = true;
                if (rebound)
                    if (x == true)
                        return this._focuseNext(this.bound, []);
                return x;
            };
            focuser.prototype.reFocuseOn = function () {
                return this._focuseNext(this.bound, []);
            };
            focuser.prototype.focusOn = function () {
                if (this.bound.contains(document.activeElement))
                    return;
                return this._focuseNext(this.bound, []);
            };
            return focuser;
        }());
        basic.focuser = focuser;
        var _fc = new focuser(null, false);
        function focuseOn(v) {
            _fc.bound = v;
            return _fc.focuseNext(true);
        }
        basic.focuseOn = focuseOn;
        function _focuseOn(v) {
            _fc.bound = v;
            return _fc.focusOn();
        }
        basic._focuseOn = _focuseOn;
        function __focuseOn(v) {
            try {
                v.focus();
                if (document.activeElement == v) {
                    if (v.select)
                        v.select();
                    return v;
                }
            }
            catch (_a) { }
        }
        function getNext(p) {
            var ns;
            while (p && !(ns = p.nextElementSibling))
                p = p.parentElement;
            return ns;
        }
        function _xfocuseNext(v, array) {
            if (!v)
                return false;
            if (array.indexOf(v) != -1)
                return false;
            array.push(v);
            if (v === document.activeElement) {
                v = getNext(v);
                if (!v)
                    return true;
                array.push(v);
            }
            var tmp;
            if (v instanceof HTMLInputElement)
                if (__focuseOn(v))
                    return v;
            if (v instanceof HTMLElement)
                if ((tmp = _xfocuseNext(v.firstElementChild, array)))
                    return tmp;
            var n = getNext(v);
            if (n)
                return _xfocuseNext(n, array);
            return true;
        }
        function focuseNext(v) {
            return _xfocuseNext(v || document.activeElement, []);
        }
        basic.focuseNext = focuseNext;
        var Delegate = (function () {
            function Delegate(Owner, Invoke, _dispose, objectStat) {
                this.Owner = Owner;
                this.Invoke = Invoke;
                this._dispose = _dispose;
                this.objectStat = objectStat;
            }
            Delegate.prototype.handleEvent = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                this.Invoke.apply(this.Owner, args);
            };
            Delegate.prototype.Dispose = function () {
                this._dispose(this);
                this.Owner = null;
                this._dispose = null;
                this.Invoke = null;
            };
            return Delegate;
        }());
        basic.Delegate = Delegate;
        var Rectangle = (function () {
            function Rectangle() {
                this._onchanged = [];
                Object.freeze(this);
                Object.preventExtensions(this);
            }
            Object.defineProperty(Rectangle.prototype, "Left", {
                get: function () {
                    return this._x;
                },
                set: function (v) {
                    this._x = v;
                    this.OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rectangle.prototype, "Top", {
                get: function () {
                    return this._y;
                },
                set: function (v) {
                    this._y = v;
                    this.OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rectangle.prototype, "Width", {
                get: function () {
                    return this._w;
                },
                set: function (v) {
                    this._w = v;
                    this.OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rectangle.prototype, "Height", {
                get: function () {
                    return this._h;
                },
                set: function (v) {
                    this._h = v;
                    this.OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Rectangle.prototype.OnChanged = function () {
                for (var i = 0; i < this._onchanged.length; i++) {
                    var dlg = this._onchanged[i];
                    dlg(this);
                }
            };
            Rectangle.prototype.Set = function (left, top, width, height) {
                this._x = left;
                this._y = top;
                this._w = width;
                this._h = height;
                this.OnChanged();
            };
            return Rectangle;
        }());
        basic.Rectangle = Rectangle;
        var SessionId = (function () {
            function SessionId(guid) {
                SessionId.parse(guid);
            }
            Object.defineProperty(SessionId.prototype, "Data", {
                get: function () { return SessionId.Id; },
                enumerable: true,
                configurable: true
            });
            SessionId.parse = function (guid) {
                if (guid == null) {
                    return;
                }
                var t = SessionId.Id;
                var i = 0;
                for (var i = 0; i < 16; i++) {
                    var c = guid.substr(2 * i, 2);
                    if (c === '')
                        break;
                    t[i] = parseInt(c, 16);
                }
            };
            SessionId.Id = new Array(16);
            return SessionId;
        }());
        basic.SessionId = SessionId;
        var iGuid = (function () {
            function iGuid(g) {
                this._id = g.toUpperCase();
            }
            Object.defineProperty(iGuid.prototype, "Id", {
                get: function () { return this._id; },
                enumerable: true,
                configurable: true
            });
            iGuid.prototype.Equals = function (o) {
                if (o instanceof iGuid)
                    return this._id == o._id;
                return false;
            };
            iGuid.prototype.toString = function () { return this._id.toString(); };
            iGuid.FromNumber = function (v) {
                var c = vars._c;
                var cnts = vars._cnts;
                var cc = 0;
                var l = "";
                var i = 0;
                while (i < 32) {
                    var d, r;
                    if (v !== 0) {
                        var d = v / 16;
                        var r = Math.floor(v % 16);
                        v = Math.floor(d);
                    }
                    else
                        r = Math.floor(Math.random() * 16);
                    l += c[r];
                    if (i == cnts[cc]) {
                        l += '-';
                        cc++;
                    }
                    i++;
                }
                return new iGuid(l);
            };
            Object.defineProperty(iGuid, "New", {
                get: function () {
                    return iGuid.FromNumber(Date.now());
                },
                enumerable: true,
                configurable: true
            });
            iGuid.Empty = new iGuid('00000000-0000-0000-0000-000000000000');
            return iGuid;
        }());
        basic.iGuid = iGuid;
        var EnumValue = (function () {
            function EnumValue(Name, Value) {
                this.Name = Name;
                this.Value = Value;
                Object.freeze(this);
            }
            EnumValue.prototype.toString = function () { return this.Name; };
            EnumValue.GetValue = function (lst, n) {
                var c = lst.AsList();
                if (typeof n === 'number') {
                    for (var i = 0; i < c.length; i++)
                        if (c[i].Value === n)
                            return c[i];
                }
                else {
                    for (var i = 0; i < c.length; i++)
                        if (c[i].Name === n)
                            return c[i];
                }
                return undefined;
            };
            return EnumValue;
        }());
        basic.EnumValue = EnumValue;
        var enums = {};
        function getEnum(enumPath, enumValue) {
            var _enum;
            if (typeof enumPath === 'string')
                _enum = enums[enumPath] || enumValue || context_3.context.GetEnum(enumPath);
            else
                throw "the Path Inspecified";
            if (!(_enum instanceof collection.List && _enum.IsFrozen())) {
                if (_enum == null)
                    return undefined;
                if (_enum.constructor !== Object)
                    throw "Error Parsing Enum";
                enums[enumPath] = _enum = new collection.List(EnumValue, gen(_enum));
                _enum.Freeze();
            }
            return _enum;
        }
        basic.getEnum = getEnum;
        function gen(_enum) {
            var o = [];
            for (var i in _enum)
                if (isNaN(parseFloat(i)))
                    o.push(new basic.EnumValue(i, _enum[i]));
            return o;
        }
        var t = /@([a-zA-Z][a-zA-Z\d\.]*)/mgi;
        function CompileString(s, getString, params) {
            return StringCompile.Compile(s, getString, params);
        }
        basic.CompileString = CompileString;
        var CodeCompiler = (function () {
            function CodeCompiler() {
                this.script = [];
                this.OnFnSuccess = this.OnFnSuccess.bind(this);
            }
            CodeCompiler.prototype.toRegString = function (s) {
                var rs = "";
                for (var i = 0; i < s.length; i++) {
                    var cc = s[i];
                    if (cc === '"' || cc === '\'') {
                        rs += "\\" + cc;
                    }
                    else
                        rs += cc;
                }
                return rs;
            };
            CodeCompiler.prototype.generateFn = function (stack, hasNoReturn) {
                var strs = new Array(stack.length);
                var hasCode = false;
                for (var i = 0; i < stack.length; i++) {
                    var s = stack[i];
                    if (typeof s === 'string')
                        strs[i] = '"' + this.toRegString(s) + '"';
                    else {
                        hasCode = true;
                        strs[i] = s.Code;
                    }
                }
                var fn = strs.join(" + ");
                if (!hasNoReturn)
                    fn = "return " + fn;
                var reg = internal.getExpression(fn, CodeCompiler.params, this.OnFnSuccess, this, true);
                this.script.push(reg);
                reg.IsString = !hasCode;
                return reg;
            };
            CodeCompiler.prototype._push = function (code) {
                var hasNoReturn = true;
                if (code[0] === "=")
                    hasNoReturn = false, code = code.substr(1);
                return this.generateFn(Syntaxer_1.Parser.StringTemplate.Compile(code), hasNoReturn);
            };
            CodeCompiler.prototype.push = function (code) {
                if (typeof code === "string")
                    return this._push(code);
                var ret = new Array(code.length);
                for (var i = 0; i < code.length; i++)
                    ret[i] = this._push(code[i]);
                return ret;
            };
            CodeCompiler.prototype.Compile = function () {
                var code = new Array(this.script.length);
                for (var i = 0; i < code.length; i++)
                    code[i] = this.script[i].code;
                EvalCode.Compile(code.join('\r\n'), this._onload, this._onerror, this);
            };
            CodeCompiler.prototype.reset = function () { this.script.length = 0; };
            CodeCompiler.prototype._onload = function (t) {
                t.onload && t.onload(t);
            };
            CodeCompiler.prototype._onerror = function (t) {
                t.onerror && t.onerror(t);
            };
            CodeCompiler.prototype.OnFnSuccess = function (fn, t) {
                helper.TryCatch(this, this.onFnLoad, void 0, [fn, t]);
            };
            CodeCompiler.prototype.remove = function (t) {
                var i = this.script.indexOf(t);
                if (i !== -1)
                    this.script.splice(i, 1);
            };
            CodeCompiler.params = ["$ovalue", "$value", "$scope", "$dom", "$job", "$fn"];
            return CodeCompiler;
        }());
        basic.CodeCompiler = CodeCompiler;
        var EvalCode = (function () {
            function EvalCode() {
            }
            EvalCode.Compile = function (code, callback, onerror, stat) {
                var b = new Blob([code], { type: "text/javascript" });
                var scrpt = document.createElement('script');
                scrpt.src = URL.createObjectURL(b, { oneTimeOnly: true });
                scrpt.addEventListener('load', function () {
                    ('msClose' in b) && b.msClose();
                    document.head.removeChild(scrpt);
                    callback && callback(stat);
                });
                scrpt.addEventListener('error', function (e) {
                    ('msClose' in b) && b.msClose();
                    document.head.removeChild(scrpt);
                    onerror && onerror(stat);
                });
                document.head.appendChild(scrpt);
            };
            EvalCode.CompileExpression = function (expression, params, callback, stat, exludeReturn) {
                var code = internal.getExpression(expression, params, callback, stat, exludeReturn);
                var b = new Blob([code.code], { type: "text/javascript" });
                var url = URL.createObjectURL(b, { oneTimeOnly: true });
                var scrpt = document.createElement('script');
                scrpt.src = url;
                scrpt.addEventListener('load', function () {
                    ('msClose' in b) && b.msClose();
                    document.head.removeChild(scrpt);
                });
                document.head.appendChild(scrpt);
            };
            return EvalCode;
        }());
        basic.EvalCode = EvalCode;
        var internal;
        (function (internal) {
            var reg = {};
            var i = 0;
            function register(rg) {
                if (reg[rg.name])
                    console.error("Duplicated ExprFn Occurred {}");
                reg[rg.name] = rg;
            }
            function defineExpression(name, expr) {
                var rg = reg[name];
                delete reg[name];
                rg.evalCode = expr;
                if (rg.callback)
                    rg.callback(expr, rg);
            }
            function getExpression(expression, params, callback, stat, exludeReturn) {
                var _expressionName = "$$__exprFn__" + i++;
                var _params = params.join(',');
                var code = "window.defineExpression('" + _expressionName + "', function (" + _params + ") { " + (exludeReturn ? "" : " return ") + expression + "; });";
                var rg = {
                    name: _expressionName,
                    callback: callback,
                    stat: stat,
                    code: code
                };
                register(rg);
                return rg;
            }
            internal.getExpression = getExpression;
            $defineProperty(window, "defineExpression", { get: function () { return defineExpression; }, set: function () { }, configurable: false, enumerable: false });
        })(internal || (internal = {}));
        var StringCompile = (function () {
            function StringCompile(indexer, getString, params) {
                this.indexer = indexer;
                this.getString = getString;
                this.params = params;
                this.onDataChanged = this.onDataChanged.bind(this);
            }
            StringCompile.generateIndexer = function (s, array) {
                var x = [];
                var lcur = 0;
                for (var i = 0; i < array.length; i++) {
                    var n = array[i];
                    var l = n.Index - lcur;
                    if (l > 0)
                        x.push(s.substr(lcur, l));
                    x.push(n);
                    lcur = n.Index + n.Name.length + 1;
                }
                l = s.length - lcur;
                if (l > 0)
                    x.push(s.substr(lcur, l));
                return x;
            };
            StringCompile.Compile = function (s, getString, params) {
                var rslt;
                var array = [];
                while (rslt = t.exec(s))
                    array.push({ Name: rslt[1], Index: rslt.index });
                return new StringCompile(this.generateIndexer(s, array), getString, params);
            };
            StringCompile.prototype.apply = function (data) {
                var a = this.indexer.slice();
                for (var i = 0; i < a.length; i++) {
                    var t = a[i];
                    if (typeof t !== 'string')
                        a[i] = this.getString ? this.getString(t.Name, data[t.Name]) : String(data[t.Name]);
                }
                return String.prototype.concat.apply("", a);
            };
            StringCompile.prototype.bind = function (data) {
                var ld = this.data;
                if (ld)
                    ld.removeListener(this.onDataChanged);
                if (data)
                    data.addListener(this.onDataChanged);
                this.data = data;
                return this.onDataChanged(null);
            };
            StringCompile.prototype.onDataChanged = function (ev) {
                var a = this.indexer.slice();
                for (var i = 0; i < a.length; i++) {
                    var t = a[i];
                    if (typeof t !== 'string')
                        a[i] = this.data[t.Name] || "";
                }
                return this.Value = String.prototype.concat.apply("", a);
            };
            return StringCompile;
        }());
        basic.StringCompile = StringCompile;
        var History = (function () {
            function History() {
                this.index = -1;
                this.stats = [];
            }
            History.prototype.Push = function (stat) {
                this.stats.splice(this.index + 1, 0, stat);
            };
            History.prototype.goBack = function () {
                var c = this.Current;
                c.Back();
                this.Index--;
                var c = this.Current;
                if (c)
                    c.Go();
            };
            History.prototype.goForward = function () {
                var c = this.Current;
                if (c)
                    c.Forward();
                this.Index++;
                var c = this.Current;
                if (c)
                    c.Go();
            };
            Object.defineProperty(History.prototype, "Current", {
                get: function () { return this.stats[this.index]; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(History.prototype, "Index", {
                get: function () { return this.index; },
                set: function (i) {
                    if (i < 0)
                        this.index = -1;
                    else if (i >= this.stats.length)
                        this.index = this.stats.length - 1;
                    else
                        this.index = i;
                },
                enumerable: true,
                configurable: true
            });
            return History;
        }());
        basic.History = History;
        var Routing;
        (function (Routing) {
            var history;
            (function (history) {
                history.supported = !!(window.history && window.history.pushState);
                history.initial = {
                    popped: null,
                    URL: null
                };
                function pushState(state, title, path) {
                    if (history.supported) {
                        if (Path.dispatch(path)) {
                            history.pushState(state, title, path);
                        }
                    }
                    else {
                        if (history.fallback) {
                            window.location.hash = "#" + path;
                        }
                    }
                }
                history.pushState = pushState;
                function popState(event) {
                    var initialPop = !history.initial.popped && location.href == history.initial.URL;
                    history.initial.popped = true;
                    if (initialPop)
                        return;
                    Path.dispatch(document.location.pathname);
                }
                history.popState = popState;
                function listen(fallback) {
                    history.supported = !!(window.history && window.history.pushState);
                    history.fallback = fallback;
                    if (history.supported) {
                        history.initial.popped = ('state' in window.history), history.initial.URL = location.href;
                        window.onpopstate = history.popState;
                    }
                    else {
                        if (history.fallback) {
                            for (var route in Path.routes.defined) {
                                if (route.charAt(0) != "#") {
                                    Path.routes.defined["#" + route] = Path.routes.defined[route];
                                    Path.routes.defined["#" + route].path = "#" + route;
                                }
                            }
                            Path.listen();
                        }
                    }
                }
                history.listen = listen;
            })(history = Routing.history || (Routing.history = {}));
            var Path;
            (function (Path) {
                function map(path) {
                    if (Path.routes.defined.hasOwnProperty(path)) {
                        return Path.routes.defined[path];
                    }
                    else {
                        return new Path.core.route(path);
                    }
                }
                Path.map = map;
                function root(path) {
                    Path.routes.root = path;
                }
                Path.root = root;
                function rescue(fn) {
                    Path.routes.rescue = fn;
                }
                Path.rescue = rescue;
                function match(path, parameterize) {
                    var params = {}, route = null, possible_routes, slice, i, j, compare;
                    for (route in Path.routes.defined) {
                        if (route !== null && route !== undefined) {
                            route = Path.routes.defined[route];
                            possible_routes = route.partition();
                            for (j = 0; j < possible_routes.length; j++) {
                                slice = possible_routes[j];
                                compare = path;
                                if (slice.search(/:/) > 0) {
                                    for (i = 0; i < slice.split("/").length; i++) {
                                        if ((i < compare.split("/").length) && (slice.split("/")[i].charAt(0) === ":")) {
                                            params[slice.split('/')[i].replace(/:/, '')] = compare.split("/")[i];
                                            compare = compare.replace(compare.split("/")[i], slice.split("/")[i]);
                                        }
                                    }
                                }
                                if (slice === compare) {
                                    if (parameterize) {
                                        route.params = params;
                                    }
                                    return route;
                                }
                            }
                        }
                    }
                    return null;
                }
                Path.match = match;
                function dispatch(passed_route) {
                    var previous_route, matched_route;
                    if (Path.routes.current !== passed_route) {
                        Path.routes.previous = Path.routes.current;
                        Path.routes.current = passed_route;
                        matched_route = Path.match(passed_route, true);
                        if (Path.routes.previous) {
                            previous_route = Path.match(Path.routes.previous);
                            if (previous_route !== null && previous_route.do_exit !== null) {
                                previous_route.do_exit();
                            }
                        }
                        if (matched_route !== null) {
                            matched_route.run();
                            return true;
                        }
                        else {
                            if (Path.routes.rescue !== null) {
                                Path.routes.rescue();
                            }
                        }
                    }
                }
                Path.dispatch = dispatch;
                function listen() {
                    var fn = function () { Path.dispatch(location.hash); };
                    if (location.hash === "" && Path.routes.root !== null)
                        location.hash = Path.routes.root;
                    if ("onhashchange" in window && (!document.documentMode || document.documentMode >= 8)) {
                        var cc = Object.getOwnPropertyDescriptor(window, 'onhashchange');
                        $defineProperty(window, 'onhashchange', { set: function (v) { cc.set.call(this, fn); }, get: function () { return fn; }, configurable: false, enumerable: false });
                        var cc = Object.getOwnPropertyDescriptor(window, 'onpopstate');
                        $defineProperty(window, 'onpopstate', { set: function (v) { cc.set.call(this, fn); }, get: function () { return fn; }, configurable: false, enumerable: false });
                    }
                    else {
                        setInterval(fn, 50);
                    }
                    if (location.hash !== "") {
                        Path.dispatch(location.hash);
                    }
                }
                Path.listen = listen;
                var core;
                (function (core) {
                    var route = (function () {
                        function route(path) {
                            this.path = path;
                            this.action = null;
                            this.do_enter = [];
                            this.do_exit = null;
                            this.params = {};
                            Path.routes.defined[path] = this;
                        }
                        route.prototype.to = function (fn) {
                            this.action = fn;
                            return this;
                        };
                        route.prototype.enter = function (fns) {
                            if (fns instanceof Array) {
                                this.do_enter = this.do_enter.concat(fns);
                            }
                            else {
                                this.do_enter.push(fns);
                            }
                            return this;
                        };
                        route.prototype.exit = function (fn) {
                            this.do_exit = fn;
                            return this;
                        };
                        route.prototype.partition = function () {
                            var parts = [], options = [], re = /\(([^}]+?)\)/g, text, i;
                            while (text = re.exec(this.path)) {
                                parts.push(text[1]);
                            }
                            options.push(this.path.split("(")[0]);
                            for (i = 0; i < parts.length; i++) {
                                options.push(options[options.length - 1] + parts[i]);
                            }
                            return options;
                        };
                        route.prototype.run = function () {
                            var halt_execution = false, i, result;
                            if (Path.routes.defined[this.path].hasOwnProperty("do_enter")) {
                                if (Path.routes.defined[this.path].do_enter.length > 0) {
                                    for (i = 0; i < Path.routes.defined[this.path].do_enter.length; i++) {
                                        result = Path.routes.defined[this.path].do_enter[i].apply(this, null);
                                        if (result === false) {
                                            halt_execution = true;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (!halt_execution) {
                                Path.routes.defined[this.path].action();
                            }
                        };
                        return route;
                    }());
                    core.route = route;
                })(core = Path.core || (Path.core = {}));
                Path.routes = {
                    'current': null,
                    'root': null,
                    'rescue': null,
                    'previous': null,
                    'defined': {},
                };
            })(Path = Routing.Path || (Routing.Path = {}));
            ;
        })(Routing = basic.Routing || (basic.Routing = {}));
        var Url = (function () {
            function Url(url) {
                if (url)
                    this.init(url);
            }
            Url.prototype.getEName = function (defaultExt) {
                if (this.IsFolder)
                    return "";
                var defaultExt = this.ext ? this.ext : this.moduleType >= 0 ? ModuleExt[this.moduleType] || defaultExt : defaultExt;
                var s = this.moduleName;
                if (defaultExt)
                    s += "." + defaultExt;
                if (this.params)
                    s += "?" + this.params;
                return s;
            };
            Url.prototype.toString = function () {
                var s = "";
                if (this.IsExternal)
                    s = this.host;
                s += "/";
                if (this.path.length > 0)
                    s += this.path.join('/') + '/';
                s += this.getEName();
                return s;
            };
            Url.prototype.init = function (url) {
                var _a, _b;
                url = url.toLowerCase().trim();
                var i = url.indexOf('|');
                if (i !== -1) {
                    this.moduleType = ModuleType[url.substr(0, i)];
                    url = url.substr(i + 1);
                }
                if (url.indexOf('//') === 0)
                    _a = Url.getHost(url = url.substr(2)), this.host = _a[0], this.path = _a[1];
                else
                    _b = Url.getFullHost(url), this.host = _b[0], this.path = _b[1];
                var lp = this.path.pop();
                if (lp) {
                    this.IsFolder = false;
                    var iq = lp.indexOf('?');
                    var ename = iq === -1 ? lp : lp.substr(0, iq);
                    if (iq == -1)
                        this.params = "";
                    else
                        this.params = lp.substr(iq + 1);
                    iq = iq === -1 ? lp.length - 1 : i;
                    var iext = ename.lastIndexOf('.');
                    if (iext !== -1) {
                        this.ext = ename.substr(iext + 1);
                        this.moduleName = ename.substr(0, iext);
                    }
                    else {
                        this.moduleName = ename;
                    }
                }
                else {
                    this.IsFolder = true;
                    this.moduleType = ModuleType.folder;
                }
                if (this.moduleType == undefined)
                    this.moduleType = !this.ext ? ModuleType.code : (ModuleType[ModuleType[ModuleExt[this.ext]]]);
                if (this.moduleType === undefined && this.ext)
                    this.moduleType = ModuleType.uknown;
                return this;
            };
            Url.getHost = function (url) {
                var i = url.indexOf('://');
                var pi = url.indexOf('/');
                if (pi < i) {
                    path = url.split('/');
                    if (pi === 0)
                        path.shift(), host = Url.rootUrl.host;
                    ;
                    return [host, path];
                }
                if (i === -1)
                    throw " Invalid Url ";
                var s = url.indexOf('/', i + 3);
                var host = s === -1 ? url : url.substr(0, s);
                var path = s === -1 ? [""] : url.substr(s + 1).split('/');
                return [host, path];
            };
            Url.getFullHost = function (url) {
                var i = url.indexOf('://');
                var pi = url.indexOf('/');
                if (i === -1 || pi < i) {
                    path = url.split('/');
                    if (pi === 0)
                        path.shift(), host = Url.rootUrl.host;
                    ;
                }
                else {
                    var s = url.indexOf('/', i + 3);
                    var host = s === -1 ? url : url.substr(0, s);
                    var path = s === -1 ? [""] : url.substr(s + 1).split('/');
                }
                return [host, path];
            };
            Url.prototype.Combine = function (path) {
                var t = typeof path === 'string' ? new Url(path) : path;
                if (t.IsExternal)
                    return t;
                var c = new Url();
                c.host = this.host;
                c.path = this.path == null ? t.path : t.path == null ? null : this.path.concat(t.path);
                c.moduleType = t.moduleType;
                c.moduleName = t.moduleName;
                c.ext = t.ext;
                c.params = t.params;
                return c;
            };
            Object.defineProperty(Url.prototype, "IsExternal", {
                get: function () { return this.host != null && this.host != ""; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Url.prototype, "isAsset", {
                get: function () { return this.moduleType !== ModuleType.code; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Url.prototype, "path", {
                get: function () { return this._path; },
                set: function (v) { Url.RevalidatePath(v, this.IsExternal); this._path = v; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Url.prototype, "FullPath", {
                get: function () { return this.toString(); },
                enumerable: true,
                configurable: true
            });
            Url.prototype.SameHostAs = function (url) {
                var h1 = this.IsExternal ? this.host : Url.rootUrl.host;
                var h2 = url.IsExternal ? url.host : Url.rootUrl.host;
                return h1 === h2;
            };
            Url.RevalidatePath = function (ary, isFullPath) {
                if (!ary)
                    return;
                var i;
                var part;
                for (i = 0; i < ary.length; i++) {
                    part = ary[i];
                    if (part === '.') {
                        ary.splice(i, 1);
                        i -= 1;
                    }
                    else if (part === '..') {
                        if (isFullPath) {
                            if (i == 0) {
                                ary.splice(i, 1);
                                i -= 1;
                            }
                            else {
                                ary.splice(i - 1, 2);
                                i -= 2;
                            }
                        }
                        else if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                            continue;
                        }
                        else if (i > 0) {
                            ary.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
            };
            Url.prototype.intersect = function (url) {
                if (!this.SameHostAs(url))
                    return null;
                var c = new Url();
                c.host = this.host;
                return c;
            };
            Object.defineProperty(Url.prototype, "IsInternal", {
                get: function () {
                    return this.IsExternal ? Url.rootUrl.SameHostAs(this) : true;
                },
                enumerable: true,
                configurable: true
            });
            Url.rootUrl = new Url(document.location.href);
            return Url;
        }());
        basic.Url = Url;
    })(basic = exports.basic || (exports.basic = {}));
    var query;
    (function (query) {
        function hasClass(t, d, param) {
            return d instanceof Element && d.classList.contains(param);
        }
        query.hasClass = hasClass;
        function hasTag(t, d, param) {
            return d instanceof Element && d.tagName === param.toUpperCase();
        }
        query.hasTag = hasTag;
        function insertAfter(newNode, referenceNode) {
            var next = referenceNode.nextSibling;
            if (next)
                referenceNode.parentNode.insertBefore(newNode, next);
            else
                referenceNode.parentNode.appendChild(newNode);
        }
        var __ = (function () {
            function __(dom) {
                this.dom = dom;
            }
            __.prototype.eq = function (n) {
                var d = n < 0 ? this.dom[this.dom.length - n] : this.dom[n];
                if (d)
                    return new _(d);
                return new ___();
            };
            __.prototype.removeClass = function (className) {
                for (var i = 0; i < this.dom.length; i++) {
                    var d = this.dom[i];
                    if (d instanceof Element)
                        d.classList.remove(className);
                }
                return this;
            };
            __.prototype.addClass = function (className) {
                for (var i = 0; i < this.dom.length; i++) {
                    var d = this.dom[i];
                    if (d instanceof Element)
                        d.classList.add(className);
                }
                return this;
            };
            __.prototype.hasClass = function (className) {
                for (var i = 0; i < this.dom.length; i++) {
                    var cd = this.dom[i];
                    if (cd instanceof Element)
                        if (cd.classList.contains(className))
                            return true;
                }
                return false;
            };
            __.prototype.parent = function (selector, param) {
                if (this.dom.length == 1)
                    return new _(this.dom[0]).parent(selector, param);
                else if (this.dom.length === 0)
                    return new ___();
                throw null;
            };
            __.prototype.submit = function () {
                for (var i = 0; i < this.dom.length; i++) {
                    var cd = this.dom[i];
                    if (cd instanceof HTMLFormElement)
                        cd.submit();
                }
            };
            __.prototype.siblings = function (selector, param) {
                throw new Error("Method not implemented.");
            };
            __.prototype.appendTo = function (dom) {
                throw new Error("Method not implemented.");
            };
            Object.defineProperty(__.prototype, "length", {
                get: function () { return this.dom.length; },
                enumerable: true,
                configurable: true
            });
            __.prototype.detach = function () {
                for (var i = 0; i < this.dom.length; i++) {
                    var cd = this.dom[i];
                    cd.parentNode.removeChild(cd);
                }
                return this;
            };
            __.prototype.insertBefore = function (thisDom) {
                for (var i = 0; i < this.dom.length; i++) {
                    var cd = this.dom[i];
                    if (cd != null)
                        cd.parentNode.removeChild(cd);
                    thisDom.parentElement.insertBefore(cd, thisDom);
                }
                return this;
            };
            __.prototype.insertAfter = function (referenceNode) {
                for (var i = 0; i < this.dom.length; i++) {
                    var cd = this.dom[i];
                    if (cd != null)
                        cd.parentNode.removeChild(cd);
                    insertAfter(cd, referenceNode);
                }
                return this;
            };
            __.prototype.find = function (selector, param) {
                var array = [];
                for (var i = 0; i < this.dom.length; i++) {
                    var d = this.dom[i];
                    var w = document.createTreeWalker(d, NodeFilter.SHOW_ALL, {
                        param: param,
                        this: this,
                        acceptNode: function (node) {
                            return selector(this.this, node, this.param) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
                        }
                    }, false);
                    while (w.nextNode())
                        array.push(w.currentNode);
                }
                return new __(array);
            };
            __.prototype.children = function (selector, param) {
                var r = [];
                for (var i = 0; i < this.dom.length; i++) {
                    var d = this.dom[i];
                    if (d instanceof Element)
                        for (var i = 0; i < d.children.length; i++) {
                            var t = d.children[i];
                            if (selector(this, t, param))
                                r.push(t);
                        }
                }
                return new __(r);
            };
            __.prototype.removeChildren = function (selector, param) {
                for (var i = 0; i < this.dom.length; i++) {
                    var d = this.dom[i];
                    if (d instanceof Element)
                        for (var i = 0; i < d.children.length; i++) {
                            var t = d.children[i];
                            if (selector(this, t, param)) {
                                d.removeChild(t);
                                i--;
                            }
                        }
                }
                return this;
            };
            __.prototype.add = function (dom) {
                if (dom instanceof Array) {
                    for (var i = 0; i < dom.length; i++)
                        this.dom.push(dom[i]);
                }
                else
                    this.dom.push(dom);
                return this;
            };
            __.prototype.toggleClass = function (className) {
                var d = this.dom;
                for (var i = 0; i < d.length; i++) {
                    var c = d[i];
                    if (c instanceof Element)
                        if (c.classList.contains(className))
                            c.classList.remove(className);
                        else
                            c.classList.add(className);
                }
                return this;
            };
            __.prototype.toArray = function () {
                return this.dom;
            };
            return __;
        }());
        query.__ = __;
        var _ = (function () {
            function _(dom) {
                this.dom = dom;
            }
            _.prototype.eq = function (n) {
                if (n === 0 || n === -1)
                    return this;
                return new ___();
            };
            _.prototype.hasClass = function (className) {
                var cd = this.dom;
                if (cd instanceof Element)
                    if (cd.classList.contains(className))
                        return true;
                return false;
            };
            _.prototype.parent = function (selector, param) {
                var t = this.dom.parentNode;
                while (t != document) {
                    if (selector(this, t, param))
                        return new _(t);
                    t = t.parentNode;
                }
                return new ___();
            };
            Object.defineProperty(_.prototype, "length", {
                get: function () { return 1; },
                enumerable: true,
                configurable: true
            });
            _.prototype.submit = function () {
                var cd = this.dom;
                if (cd instanceof HTMLFormElement)
                    cd.submit();
            };
            _.prototype.siblings = function (selector, param) {
                var t = this.dom;
                while (t.previousSibling) {
                    t = t.previousSibling;
                }
                var arr = [];
                do {
                    if (selector(this, t, param))
                        arr.push(t);
                    t = t.nextSibling;
                } while (t);
                return new __(arr);
            };
            _.prototype.detach = function () {
                if (this.dom.parentNode != null)
                    this.dom.parentNode.removeChild(this.dom);
                return this;
            };
            _.prototype.add = function (dom) {
                var array;
                if (dom instanceof Array) {
                    array = dom.slice();
                    array.unshift(this.dom);
                }
                else
                    array = [this.dom, dom];
                return new __(array);
            };
            _.prototype.toggleClass = function (className) {
                var c = this.dom;
                if (c instanceof Element)
                    if (c.classList.contains(className))
                        c.classList.remove(className);
                    else
                        c.classList.add(className);
            };
            _.prototype.insertBefore = function (thisDom) {
                if (this.dom.parentNode != null)
                    this.dom.parentNode.removeChild(this.dom);
                thisDom.parentElement.insertBefore(this.dom, thisDom);
                return this;
            };
            _.prototype.insertAfter = function (thisDom) {
                if (this.dom.parentNode != null)
                    this.dom.parentNode.removeChild(this.dom);
                insertAfter(this.dom, thisDom);
                return this;
            };
            _.prototype.children = function (selector, param) {
                var r = [];
                var d = this.dom;
                if (d instanceof HTMLElement)
                    for (var i = 0; i < d.children.length; i++) {
                        var t = d.children[i];
                        if (selector(this, t, param))
                            r.push(t);
                    }
                return new __(r);
            };
            _.prototype.removeChildren = function (selector, param) {
                var d = this.dom;
                if (d instanceof HTMLElement)
                    for (var i = 0; i < d.children.length; i++) {
                        var t = d.children[i];
                        if (selector(this, t, param)) {
                            d.removeChild(t);
                            i--;
                        }
                    }
                return this;
            };
            _.prototype.appendTo = function (dom) {
                this.detach();
                dom.appendChild(this.dom);
            };
            _.prototype.find = function (selector, param) {
                var array = [];
                var w = document.createTreeWalker(this.dom, NodeFilter.SHOW_ALL, {
                    param: param,
                    this: this,
                    acceptNode: function (node) {
                        return selector(this.this, node, this.param) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
                    }
                }, false);
                while (w.nextNode())
                    array.push(w.currentNode);
                return new __(array);
            };
            _.prototype.removeClass = function (className) {
                var d = this.dom;
                if (d instanceof Element)
                    d.classList.remove(className);
                return this;
            };
            _.prototype.addClass = function (className) {
                var d = this.dom;
                if (d instanceof Element)
                    d.classList.add(className);
                return this;
            };
            _.prototype.toArray = function () {
                return [this.dom];
            };
            return _;
        }());
        query._ = _;
        var ___ = (function () {
            function ___() {
            }
            ___.prototype.eq = function (n) {
                return this;
            };
            ___.prototype.removeClass = function (className) {
                return this;
            };
            ___.prototype.addClass = function (classNm) { return this; };
            ___.prototype.hasClass = function (className) {
                return false;
            };
            ___.prototype.detach = function () {
                return this;
            };
            ___.prototype.insertBefore = function (thisDom) {
                return this;
            };
            ___.prototype.insertAfter = function (thisDom) {
                return this;
            };
            ___.prototype.children = function (selector, param) {
                return new __([]);
            };
            ___.prototype.removeChildren = function (selector, param) {
                return this;
            };
            ___.prototype.find = function (selector, param) {
                return new __([]);
            };
            ___.prototype.add = function (dom) {
                return query.$$(dom);
            };
            ___.prototype.toggleClass = function (calssName) {
                return this;
            };
            ___.prototype.siblings = function (selector, param) {
                return new __([]);
            };
            ___.prototype.appendTo = function (dom) {
                return this;
            };
            Object.defineProperty(___.prototype, "length", {
                get: function () { return 0; },
                enumerable: true,
                configurable: true
            });
            ___.prototype.submit = function () {
                return this;
            };
            ___.prototype.parent = function (selector, param) {
                return this;
            };
            ___.prototype.toArray = function () {
                return [];
            };
            return ___;
        }());
        function $$(dom) {
            return dom instanceof Array ? new __(dom) : new _(dom);
        }
        query.$$ = $$;
    })(query = exports.query || (exports.query = {}));
    function $$(dom) { return query.$$(dom); }
    exports.$$ = $$;
    var reflection;
    (function (reflection) {
        var MethodGroup = (function () {
            function MethodGroup(f, Owner) {
                this.Owner = Owner;
                this._list = [];
                if (f)
                    this._list.push(f);
            }
            MethodGroup.prototype.add = function (m) {
                this._list.push(m);
                return this;
            };
            MethodGroup.prototype.With = function (owner) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var x = this.Owner;
                this.Owner = owner;
                var r = helper.TryCatch(this, this.Invoke, void 0, args);
                this.Owner = x;
                return r;
            };
            MethodGroup.prototype.Clone = function () {
                var t = new MethodGroup();
                t._list = this._list.slice();
                return t;
            };
            return MethodGroup;
        }());
        reflection.MethodGroup = MethodGroup;
        MethodGroup.prototype.Invoke = function () {
            for (var i = 0; i < this._list.length; i++) {
                var f = this._list[i];
                var r;
                try {
                    if (typeof f === 'function') {
                        r = f.apply(this.Owner, arguments);
                    }
                    else if (f instanceof MethodGroup)
                        r = f.Invoke.apply(f, arguments);
                    else if ('Invoke' in f) {
                        r = f.Invoke.apply(f.Owner || this.Owner, arguments);
                    }
                }
                catch (e) {
                }
            }
            return r;
        };
        function ToMethodGroup(x) {
            if (x instanceof MethodGroup)
                return x;
            return new MethodGroup(x);
        }
        reflection.ToMethodGroup = ToMethodGroup;
        function Invoke(f, owner, args) {
            var r;
            try {
                if (typeof f === 'function') {
                    r = f.apply(owner, args);
                }
                else if (f instanceof MethodGroup)
                    r = f.Invoke.apply(f, args);
                else if ('Invoke' in f) {
                    r = f.Invoke.apply(f.Owner || owner, args);
                }
            }
            catch (e) {
            }
            return r;
        }
        reflection.Invoke = Invoke;
        var $slice = Array.prototype.slice;
        function ReCalc(callHistory, befor, direct) {
            if (!callHistory)
                callHistory = this.Stack[this.Stack.length - 1];
            if (typeof callHistory === 'number')
                var callHistory = this.Stack[callHistory];
            if (befor)
                befor.apply(callHistory.caller, callHistory.arguments);
            if (callHistory)
                return (direct ? this.fn : this.proxy).apply(callHistory.caller, callHistory.arguments);
        }
        function debug(dbgInfo, callback) {
            if (!dbgInfo.Stack)
                dbgInfo.Stack = [];
            dbgInfo.ReCalc = ReCalc;
            dbgInfo.proxy = function () {
                var args = $slice.call(arguments);
                if (dbgInfo.obsArgs !== false)
                    for (var i = 0; i < args.length; i++) {
                        if (typeof args[i] === 'function')
                            if (args[i].__isProxy)
                                debug({
                                    save: dbgInfo.save,
                                    callback: dbgInfo.callback,
                                    obsArgs: dbgInfo.obsArgs,
                                    Stack: dbgInfo.Stack,
                                    fn: args[i],
                                    ReCalc: ReCalc,
                                    debug: false
                                }, function (s) { args[i] = s.proxy; });
                    }
                if (dbgInfo.debug)
                    stop();
                if (dbgInfo.save)
                    dbgInfo.Stack.push({ caller: this, arguments: args, fn: dbgInfo.fn });
                if (dbgInfo.callback)
                    dbgInfo.callback.apply(this, args);
                return dbgInfo.fn && dbgInfo.fn.apply(this, args);
            };
            dbgInfo.proxy.__isProxy = true;
            dbgInfo.proxy.__Fn = dbgInfo.fn;
            if (callback)
                callback(dbgInfo);
            return dbgInfo;
        }
        function debugObj(obj, stack) {
            for (var i in obj) {
                try {
                    var v = obj[i];
                }
                catch (e) {
                    continue;
                }
                if (typeof v === 'function')
                    (function (fName) {
                        debug({ save: true, Stack: stack, fn: obj[fName], debug: false }, function (s) { obj[fName] = s.proxy; });
                    })(i);
            }
        }
        function isInstanceOfClassName(instance, className) {
            while ((instance = instance.__proto__)) {
                if (instance.constructor.name == className)
                    return true;
            }
            return false;
        }
        reflection.isInstanceOfClassName = isInstanceOfClassName;
        function isInstanceOfClass(instance, type) {
            while ((instance = instance.__proto__)) {
                if (instance.constructor === type)
                    return true;
            }
            return false;
        }
        reflection.isInstanceOfClass = isInstanceOfClass;
        function _isInstanceOf(type, superType) {
            var t = type;
            while (type) {
                if (type == superType)
                    return true;
                t = t.base;
            }
            return false;
        }
        reflection._isInstanceOf = _isInstanceOf;
        function GetBaseType(type) {
            if (type instanceof reflection.GenericType) {
                return type.GetBaseType();
            }
            var p = type.prototype.__proto__;
            if (p == null)
                return null;
            return p.constructor;
        }
        reflection.GetBaseType = GetBaseType;
        function GetBaseTypes(type, totype) {
            var l = [];
            var pr = type.prototype;
            do {
                if (pr.constructor == totype)
                    break;
                l.push(pr.constructor);
                pr = pr.__proto__;
            } while (pr !== null);
            return l;
        }
        reflection.GetBaseTypes = GetBaseTypes;
        function IsInstanceOf(type, superType) {
            if (type === superType || superType === Object)
                return true;
            if (type.constructor == reflection.GenericType)
                type = type.Constructor;
            if (superType.constructor == reflection.GenericType)
                superType = superType.Constructor;
            var pr = type.prototype;
            do {
                if (pr.constructor === superType)
                    return true;
                pr = pr.__proto__;
            } while (pr !== null);
            return false;
        }
        reflection.IsInstanceOf = IsInstanceOf;
        var Type = (function () {
            function Type(type) {
                this.passed = [];
                this.type = type;
            }
            Type.prototype._getPath = function (root) {
                for (var i in root) {
                    var v = root[i];
                    if (this.passed.indexOf(v) !== -1)
                        continue;
                    this.passed.push(v);
                    switch (typeof v) {
                        case 'string':
                        case 'number':
                        case 'boolean':
                        case 'undefined': continue;
                        default:
                            if (v === this.type) {
                                return i;
                            }
                            if (v instanceof Function)
                                continue;
                            var x = this._getPath(v);
                            if (x != null)
                                return i + '.' + x;
                            break;
                    }
                }
            };
            Type.prototype.GetType = function (root) {
                if (this.passed == null)
                    this.passed = [];
                this.passed.length = 0;
                return this._getPath(root);
            };
            return Type;
        }());
        reflection.Type = Type;
        var _gtypes;
        function gtypes() {
            return _gtypes || (_gtypes = new collection.Dictionary("GTypes", true));
        }
        var GenericType = (function () {
            function GenericType(Constructor, Params, base) {
                this.Constructor = Constructor;
                this.Params = Params;
                this.prototype = Constructor.prototype;
                if (!_p)
                    throw this;
                gtypes().Set(this, base);
                _p = false;
            }
            Object.defineProperty(GenericType.prototype, "base", {
                get: function () { return gtypes().Get(this); },
                enumerable: true,
                configurable: true
            });
            GenericType.prototype.GetBaseType = function () {
                return gtypes().Get(this);
            };
            GenericType.GetType = function (type, params, checkOnly, base) {
                if (typeof type !== 'function')
                    throw 'type must be fanction';
                if (params == null || params.length === 0)
                    return type;
                var i = this.i(type);
                for (var i = gtypes().Count - 1; i >= 0; i--) {
                    var e = gtypes().GetKeyAt(i);
                    if (type == e.Constructor) {
                        if (params.length == e.Params.length) {
                            var p = e.Params;
                            for (var j = p.length - 1; j >= 0; j--) {
                                if (p[j] != params[j]) {
                                    p = undefined;
                                    break;
                                }
                            }
                            if (p)
                                return e;
                        }
                    }
                }
                if (checkOnly)
                    return;
                _p = true;
                return new GenericType(type, params, base == null ? GetBaseType(type) : base);
            };
            GenericType.i = function (f) { return f instanceof GenericType ? 1 : 0; };
            GenericType.IsInstanceOf = function (type, superType) {
                return this._isInstanceOf[this.i(type) + this.i(superType) * 2](type, superType);
            };
            GenericType._isInstanceOf = [
                function (type, superType) {
                    return IsInstanceOf(type, superType);
                },
                function (type, superGType) {
                    return IsInstanceOf(type, superGType.Constructor);
                },
                function (gtype, superGType) {
                    return IsInstanceOf(gtype.Constructor, superGType.Constructor);
                },
                function (gtype, superType) {
                    return IsInstanceOf(gtype.Constructor, superType);
                }
            ];
            return GenericType;
        }());
        reflection.GenericType = GenericType;
        Function.prototype.IsInstanceOf = reflection.IsInstanceOf;
        var DelayedType = (function () {
            function DelayedType(type) {
                this._type = type;
            }
            Object.defineProperty(DelayedType.prototype, "Type", {
                get: function () {
                    return this._type();
                },
                enumerable: true,
                configurable: true
            });
            return DelayedType;
        }());
        reflection.DelayedType = DelayedType;
        ;
        var Observable;
        (function (Observable) {
            var events = [];
            function observeProperty(obj, propName, evnt) {
                var c = Object.getOwnPropertyDescriptor(obj, propName);
                $defineProperty(obj, propName, {
                    get: c.get,
                    set: function (v) {
                        var oldValue = c.get.call(this);
                        if (v === oldValue)
                            return;
                        c.set.call(this, v);
                        var event = events.length == 0 ? document.createEvent('Event') : events.pop();
                        event.initEvent(evnt, true, true);
                        event.oldValue = oldValue;
                        event.newValue = v;
                        dispatchEvent(new Event(evnt, { bubbles: false, cancelable: true, scoped: false }));
                        if (this instanceof EventTarget)
                            this.dispatchEvent(event);
                        else
                            dispatchEvent(event);
                        events.push(event);
                    }
                });
            }
            Observable.observeProperty = observeProperty;
            function setObservableProperty(obj, propName, get, set, evnt) {
                $defineProperty(obj, propName, {
                    get: get,
                    set: function (v) {
                        var oldValue = get.call(this);
                        if (v === oldValue)
                            return;
                        set.call(this, v);
                        var event = events.length == 0 ? document.createEvent('Event') : events.pop();
                        event.initEvent(evnt, true, true);
                        event.oldValue = oldValue;
                        event.newValue = v;
                        dispatchEvent(new Event(evnt, { bubbles: true, cancelable: true, scoped: true }));
                        if (this instanceof EventTarget)
                            this.dispatchEvent(event);
                        else
                            dispatchEvent(event);
                        events.push(event);
                    }
                });
            }
            Observable.setObservableProperty = setObservableProperty;
            $defineProperty(Node.prototype, 'value', { get: function () { return this.textContent; }, set: function (v) { this.textContent = v; } });
            observeProperty(Node.prototype, 'textContent', 'textContentChanged');
            function ObjectToObservable(o) {
            }
            Observable.ObjectToObservable = ObjectToObservable;
        })(Observable = reflection.Observable || (reflection.Observable = {}));
        function IsClass(obj) {
            return obj && 'prototype' in obj && typeof obj === 'function';
        }
        reflection.IsClass = IsClass;
        function IsPrototype(obj) {
            return typeof obj === 'object' && 'constructor' in obj && IsClass(obj.constructor) && !(obj instanceof obj.constructor);
        }
        reflection.IsPrototype = IsPrototype;
        function IsInstance(obj) {
            return 'constructor' in obj && obj instanceof obj.constructor;
        }
        reflection.IsInstance = IsInstance;
    })(reflection = exports.reflection || (exports.reflection = {}));
    var services;
    (function (services) {
        services.Service = (function () {
            function execute() {
                var i = binds.length > 100 ? 100 : binds.length;
                while (i > 0) {
                    i--;
                    var t = binds.pop();
                    var bs = t[0];
                    var arg = t[1];
                    for (var i = 0; i < bs.length; i++) {
                        var b = bs[i];
                        b.handleEvent(arg);
                        b.IsWaiting = false;
                    }
                }
            }
            var Service = (function () {
                function Service() {
                }
                Service.Push = function (ps, e) {
                    var a = e.prop.IsAsync;
                    var x = new Array();
                    for (var i = 0; i < ps.length; i++) {
                        var p = ps[i];
                        if (a) {
                            if (!p.IsWaiting) {
                                p.IsWaiting = true;
                                x.push(p);
                            }
                            continue;
                        }
                        else
                            p.handleEvent(e);
                    }
                    if (x.length > 0)
                        binds.push([x, e]);
                };
                Service.Close = function () {
                    isRunning = true;
                    clearInterval(id);
                };
                Service.Restart = function () {
                    clearInterval(id);
                    id = setInterval(execute, 1000);
                    isRunning = true;
                };
                Object.defineProperty(Service, "IsRunning", {
                    get: function () { return isRunning; },
                    enumerable: true,
                    configurable: true
                });
                return Service;
            }());
            var isRunning = true;
            var binds = [];
            return Service;
        })();
    })(services = exports.services || (exports.services = {}));
    var internal;
    (function (internal) {
        var __data = (function () {
            function __data(name, event, delegate) {
                this.name = name;
                this.event = event;
                this.delegate = delegate;
            }
            return __data;
        }());
        internal.__data = __data;
    })(internal || (internal = {}));
    var attributes;
    (function (attributes) {
        var _store = new Map();
        function getOrCreate(k) {
            var v = _store.get(k);
            if (typeof v === 'undefined')
                _store.set(k, v = []);
            return v;
        }
        function setDPValue(target, name, dpprop) {
            Object.defineProperty(target, name, { value: dpprop, configurable: false, enumerable: false, writable: false });
        }
        function property(type, defaultValue, Name, changed, check, attribute, StaticName) {
            return function (target, propertyKey, descriptor) {
                if (!reflection.IsPrototype(target))
                    throw 'Invalid Implimentation of property Attribute';
                var x = getOrCreate(target.constructor);
                var y = bind.DObject.CreateField(Name || propertyKey, type, defaultValue, changed, check, attribute);
                if (StaticName === void 0)
                    StaticName = "DP" + (Name || propertyKey);
                if (StaticName)
                    setDPValue(target.constructor, StaticName, y);
                x.push(y);
                type = void 0;
                defaultValue = void 0;
                changed = void 0;
                check = void 0;
            };
        }
        attributes.property = property;
        function property1(type, options) {
            return function (target, propertyKey, descriptor) {
                if (!reflection.IsPrototype(target))
                    throw 'Invalid Implimentation of property Attribute';
                var x = getOrCreate(target.constructor);
                var y = bind.DObject.CreateField(options.Name || propertyKey, type, options.defaultValue, options.changed, options.check, options.attribute);
                if (options.StaticName === void 0)
                    options.StaticName = "DP" + (options.Name || propertyKey);
                if (options.StaticName)
                    setDPValue(target.constructor, options.StaticName, y);
                x.push(y);
                options = void 0;
            };
        }
        attributes.property1 = property1;
        function getProperties(type) {
            type = reflection.IsClass(type) ? type : type.constructor;
            return getOrCreate(type);
        }
        attributes.getProperties = getProperties;
        function Delete(type) {
            return _store.delete(type);
        }
        attributes.Delete = Delete;
        function ComponentParser(tagName, createControl, check) {
            Processor.Manager.registerComponent({
                name: tagName, execute: createControl, check: check, attribute: void 0
            });
            return void 0;
        }
        attributes.ComponentParser = ComponentParser;
    })(attributes = exports.attributes || (exports.attributes = {}));
    var bind;
    (function (bind) {
        var Job = (function () {
            function Job(Name, Todo, Check, OnError, OnInitialize, OnScopDisposing) {
                this.Name = Name;
                this.Todo = Todo;
                this.Check = Check;
                this.OnError = OnError;
                this.OnInitialize = OnInitialize;
                this.OnScopDisposing = OnScopDisposing;
                jobs[Name] = this;
            }
            return Job;
        }());
        bind.Job = Job;
        var Jobs = (function () {
            function Jobs(Name) {
                this.Name = Name;
                jobs[Name] = this;
            }
            Jobs.prototype.Todo = function (job, e) {
            };
            Jobs.prototype.Check = function (job, e) {
            };
            Jobs.prototype.OnError = function (job, e) { };
            Jobs.prototype.OnInitialize = function (job, e) { };
            Jobs.prototype.OnScopDisposing = function (job, e) {
            };
            Jobs.prototype.push = function (jobName) {
            };
            return Jobs;
        }());
        bind.Jobs = Jobs;
        var JobInstance = (function () {
            function JobInstance(Scop, job, dom) {
                this.Scop = Scop;
                this.job = job;
                this.dom = dom;
                this._events = [];
                this._store = {};
                this.propb = Scop.OnPropertyChanged(bind.Scop.DPValue, this.ValueChanged, this);
            }
            JobInstance.prototype.addEventListener = function (name, event, delegate) {
                this._events.push(new internal.__data(name, event, delegate));
                this.dom.addEventListener(event, delegate);
            };
            JobInstance.prototype.removeEventListener = function (name) {
                var t = this._events;
                for (var i = t.length - 1; i >= 0; i--) {
                    var d = t[i];
                    if (d.name == name) {
                        this.dom.removeEventListener(d.event, d.delegate);
                        t.splice(i, 1);
                        return;
                    }
                }
            };
            JobInstance.prototype.getEvent = function (name) {
                var t = this._events;
                for (var i = t.length; i >= 0; i--) {
                    var d = t[i];
                    if (d.name == name)
                        return d.delegate;
                }
                return null;
            };
            JobInstance.prototype.ValueChanged = function (s, e) {
                PaintThread.Push(this, e, s);
            };
            JobInstance.prototype.Dispose = function () {
                var dx = this.job.OnScopDisposing;
                if (dx != null)
                    dx(this, null);
                var t = this._events;
                for (var i = t.length - 1; i >= 0; i--) {
                    var d = t[i];
                    this.dom.removeEventListener(d.event, d.delegate);
                    t[i] = null;
                }
                this._events.splice(0);
                this._events = null;
                this._store = null;
                this.Checker = null;
                this.dom = null;
                this.Handle = null;
                this.job = null;
                this.Scop.removeEvent(bind.Scop.DPValue, this.propb);
                this.Scop = null;
                this.propb.Dispose();
                this.propb = null;
                this.IsDisposed = true;
            };
            JobInstance.prototype.addValue = function (name, value) {
                this._store[name] = value;
            };
            JobInstance.prototype.getValue = function (name) {
                return this._store[name];
            };
            JobInstance.prototype.handleEvent = function (e) {
                if (this.Handle)
                    this.Handle(this, e);
            };
            return JobInstance;
        }());
        bind.JobInstance = JobInstance;
        function GetJob(name) {
            var l = jobs[name];
            if (l == null)
                return Register(new Job(name, null, null, null, null, null));
            return l;
        }
        bind.GetJob = GetJob;
        ;
        function Register(job, override) {
            var l = jobs[job.Name];
            if (l != null)
                if (override) {
                    jobs[job.Name] = job;
                    return job;
                }
                else
                    return l;
            else
                return jobs[job.Name] = job;
        }
        bind.Register = Register;
        ;
    })(bind = exports.bind || (exports.bind = {}));
    var thread;
    (function (thread) {
        ;
        var JobParam = (function () {
            function JobParam(id, params) {
                this.id = id;
                this.params = params || [];
            }
            JobParam.prototype.Set = function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                var p;
                for (var i = params.length - 1; i >= 0; i--)
                    if ((p = params[i]) === undefined)
                        continue;
                    else
                        this.params[i] = p;
                return this;
            };
            JobParam.prototype.Set1 = function (params) {
                var p;
                for (var i = params.length - 1; i >= 0; i--)
                    if ((p = params[i]) === undefined)
                        continue;
                    else
                        this.params[i] = p;
                return this;
            };
            JobParam.prototype.Clone = function () {
                var t = new JobParam(this.id);
                t.Set1(this.params);
                return t;
            };
            return JobParam;
        }());
        thread.JobParam = JobParam;
        var OnIdle = [];
        var isIdle;
        function asIdle() {
            isIdle = true;
            var idls = OnIdle.slice();
            var j = 0;
            for (var i = 0; i < idls.length; i++) {
                var t = idls[i];
                if (t.once) {
                    OnIdle.splice(i - j, 1);
                    j++;
                }
                helper.TryCatch(t.owner, t.callback);
            }
            isIdle = false;
            if (stack.length != 0) {
                clearTimeout(id);
                id = setTimeout(Dispatcher.start, 1);
                isRunning = true;
            }
        }
        var Dispatcher = (function () {
            function Dispatcher() {
            }
            Dispatcher.OnIdle = function (owner, callback, once) {
                if (isIdle || !isRunning)
                    helper.TryCatch(owner, callback);
                else
                    OnIdle.push({ owner: owner, callback: callback, once: once == true });
            };
            Dispatcher.InIdle = function () { return !isRunning; };
            Dispatcher.GC = function () {
                for (var i = 0, l = djobs.length; i < l; i++) {
                    var c = djobs[i];
                    c.children.length = 0;
                    c.ce = 0;
                }
                stack.length = 0;
                cj = 0;
                asIdle();
            };
            Dispatcher.clone = function (ojob, params, __this) {
                var l = {
                    callback: ojob.callback,
                    _this: __this === undefined ? ojob._this : __this,
                    id: ojob.id,
                    isWaiting: true,
                    optimizable: false,
                    params: new JobParam(ojob.id).Set1(params || ojob.params.params)
                };
                ojob.children.push(l);
                return l;
            };
            Dispatcher.cretaeJob = function (delegate, param, _this, optimizable) {
                var t = {
                    callback: delegate,
                    params: new JobParam(djobs.length, param),
                    _this: _this,
                    optimizable: optimizable,
                    isWaiting: false,
                    id: djobs.length, children: [], ce: 0
                };
                djobs.push(t);
                return t.params;
            };
            Dispatcher.Clear = function (o) {
                var k = djobs[o.id];
                var pj = k.children;
                var ce = k.ce;
                var l = pj.length;
                for (var i = l - 1; i > ce; i--) {
                    var c = pj[i];
                    c.isWaiting = false;
                    c.optimizable = true;
                }
                pj.length = 0;
                k.ce = 0;
            };
            Object.defineProperty(Dispatcher, "CurrentJob", {
                get: function () {
                    return stack[cj];
                },
                enumerable: true,
                configurable: true
            });
            Dispatcher.start = function () {
                isRunning = true;
                if (stack.length === 0) {
                    isRunning = false;
                    asIdle();
                    return;
                }
                isIdle = false;
                var to = cj + Math.min(3, stack.length - cj);
                for (; cj < to; cj++) {
                    var c = stack[cj];
                    if (c.isWaiting)
                        helper.TryCatch(c._this, c.callback, void 0, c.params.params);
                    if (!c.optimizable) {
                        var pj = djobs[c.id];
                        pj.ce++;
                    }
                    c.isWaiting = false;
                    stack[cj] = null;
                }
                isRunning = cj < stack.length;
                if (isRunning)
                    id = setTimeout(Dispatcher.start, 0);
                else
                    Dispatcher.GC();
            };
            Dispatcher.Push = function (ojob, params, _this) {
                var job = djobs[ojob.id];
                if (!job.optimizable)
                    job = this.clone(job, params, _this);
                else {
                    if (params)
                        job.params.Set(params);
                    job._this = _this === undefined ? job._this : _this;
                    if (job.isWaiting) {
                        return;
                    }
                }
                job.isWaiting = true;
                stack.push(job);
                if (!isRunning)
                    if (stack.length > 0) {
                        clearTimeout(id);
                        id = setTimeout(Dispatcher.start, 0);
                        isRunning = true;
                        isIdle = false;
                    }
                return job;
            };
            Dispatcher.call = function (_this, fn) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                this.Push(delayedJob, [_this, fn, args]);
            };
            Dispatcher.IsRunning = function () {
                return isRunning;
            };
            return Dispatcher;
        }());
        thread.Dispatcher = Dispatcher;
        var delayedJob = thread.Dispatcher.cretaeJob(function (context, fun, args) {
            fun.apply(context, args);
        }, [], null, false);
    })(thread = exports.thread || (exports.thread = {}));
    (function (bind) {
        var DProperty = (function () {
            function DProperty(Attribute, Name, Type, DefaultValue, Changed, Check) {
                this.Attribute = Attribute;
                this.Name = Name;
                this.Type = Type;
                this.DefaultValue = DefaultValue;
                this.Changed = Changed;
                this.Check = Check;
                if (Type instanceof reflection.GenericType)
                    this.GType = Type;
                this.RedifineChecker();
            }
            Object.defineProperty(DProperty.prototype, "IsKey", {
                get: function () {
                    return (this.Attribute & PropertyAttribute.IsKey) === PropertyAttribute.IsKey;
                },
                enumerable: true,
                configurable: true
            });
            DProperty.prototype.RedifineChecker = function () {
                switch (this.Type) {
                    case reflection.GenericType:
                        this.checkType = this.isGenerictype;
                        break;
                    case Object:
                        this.checkType = DProperty.isObject;
                        break;
                    case String:
                        this.checkType = DProperty.isString;
                        break;
                    case Number:
                        this.checkType = DProperty.isNumber;
                        break;
                    case Boolean:
                        this.checkType = DProperty.isBoolean;
                        break;
                    case reflection.DelayedType:
                        break;
                    default:
                        if (this.Type.constructor == reflection.DelayedType)
                            break;
                        else if (this.Type.constructor === reflection.GenericType)
                            this.checkType = this.isGenerictype;
                        else
                            this.checkType = this._checkType;
                        break;
                }
            };
            DProperty.prototype.checkType = function (val) {
                var t = this.Type;
                this.Type = t.Type;
                if (this.Type instanceof reflection.GenericType)
                    this.GType = this.Type;
                this.RedifineChecker();
                return this.checkType(val);
            };
            DProperty.prototype._checkType = function (val) {
                return val instanceof this.Type;
            };
            DProperty.prototype.isGenerictype = function (val) {
                return val instanceof this.Type.Constructor;
            };
            DProperty.isObject = function (val) {
                return true;
            };
            DProperty.isString = function (val) {
                return typeof val == 'string';
            };
            DProperty.isNumber = function (val) {
                return typeof val == 'number';
            };
            DProperty.isBoolean = function (val) {
                return typeof val == 'boolean';
            };
            return DProperty;
        }());
        bind.DProperty = DProperty;
        var _events = [];
        var EventArgs = (function () {
            function EventArgs() {
                this.IsValid = true;
            }
            EventArgs.New = function (prop, ithis, _old, _new) {
                var _this = _events.length == 0 ? new EventArgs() : _events.pop();
                _this.prop = prop;
                _this.__this = ithis;
                _this._new = _new;
                _this._old = _old;
                return _this;
            };
            EventArgs.prototype.Dispose = function () {
                _events.push(this);
            };
            return EventArgs;
        }());
        bind.EventArgs = EventArgs;
        var Ref = (function () {
            function Ref() {
            }
            Object.defineProperty(Ref.prototype, "key", {
                get: function () {
                    return this._key;
                },
                set: function (v) {
                    this._key = v;
                },
                enumerable: true,
                configurable: true
            });
            return Ref;
        }());
        bind.Ref = Ref;
        var EventListener = (function () {
            function EventListener(key, isSingliton) {
                this._deleagtes = [];
                this.key = new Object();
                this.locks = [];
                this.lock = false;
                this.key = key;
                this.isSingliton = isSingliton === true;
            }
            Object.defineProperty(EventListener.prototype, "On", {
                set: function (delegate) {
                    this._deleagtes.push(delegate);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(EventListener.prototype, "Off", {
                set: function (delegate) {
                    if (this.lock) {
                        this.locks.push(delegate);
                        return;
                    }
                    var i = this._deleagtes.indexOf(delegate);
                    if (i == -1)
                        return;
                    this._deleagtes.splice(i, 1);
                },
                enumerable: true,
                configurable: true
            });
            EventListener.prototype.Invoke = function (key, params) {
                if (key != this.key || l <= 0)
                    return;
                this.lock = true;
                var locks = this.locks;
                if (this.isSingliton) {
                    while (this._deleagtes.length > 0)
                        helper.TryCatch(this, this._deleagtes.shift(), void 0, params);
                    this.locks.length = 0;
                }
                else {
                    for (var i = 0, l = this._deleagtes.length; i < l; i++)
                        helper.TryCatch(this, this._deleagtes[i], void 0, params);
                    this.lock = false;
                    while (locks.length > 0)
                        this.Off = this.locks.pop();
                }
                this.lock = false;
            };
            EventListener.prototype.Invok = function (key, callBack) {
                if (key != this.key || l <= 0)
                    return;
                var lr;
                this.lock = true;
                var x = new Array(1);
                if (this.isSingliton) {
                    while (this._deleagtes.length > 0)
                        x[0] = this._deleagtes.shift(), helper.TryCatch(this, callBack, void 0, x);
                    this.locks.length = 0;
                }
                else {
                    for (var i = 0, l = this._deleagtes.length; i < l; i++)
                        x[0] = this._deleagtes[i], helper.TryCatch(this, callBack, void 0, x);
                    this.lock = false;
                    while (this.locks.length > 0)
                        this.Off = this.locks.pop();
                }
                this.lock = false;
                return lr;
            };
            EventListener.prototype.PInvok = function (key, params, owner) {
                var l = this._deleagtes.length;
                if (key != this.key || l <= 0)
                    return;
                var dlg = this._deleagtes.slice();
                var lr;
                if (this.isSingliton)
                    this._deleagtes.length = 0;
                for (var i = 0; i < l; i++)
                    lr = helper.TryCatch(owner, dlg[i], void 0, params);
                this.locks.length = 0;
                return lr;
            };
            EventListener.prototype.Add = function (delegate, key) {
                if (this._store == null)
                    this._store = [];
                if (key !== undefined)
                    this._store[key] = delegate;
                this._deleagtes.push(delegate);
            };
            EventListener.prototype.Remove = function (key) {
                if (this._store) {
                    var d = this._store[key];
                    delete this._store[key];
                    this.Off = d;
                }
            };
            EventListener.prototype.Dispose = function () {
                this.key = null;
                this.locks.length = 0;
                this.locks = null;
                if (this._store) {
                    this._store.length = 0;
                    this._store = null;
                }
                this._deleagtes.length = 0;
                this._deleagtes = null;
            };
            return EventListener;
        }());
        bind.EventListener = EventListener;
        var FEventListener = (function () {
            function FEventListener(key, isSingliton) {
                this._deleagtes = [];
                this.key = new Object();
                this.currentIndex = -1;
                this.key = key;
                this.isSingliton = isSingliton === true;
            }
            Object.defineProperty(FEventListener.prototype, "On", {
                set: function (delegate) {
                    this._deleagtes.push(delegate);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FEventListener.prototype, "Off", {
                set: function (delegate) {
                    var i = this._deleagtes.indexOf(delegate);
                    if (i == -1)
                        return;
                    this._deleagtes.splice(i, 1);
                    if (this.currentIndex != -1)
                        if (i <= this.currentIndex)
                            this.currentIndex--;
                },
                enumerable: true,
                configurable: true
            });
            FEventListener.prototype.PInvok = function (key, params, owner) {
                if (this.currentIndex != -1)
                    throw "";
                var l = this._deleagtes.length;
                if (key != this.key || l <= 0)
                    return;
                var dlg = this._deleagtes.slice();
                var lr;
                for (this.currentIndex = 0; this.currentIndex < this._deleagtes.length; this.currentIndex++) {
                    var fn = dlg[this.currentIndex];
                    var crnt;
                    if (fn && typeof fn !== 'function')
                        crnt = fn.Owner, fn = fn.Invoke;
                    lr = helper.TryCatch(crnt || owner, fn, void 0, params);
                }
                if (this.isSingliton)
                    this._deleagtes.length = 0;
                this.currentIndex = -1;
                return lr;
            };
            FEventListener.prototype.Add = function (delegate, key) {
                if (this._store == null)
                    this._store = [];
                if (key != undefined)
                    this._store[key] = delegate;
                this._deleagtes.push(delegate);
            };
            FEventListener.prototype.Remove = function (key) {
                if (this._store) {
                    var d = this._store[key];
                    delete this._store[key];
                    this.Off = d;
                }
            };
            FEventListener.prototype.Dispose = function () {
                this.key = null;
                if (this._store) {
                    this._store.length = 0;
                    this._store = null;
                }
                this._deleagtes.length = 0;
                this._deleagtes = null;
            };
            return FEventListener;
        }());
        bind.FEventListener = FEventListener;
        var PropBinding = (function () {
            function PropBinding(Invoke, Owner) {
                this.Invoke = Invoke;
                this.Owner = Owner;
            }
            PropBinding.prototype.handleEvent = function (e) {
                if (this._isIvnoked)
                    return;
                if (this.Invoke == null)
                    return true;
                this._isIvnoked = true;
                helper.TryCatch(this.Owner || e.__this, this.Invoke, void 0, [this, e]);
                this._isIvnoked = false;
            };
            PropBinding.prototype.Dispose = function () {
                this.Owner = null;
                this.Invoke = null;
            };
            return PropBinding;
        }());
        bind.PropBinding = PropBinding;
        var PropertyStore = (function () {
            function PropertyStore(Value) {
                this.Value = Value;
            }
            Object.defineProperty(PropertyStore.prototype, "InsBindings", {
                get: function () { if (this._bindings === undefined)
                    this._bindings = []; return this._bindings; },
                enumerable: true,
                configurable: true
            });
            PropertyStore.prototype.Dispose = function () {
                this.Value = null;
                if (this._bindings) {
                    for (var i = this._bindings.length - 1; i >= 0; i--)
                        this._bindings[i].Dispose();
                    this._bindings.length = 0;
                    this._bindings = null;
                }
            };
            return PropertyStore;
        }());
        bind.PropertyStore = PropertyStore;
        var PropertyAttribute;
        (function (PropertyAttribute) {
            PropertyAttribute[PropertyAttribute["NonSerializable"] = 2] = "NonSerializable";
            PropertyAttribute[PropertyAttribute["Private"] = 4] = "Private";
            PropertyAttribute[PropertyAttribute["SerializeAsId"] = 8] = "SerializeAsId";
            PropertyAttribute[PropertyAttribute["IsKey"] = 16] = "IsKey";
            PropertyAttribute[PropertyAttribute["Optional"] = 32] = "Optional";
        })(PropertyAttribute = bind.PropertyAttribute || (bind.PropertyAttribute = {}));
        var ObjectAttribute;
        (function (ObjectAttribute) {
            ObjectAttribute[ObjectAttribute["NonSerializable"] = 2] = "NonSerializable";
        })(ObjectAttribute = bind.ObjectAttribute || (bind.ObjectAttribute = {}));
        var TypesMap = (function () {
            function TypesMap(Base) {
                this.Base = Base;
                this.Fields = [];
                this.Fields = Base ? Base.Fields.slice(0) : [];
            }
            Object.defineProperty(TypesMap.prototype, "length", {
                get: function () { return this.Fields.length; },
                enumerable: true,
                configurable: true
            });
            TypesMap.prototype.GetField = function (name) {
                var f;
                if (this.Base) {
                    f = this.Base.GetField(name);
                    if (f)
                        return f;
                }
                for (var i = 0; i < this.Fields.length; i++)
                    if ((f = this.Fields[i]).Name == name)
                        return f;
            };
            return TypesMap;
        }());
        var DObject = (function () {
            function DObject() {
                this.store = [];
                this._propertyChanged = [];
                DObject.register(this.constructor);
            }
            DObject.prototype.GetType = function () { return this.constructor; };
            DObject.__fields__ = function () { return []; };
            DObject.__attributes__ = function () {
            };
            Object.defineProperty(DObject, "isOpen", {
                get: function () {
                    return this._isOpen;
                },
                enumerable: true,
                configurable: true
            });
            DObject.GetProperty = function (type, name) {
                var id = DObject.getId(type);
                var s = DObject._dpStore[id];
                var f = s.Fields;
                for (var i = f.length - 1; i >= 0; i--) {
                    var p = f[i];
                    if (p.Name == name)
                        return p;
                }
            };
            DObject.GetDPropertyAt = function (type, index) {
                var map = DObject.register(type);
                return map.Fields[index];
            };
            DObject.prototype.GetProperty = function (name) {
                var types = reflection.GetBaseTypes(this.constructor, DObject);
                for (var j = 0; j < types.length; j++) {
                    var id = DObject.getId(types[j]);
                    var tm = DObject._dpStore[id];
                    if (tm) {
                        for (var i = tm.Fields.length - 1; i >= 0; i--) {
                            if (tm.Fields[i].Name == name) {
                                return tm.Fields[i];
                            }
                        }
                    }
                }
                return null;
            };
            DObject.prototype.ToJson = function (_context, indexer) {
                indexer = indexer == undefined ? _context.getJson(this) : indexer;
                indexer.valid = true;
                var json = indexer.json;
                for (var tm = DObject._dpStore[DObject.getId(this.constructor)].Fields, j = 0, l = tm.length; j < l; j++) {
                    var prop = tm[j];
                    if ((prop.Attribute & 2) === 2)
                        continue;
                    var v = this.get(prop);
                    if ((prop.Attribute & 8) == 8)
                        if (v && v.Id) {
                            json[prop.Name] = v.Id;
                            continue;
                        }
                        else
                            continue;
                    json[prop.Name] = _context.ToJson(v);
                }
                return json;
            };
            DObject.prototype.FromJson = function (json, context, update) {
                if (json == null)
                    return this;
                var ref = json['@ref'];
                delete json['@ref'];
                if (ref)
                    context.set(ref.__ref__, this);
                update = update || false;
                for (var tm = DObject._dpStore[DObject.getId(this.constructor)].Fields, j = 0, l = tm.length; j < l; j++) {
                    var prop = tm[j];
                    if ((prop.Attribute & 4) === 4)
                        continue;
                    var val = json[prop.Name];
                    if (val === undefined)
                        continue;
                    context.FromJson(val, prop.Type, new encoding.Path(this, prop));
                }
                return this;
            };
            DObject.IsClass = function (x) {
                if (typeof x == "function") {
                    if (x == DObject.IsClass.constructor)
                        return false;
                    return true;
                }
                return false;
            };
            DObject.CreateField = function (name, type, defaultValue, changed, check, attribute) {
                if (type == null)
                    type = Object;
                return new DProperty(attribute, name, type, defaultValue, changed, check);
            };
            DObject.getId = function (type) {
                if (type.hasOwnProperty("__id__"))
                    return type.__id__;
                var val = ++DObject.typeCount;
                $defineProperty(type, "__id__", {
                    value: val, writable: false, configurable: false, enumerable: false
                });
                return val;
            };
            DObject._buildProperty = function (obj, propName) {
                var v = obj[propName];
                if (v != null)
                    var t = v.constructor;
                else
                    t = Object;
                return bind.DObject.CreateField(propName, t, v);
            };
            DObject.prototype.IsPropertiesChanged = function (m) {
                if (!m)
                    return true;
                var t = m.values;
                var x = this.store;
                var c;
                for (var i = 0; i < x.length; i++)
                    if (c = x[i])
                        if (c.Value !== t[i])
                            return true;
                return false;
            };
            DObject.ToDObject = function (obj, props) {
                if (obj instanceof this || obj.hasOwnProperty("__id__"))
                    return obj;
                var type = obj.getType instanceof Function ? obj.getType() : obj.constructor;
                if (!type.hasOwnProperty("__id__"))
                    $defineProperty(type, "__id__", {
                        value: -1, writable: false, configurable: false, enumerable: false
                    });
                else if (type !== -1)
                    throw "Invalid type";
                var flds = new Array(props.length);
                for (var i = 0; i < props.length; i++) {
                    var dp = flds[i] = this._buildProperty(obj, props[i]);
                    dp.Index = i;
                    setProperty(obj, dp);
                }
            };
            DObject.register = function (type) {
                var id = DObject.getId(type);
                var x = DObject._dpStore[id];
                if (x != null)
                    return x;
                var c = reflection.GetBaseTypes(typeof (type) === 'function' ? type : type.constructor, DObject);
                var u, lu;
                for (var i = c.length - 1; i >= 0; i--) {
                    var bc = c[i];
                    var id = DObject.getId(bc);
                    u = DObject._dpStore[id];
                    if (u == null) {
                        if (bc.hasOwnProperty('ctor'))
                            bc.ctor();
                        if (bc.hasOwnProperty('_ctor'))
                            bc._ctor();
                        if (bc.hasOwnProperty('__fields__'))
                            var nld = bc["__fields__"];
                        else
                            nld = null;
                        DObject._isOpen = true;
                        u = new TypesMap(lu);
                        var cnt = lu ? lu.length : 0;
                        var uf = nld ? bc["__fields__"]() : [];
                        uf.push.apply(uf, attributes.getProperties(bc));
                        for (var j = 0; j < uf.length; j++) {
                            var dp = uf[j];
                            if (u.GetField(dp.Name))
                                continue;
                            dp.Index = cnt + j;
                            if (!(dp.Type instanceof reflection.DelayedType))
                                Object.freeze(dp);
                            if (!bc.prototype.hasOwnProperty(dp.Name))
                                setProperty(bc, dp);
                            u.Fields.push(dp);
                        }
                        attributes.Delete(bc);
                        DObject._isOpen = false;
                        DObject._dpStore[id] = u;
                        Object.freeze(u);
                    }
                    lu = u;
                }
                return DObject._dpStore[id];
            };
            DObject.prototype.getType = function () {
                return this.constructor;
            };
            DObject.getFieldsCount = function () {
                return this.register(this).Fields.length;
            };
            DObject.getFields = function (type) {
                return this.register(type || this).Fields;
            };
            DObject.prototype.set = function (prop, value, keepEvent) {
                if (this._isFrozen)
                    return;
                var ps = this.store[prop.Index] || (this.store[prop.Index] = new PropertyStore(prop.DefaultValue));
                var old = ps.Value;
                if (old === value)
                    return;
                if (value != null)
                    if (!prop.checkType(value))
                        throw { message: "Uncompatible type", this: this, property: prop, value: value };
                var ev = EventArgs.New(prop, this, old, value);
                if (prop.Check)
                    prop.Check.call(this, ev);
                if (old === ev._new || !ev.IsValid)
                    return;
                ps.Value = ev._new;
                if (prop.Changed)
                    prop.Changed.call(this, ev);
                this.onPropertyChanged(ev);
                if (keepEvent)
                    return ev;
                ev.Dispose();
            };
            DObject.prototype.raise = function (e) {
                var c = this.get(e);
                var ev = EventArgs.New(e, this, c, c);
                this.onPropertyChanged(ev);
            };
            DObject.prototype.get = function (prop) {
                var ps = this.store[prop.Index];
                return ps ? ps.Value : prop.DefaultValue;
            };
            DObject.prototype.GetValues = function () {
                return this.store.map(function (v, i, a) { return v && v.Value; });
            };
            DObject.prototype.GetValue = function (prop) {
                var ps = this.store[prop.Index];
                return ps ? ps.Value : prop.DefaultValue;
            };
            DObject.prototype.SetValue = function (prop, p) {
                this.set(prop, p);
            };
            DObject.prototype.removeListener = function (v) {
                var x = this._propertyChanged.indexOf(v.Ref);
                if (x !== -1)
                    this._propertyChanged.splice(x, 1);
                else
                    return false;
                return true;
            };
            DObject.prototype.addListener = function (v) {
                if (this._propertyChanged.indexOf(v) !== -1)
                    return false;
                this._propertyChanged.push(v);
                return true;
            };
            DObject.prototype.onPropertyChanged = function (ev) {
                for (var i = 0; i < this._propertyChanged.length; i++) {
                    var dlg = this._propertyChanged[i];
                    dlg(ev);
                    attributes.property;
                }
                var x;
                if ((x = ((x = this.store[ev.prop.Index]) && x._bindings)))
                    for (var i = 0; i < x.length; i++)
                        if (x[i].handleEvent(ev)) {
                            x.splice(i, 1);
                            i--;
                        }
            };
            DObject.prototype.Observe = function (prop, ev, owner) {
                var ps = this.store[prop.Index] || (this.store[prop.Index] = new PropertyStore(prop.DefaultValue));
                ps.InsBindings.push(ps = new PropBinding(ev, owner));
                return ps;
            };
            DObject.prototype.UnObserve = function (prop, y, owner) {
                var ps = this.store[prop.Index] && this.store[prop.Index]._bindings;
                var i;
                if (ps) {
                    if (typeof y !== 'function') {
                        if ((i = ps.indexOf(y)) != -1)
                            return this._disposeProp(this.store[prop.Index], y, i);
                    }
                    else {
                        var t, j;
                        for (var i = ps.length - 1; i >= 0; i--) {
                            var p = ps[i];
                            if (p.Invoke === y) {
                                if (p.Owner === owner)
                                    if (!this._disposeProp(this.store[prop.Index], p, i))
                                        return true;
                                if (!t)
                                    t = p, j = i;
                            }
                        }
                        if (t)
                            return this._disposeProp(this.store[prop.Index], t, j);
                    }
                }
                return false;
            };
            DObject.prototype._disposeProp = function (prs, t, index) {
                var ps = prs._bindings;
                t.Dispose();
                if (ps.length == 1) {
                    prs._bindings = void 0;
                    return false;
                }
                ps.splice(index, 1);
                return true;
            };
            DObject.prototype.OnPropertyChanged = function (prop, ev, owner) {
                return this.Observe(prop, ev, owner);
            };
            DObject.prototype.addEvent = function (prop, b) {
                var ps = this.store[prop.Index] || (this.store[prop.Index] = new PropertyStore(prop.DefaultValue));
                ps.Bindings.push(b);
            };
            DObject.prototype.removeEvent = function (prop, y) {
                var ps = this.store[prop.Index] && this.store[prop.Index]._bindings;
                if (ps) {
                    var i = ps.indexOf(y);
                    if (i != -1) {
                        return this._disposeProp(this.store[prop.Index], y, i);
                    }
                }
                return null;
            };
            Object.defineProperty(DObject.prototype, "Disposed", {
                get: function () { return this.store.length === 0; },
                enumerable: true,
                configurable: true
            });
            DObject.prototype.OnDispose = function () {
                if (this.DisposingStat === 2)
                    return null;
                var h = this.DisposingStat == 1;
                this.DisposingStat = 1;
                if (!h && this.OnDisposing)
                    this._onDisposing.Invoke(0, [this]);
                return h;
            };
            DObject.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this._propertyChanged.length = 0;
                var t = DObject.getFields(this.GetType());
                for (var i = 0, l = this.store.length; i < l; i++)
                    this.store[i] && this.store[i].Dispose();
                this.store.length = 0;
                if (!h)
                    this.DisposingStat = 2;
            };
            Object.defineProperty(DObject.prototype, "OnDisposing", {
                set: function (v) { if (this._onDisposing === undefined)
                    this._onDisposing = new bind.EventListener(0, true); this._onDisposing.On = v; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DObject.prototype, "OffDisposing", {
                set: function (v) { if (this._onDisposing == undefined)
                    return; this._onDisposing.Off = v; },
                enumerable: true,
                configurable: true
            });
            DObject.prototype.CloneTo = function (o) {
                o._propertyChanged = this._propertyChanged;
                o.addListener = this.addListener;
                o.store = this.store;
            };
            DObject.prototype.Freeze = function () {
                this._isFrozen = true;
            };
            DObject.prototype.UnFreeze = function () {
                this._isFrozen = false;
            };
            DObject.prototype.IsFrozen = function () { return this._isFrozen; };
            DObject.prototype.CreateBackup = function (OnUndo) {
                var e;
                backups.GetOrAdd(this.store, []).push(e = { OnUndo: OnUndo, values: this.store.map(function (p, i) { return p.Value; }) });
                return e;
            };
            DObject.prototype.Commit = function (r) {
                var l = backups.Get(this.store);
                if (l == null || l.length === 0)
                    return false;
                if (r) {
                    var i = l.indexOf(r);
                    if (i === -1)
                        return;
                    l.splice(i);
                }
                else
                    l.pop();
            };
            DObject.prototype.Rollback = function (b, walkTrougth) {
                if (b)
                    return this.UndoTo(b, walkTrougth);
                var l = backups.Get(this.store);
                if (l == null || l.length === 0)
                    return false;
                var x = l.pop();
                var ps = DObject._dpStore[this.constructor.__id__];
                var c = x.values;
                for (var i = 0; i < c.length; i++)
                    this.set(ps.Fields[i], c[i]);
                if (x.OnUndo)
                    x.OnUndo(this, x);
                return true;
            };
            DObject.prototype.UndoTo = function (b, walkTrougth) {
                var l = backups.Get(this.store);
                if (l == null || l.length === 0)
                    return;
                var i = l.indexOf(b);
                if (i === -1)
                    return false;
                var arr = l.splice(i, l.length - i);
                var ps = DObject._dpStore[this.constructor.__id__];
                if (walkTrougth)
                    for (var i = arr.length; i >= 0; i--) {
                        var x = arr[i];
                        var c = x.values;
                        for (var i = 0; i < c.length; i++)
                            this.set(ps.Fields[i], c[i]);
                    }
                else {
                    var x = arr[0];
                    var c = x.values;
                    for (var i = 0; i < c.length; i++)
                        this.set(ps.Fields[i], c[i]);
                }
                return true;
            };
            DObject._dpStore = [];
            DObject._isOpen = false;
            DObject.typeCount = 0;
            return DObject;
        }());
        bind.DObject = DObject;
        var DisposingStat;
        (function (DisposingStat) {
            DisposingStat[DisposingStat["None"] = 0] = "None";
            DisposingStat[DisposingStat["Disposing"] = 1] = "Disposing";
            DisposingStat[DisposingStat["Disposed"] = 2] = "Disposed";
        })(DisposingStat = bind.DisposingStat || (bind.DisposingStat = {}));
        var XPath = (function () {
            function XPath(name) {
                this.Name = name;
            }
            XPath.prototype.ListenTo = function (d, callback, owner) {
                if (!this.Property && d instanceof bind.DObject)
                    this.Property = d.GetProperty(this.Name);
                if (this.Property) {
                    this.Binding != null && this.d && this.d.UnObserve(this.Property, this.Binding, owner);
                    this.Binding = void 0;
                    if (d) {
                        this.Value = d.GetValue(this.Property);
                        this.Binding = d.Observe(this.Property, callback, owner);
                    }
                }
                else {
                    this.Binding != null && this.d && injecter.unobserve(this.d, this.Name, this.Binding, owner);
                    this.Binding = void 0;
                    if (d && d.hasOwnProperty(this.Name))
                        this.Binding = injecter.observe(d, this.Name, callback, owner);
                    d && (this.Value = d[this.Name]);
                }
                this.d = d;
            };
            XPath.prototype.Dispose = function () {
                if (this.Property && this.d instanceof bind.DObject)
                    this.Binding != null && this.d != null && this.d.UnObserve(this.Property, this.Binding);
                else
                    this.Binding != null && this.d != null && injecter.unobserve(this.d, this.Name, this.Binding);
                this.Value = null;
                this.Binding = null;
            };
            return XPath;
        }());
        bind.XPath = XPath;
        var Observer = (function (_super) {
            __extends(Observer, _super);
            function Observer(me, path, controller) {
                var _this_1 = _super.call(this) || this;
                _this_1.controller = controller;
                _this_1.xpath = [];
                _this_1.Me = me;
                _this_1.Path = path;
                return _this_1;
            }
            Object.defineProperty(Observer.prototype, "Me", {
                get: function () { return this.get(Observer.DPMe); },
                set: function (value) { this.set(Observer.DPMe, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Observer.prototype, "Path", {
                get: function () { return this.get(Observer.DPPath); },
                set: function (value) { this.set(Observer.DPPath, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Observer.prototype, "Value", {
                get: function () { return this.get(Observer.DPValue); },
                set: function (value) { this.set(Observer.DPValue, value); },
                enumerable: true,
                configurable: true
            });
            Observer.__fields__ = function () {
                return [
                    Observer.DPMe, Observer.DPPath, Observer.DPValue
                ];
            };
            Observer.prototype.GenType = function () { return Observer; };
            Observer.prototype.calcPrefix = function (str) {
                switch (str) {
                    case 'this':
                        return this.controller && this.controller.MainControll;
                    case 'window': return bind.windowScop;
                    default:
                }
            };
            Observer.prototype.rebuidPath = function (e) {
                var path = e._new;
                this.disposePath();
                this.xpath = new Array(path.length);
                for (var i = 0; i < path.length; i++) {
                    var p = path[i];
                    this.xpath[i] = new XPath(p);
                }
                this.Start(0);
            };
            Observer.prototype.disposePath = function () {
                var r = this.xpath;
                var l = r.length;
                for (var i = 0; i < l; i++) {
                    var p = r[i];
                    p.Dispose();
                }
                this.Value = null;
            };
            Observer.prototype.getValue = function (l) {
                var t = this.Me;
                var r = this.xpath;
                for (var i = 0; i < l; i++) {
                    var p = r[i];
                    if (t == null)
                        return null;
                    if (p.Property)
                        t = t.get(p.Property);
                    else
                        t = t[p.Name];
                    p.Value = t;
                }
                return t;
            };
            Observer.prototype.Start = function (i) {
                if (i == void 0)
                    i = 0;
                var r = this.xpath;
                var t = this.getValue(i);
                for (var j = i; j < r.length; j++) {
                    var p = r[j];
                    if (t) {
                        p.ListenTo(t, this.callMe, this);
                        t = p.Value;
                    }
                    else
                        p && p.Dispose();
                }
                this.Value = t;
            };
            Observer.prototype.ESetValue = function (value) {
                var l = this.xpath.length;
                if (l < 1)
                    return;
                var last = this.xpath[l - 1];
                var prevlast = l - 2 < 0 ? this.Me : this.xpath[l - 2].Value;
                if (prevlast)
                    if (last.Property)
                        prevlast.SetValue(last.Property, value);
                    else {
                        this.Value = value;
                        prevlast[last.Name] = value;
                    }
            };
            Observer.prototype.callMe = function (binding, e) {
                for (var i = this.xpath.length - 1; i >= 0; i--) {
                    var p = this.xpath[i];
                    if (p.Binding == binding) {
                        this.Start(i + 1);
                        break;
                    }
                }
                this.Value = this.getValue(this.xpath.length);
            };
            Observer.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.disposePath();
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            Observer.DPMe = bind.DObject.CreateField("Me", Object, null, function (e) { this.Start(0); }, Observer.prototype.disposePath);
            Observer.DPPath = bind.DObject.CreateField("Path", Array, null, Observer.prototype.rebuidPath);
            Observer.DPValue = bind.DObject.CreateField("Value", Object, null);
            return Observer;
        }(bind.DObject));
        bind.Observer = Observer;
        var ProcessStat;
        (function (ProcessStat) {
            ProcessStat[ProcessStat["NotProcessed"] = 0] = "NotProcessed";
            ProcessStat[ProcessStat["Processing"] = 1] = "Processing";
            ProcessStat[ProcessStat["Processed"] = 2] = "Processed";
        })(ProcessStat = bind.ProcessStat || (bind.ProcessStat = {}));
        var Controller = (function (_super) {
            __extends(Controller, _super);
            function Controller(cnt) {
                var _this_1 = _super.call(this) || this;
                _this_1._stat = 0;
                _this_1.JCParent = [];
                _this_1._onCompiled = [];
                _this_1._onCompiling = [];
                _this_1.instances = [];
                if (cnt)
                    _this_1.JCParent.push(cnt);
                return _this_1;
            }
            Controller.prototype.OnNodeLoaded = function () {
                this.ProcessBinding();
            };
            Object.defineProperty(Controller.prototype, "MainControll", {
                get: function () { return this.JCParent[0]; },
                enumerable: true,
                configurable: true
            });
            Controller.Attach = function (control, data) {
                var t = new Controller(control);
                t.Scop = data instanceof bind.Scop || data == null ? data : new bind.ValueScop(data);
                t.View = control.View;
                return t;
            };
            Controller.prototype.getStat = function () { return this._stat; };
            ;
            Object.defineProperty(Controller.prototype, "Stat", {
                set: function (v) {
                    if (v <= this._stat)
                        return;
                    this._stat = v;
                    if (v === 1 || v === 2)
                        this.processEvent(v);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Controller.prototype, "processHowEver", {
                get: function () { return false; },
                set: function (v) { },
                enumerable: true,
                configurable: true
            });
            Controller.__feilds__ = function () { return [Controller.DPView]; };
            Object.defineProperty(Controller.prototype, "View", {
                get: function () { return this.get(Controller.DPView); },
                set: function (value) { this.set(Controller.DPView, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Controller.prototype, "OnCompiled", {
                set: function (callback) {
                    if (this._stat > 1)
                        callback.Invoke.call(callback.Owner, this);
                    else
                        this._onCompiled.push(callback);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Controller.prototype, "OnCompiling", {
                set: function (callback) {
                    if (this._stat > 0)
                        callback.Invoke.call(callback.Owner, this);
                    else
                        this._onCompiling.push(callback);
                },
                enumerable: true,
                configurable: true
            });
            Controller.prototype.ViewChanged = function (e) {
                var dom = e._new;
                var odom = e._old;
                if (dom === odom)
                    return;
                if (odom)
                    this.unlistenForNodeInsertion(odom), odom.removeAttribute('controlled');
                if (dom == null)
                    return;
                dom.setAttribute('controlled', '');
                if (this.processHowEver || this.implemented(dom)) {
                    this.Stat = 0;
                    this.ProcessBinding();
                }
                else
                    this.listenForNodeInsertion(dom);
            };
            Controller.prototype.unlistenForNodeInsertion = function (odom, ndisp) {
                if (!ndisp)
                    this.PDispose();
                help.RemoveListener(odom);
            };
            Controller.prototype.listenForNodeInsertion = function (dom) {
                help.OnNodeInserted(this, dom);
            };
            Controller.prototype.implemented = function (d) {
                return document.body.contains(d);
            };
            Controller.prototype.handleEvent = function (e) {
                var v = this.View;
                if (e.srcElement == e.target && e.currentTarget == v) {
                    e.preventDefault();
                    this.unlistenForNodeInsertion(v, true);
                    this.ProcessBinding(e);
                }
            };
            Controller.prototype.ProcessBinding = function (e) {
                if (this._stat)
                    return;
                thread.Dispatcher.Push(Controller.explorerJob, [this]);
            };
            Controller.pb = function (t) {
                if (t._stat)
                    return;
                t.Stat = 1;
                var root = Processor.Tree.Root(null, t.Scop, t.CurrentControl, t);
                helper.TryCatch(t, t.ParseBinding, void 0, [root.New(t.View)]);
                t.Stat = 2;
            };
            Object.defineProperty(Controller.prototype, "CurrentControl", {
                get: function () { return this.JCParent[this.JCParent.length - 1]; },
                enumerable: true,
                configurable: true
            });
            Controller.prototype.CompileChild = function (dom, scop, control) {
                this.JCParent.push(control);
                var root = Processor.Tree.Root(null, scop, control, this);
                var t = this.ParseBinding(root.New(dom));
                this.JCParent.pop();
                return t;
            };
            Controller.prototype.ParseBinding = function (data) {
                return Processor.MyClass.ParseBinding(data);
            };
            Controller.prototype.processEvent = function (v) {
                var c = v === 1 ? this._onCompiling : this._onCompiled;
                var x = c.slice();
                c.length = 0;
                for (var i = 0; i < x.length; i++) {
                    var t = x[i];
                    helper.TryCatch(t.Owner, t.Invoke, void 0, [this]);
                }
            };
            Controller.prototype.PDispose = function () {
                var s;
                var j;
                var v = this.View;
                if (v != null) {
                    this.unlistenForNodeInsertion(v);
                }
                for (var i = 0, s = this.instances[0]; i < this.instances.length; ++i, s = this.instances[i]) {
                    if (s.IsNew)
                        s.Scop.Dispose();
                    for (var ii = 0, j = s.Jobs[0]; ii < s.Jobs.length; ii++, j = s.Jobs[ii])
                        j.Dispose();
                    s.Jobs = null;
                    s.Scop = null;
                }
                this.Stat = 0;
                this.instances.length = 0;
            };
            Controller.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.PDispose();
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            Controller.DPView = bind.DObject.CreateField("View", HTMLElement, null, function (e) { return e.__this.ViewChanged(e); }, function (e) { return e.__this.PDispose(); });
            Controller.explorerJob = thread.Dispatcher.cretaeJob(Controller.pb, [null], null, false);
            return Controller;
        }(DObject));
        bind.Controller = Controller;
    })(bind = exports.bind || (exports.bind = {}));
    var utils;
    (function (utils) {
        var Tree = (function () {
            function Tree(source, getParent, listen) {
                this.source = source;
                this.getParent = getParent;
                this.dic = new collection.Dictionary("nodes");
                this.OnChange = new bind.EventListener(this.source);
                this.OnChange.On = listen;
                this.Reset();
            }
            Tree.prototype.Remove = function (c) {
                if (this.OnRemove(c))
                    this.source.Remove(c);
            };
            Tree.prototype.Add = function (c) {
                this.OnAdd(c);
                this.source.Add(c);
            };
            Tree.prototype.Clear = function () {
                this.OnClear();
                this.source.Clear();
            };
            Tree.prototype.Reset = function () {
                this.OnClear();
                var e = this.source.AsList();
                for (var i = 0; i < e.length; i++)
                    this.OnAdd(e[i]);
            };
            Tree.prototype.OnAdd = function (target) {
                var parent = this.getParent(target);
                var node_parent;
                var node_target = this.dic.GetOrAdd(target, {
                    children: [], Value: target, Parent: null, get Depth() {
                        return this._depth ? this._depth : (this._depth = this.Parent ? this.Prent.Depth + 1 : 0);
                    }
                });
                if (parent) {
                    (node_parent = this.dic.GetOrAdd(parent, {
                        children: [], Value: parent, Parent: null, get Depth() {
                            return this._depth ? this._depth : (this._depth = this.Parent ? this.Prent.Depth + 1 : 0);
                        }
                    })).children.push(node_target);
                    node_target.Parent = node_parent;
                }
                this.OnChange.Invoke(this.source, [node_parent, node_target, true]);
            };
            Tree.prototype.getNodes = function () { return this.dic.getValues(); };
            Tree.prototype.getBases = function () {
                var t = [];
                var e = this.dic.getValues();
                for (var i = 0; i < e.length; i++)
                    if (e[i].Parent == null)
                        t.push(e[i]);
                return t;
            };
            Tree.prototype.OnRemove = function (item) {
                var node_target = this.dic.Get(item), parent = this.getParent(item);
                if (node_target)
                    if (node_target.children.length > 0)
                        return false;
                    else if (parent) {
                        var node_parent = this.dic.Get(parent);
                        var t = node_parent.children.indexOf(node_target);
                        if (t >= 0)
                            node_parent.children.splice(t, 1);
                    }
                this.OnChange.Invoke(this.source, [node_parent, node_target, false]);
                return true;
            };
            Tree.prototype.OnClear = function () {
                this.OnChange.Invoke(this.source, []);
                this.dic.Clear();
            };
            return Tree;
        }());
        utils.Tree = Tree;
        var RemoveRef = (function () {
            function RemoveRef(ref) {
                this.Ref = ref;
            }
            return RemoveRef;
        }());
        utils.RemoveRef = RemoveRef;
        var ListEventArgs = (function () {
            function ListEventArgs(oldItem, newItem, startIndex, event, collection) {
                this.oldItem = oldItem;
                this.newItem = newItem;
                this.startIndex = startIndex;
                this.event = event;
                this.collection = collection;
            }
            ListEventArgs.prototype.Dispose = function () {
                this.oldItem = null;
                this.newItem = null;
                this.startIndex = null;
                this.event = null;
            };
            Object.defineProperty(ListEventArgs, "ResetEvent", {
                get: function () {
                    return this._r || (this._r = new ListEventArgs(null, null, 0, collection.CollectionEvent.Reset, []));
                },
                enumerable: true,
                configurable: true
            });
            return ListEventArgs;
        }());
        utils.ListEventArgs = ListEventArgs;
        var Filter = (function (_super) {
            __extends(Filter, _super);
            function Filter() {
                var _this_1 = _super.call(this) || this;
                _this_1._store = [];
                return _this_1;
            }
            Object.defineProperty(Filter.prototype, "Patent", {
                get: function () { return this._patent; },
                set: function (p) {
                    if (typeof p == 'string')
                        v = this.convertFromString(p);
                    var v = p;
                    if (!v) {
                        if (!this._patent)
                            return;
                        else if (this._patent.equals(null))
                            return;
                    }
                    else if (this._patent) {
                        if (v.equals(this._patent))
                            return;
                    }
                    this._patent = v;
                    var s = this._store;
                    for (var i = 0; i < s.length; i++) {
                        var e = s[i];
                        e.callback(this, e.data);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Filter.prototype.OnChanged = function (callback, data, name) {
                var t = new filterCallback(callback, data, name, Date.now());
                this._store.push(t);
                return t.id;
            };
            Filter.prototype.OffChanged = function (name_id) {
                if (typeof (name_id) == 'string') {
                    var name = name_id;
                    var s = this._store;
                    for (var i = s.length - 1; i >= 0; i--) {
                        var e = s[i];
                        if (e.name == name) {
                            s.splice(i, 1);
                        }
                    }
                }
                else if (typeof (name_id) == 'number') {
                    var id_1 = name_id;
                    var s = this._store;
                    for (var i = s.length - 1; i >= 0; i--) {
                        var e = s[i];
                        if (e.id == id_1) {
                            s.splice(i, 1);
                            return;
                        }
                    }
                }
            };
            Filter.prototype._ismath = function (str) {
                for (var i = 0; i < str.length; i++)
                    if (str[i].indexOf(this._patent) !== -1)
                        return true;
                return false;
            };
            return Filter;
        }(bind.DObject));
        utils.Filter = Filter;
        var CostumeFilter = (function (_super) {
            __extends(CostumeFilter, _super);
            function CostumeFilter(_isMatch) {
                var _this_1 = _super.call(this) || this;
                _this_1._isMatch = _isMatch;
                return _this_1;
            }
            CostumeFilter.prototype.IsMatch = function (index, item) {
                return this._isMatch == null ? true : this._isMatch(this._patent, item);
            };
            CostumeFilter.prototype.convertFromString = function (x) { return x; };
            CostumeFilter.prototype.Begin = function (deb, count) { };
            return CostumeFilter;
        }(Filter));
        utils.CostumeFilter = CostumeFilter;
        var filterCallback = (function () {
            function filterCallback(callback, data, name, id) {
                this.callback = callback;
                this.data = data;
                this.name = name;
                this.id = id;
                if (id == void 0)
                    id = Date.now();
            }
            return filterCallback;
        }());
        utils.filterCallback = filterCallback;
    })(utils = exports.utils || (exports.utils = {}));
    var collection;
    (function (collection_1) {
        var CollectionEvent;
        (function (CollectionEvent) {
            CollectionEvent[CollectionEvent["Added"] = 0] = "Added";
            CollectionEvent[CollectionEvent["Removed"] = 1] = "Removed";
            CollectionEvent[CollectionEvent["Replace"] = 2] = "Replace";
            CollectionEvent[CollectionEvent["Cleared"] = 3] = "Cleared";
            CollectionEvent[CollectionEvent["Reset"] = 4] = "Reset";
            CollectionEvent[CollectionEvent["Setted"] = 5] = "Setted";
        })(CollectionEvent = collection_1.CollectionEvent || (collection_1.CollectionEvent = {}));
        var List = (function (_super) {
            __extends(List, _super);
            function List(argType, array) {
                var _this_1 = _super.call(this) || this;
                _this_1.argType = argType;
                _this_1._list = [];
                _this_1._changed = [];
                _this_1._changing = [];
                if (array)
                    if (array.length)
                        for (var i = 0, len = array.length; i < len; i++)
                            _this_1._list.push(array[i]);
                _this_1.UCount();
                return _this_1;
            }
            List.__fields__ = function () { return [List.DPCount]; };
            List.prototype.UCount = function () { this.set(List.DPCount, this._list.length); };
            Object.defineProperty(List.prototype, "ArgType", {
                get: function () { return this.argType; },
                enumerable: true,
                configurable: true
            });
            List.prototype.GetType = function () { return reflection.GenericType.GetType(this.constructor, [this.argType]); };
            List.prototype.AsList = function () {
                return this._list;
            };
            List.prototype.Order = function (comp) {
                var p = this._list;
                var l = p.length;
                for (var i = 0; i < l; i++)
                    for (var j = i + 1; j < l; j++) {
                        if (comp(p[i], p[j]) > 0) {
                            var c = p[j];
                            p[j] = p[i];
                            p[i] = c;
                        }
                    }
            };
            List.prototype.OrderBy = function (comp) {
                var x = this._list.sort(comp);
                this.OnChanged(null, 0, CollectionEvent.Reset, null, x);
            };
            List.prototype.Filtred = function (filter) {
                var c = new ExList(this.argType);
                c.Filter = filter;
                c.Source = this;
                return c;
            };
            List.prototype.Set = function (i, item) {
                if (i < 0)
                    return false;
                if (this._list.length <= i)
                    return false;
                var old = this._list[i];
                if (old === item)
                    return true;
                this._list[i] = item;
                this.OnChanged(item, i, CollectionEvent.Setted, old);
            };
            List.prototype.Get = function (i) {
                if (i < 0)
                    return null;
                if (this._list.length <= i)
                    return null;
                return this._list[i];
            };
            List.prototype.Insert = function (i, item) {
                if (this._isFrozen)
                    return;
                if (i >= 0 && i <= this._list.length) {
                    this._list.splice(i, 0, item);
                    this.OnChanged(item, i, CollectionEvent.Added, null);
                    return true;
                }
                return false;
            };
            List.prototype.Add = function (item) {
                if (this._isFrozen)
                    return;
                if (item == null)
                    throw 'NullArgument detected';
                this._list.push(item);
                this.OnChanged(item, this._list.length - 1, CollectionEvent.Added, null);
                return this;
            };
            List.prototype.AddRange = function (items) {
                if (this._isFrozen)
                    return;
                for (var i = 0; i < items.length; i++) {
                    this.Add(items[i]);
                }
            };
            List.prototype.CheckIndex = function (i) {
                return i >= 0 && i < this._list.length;
            };
            List.prototype.Remove = function (item) {
                if (this._isFrozen)
                    return;
                if (typeof item != "number")
                    item = this.IndexOf(item);
                return this.RemoveAt(item);
            };
            List.prototype.RemoveAt = function (item) {
                if (this._isFrozen)
                    return;
                if (typeof item != "number")
                    return;
                if (this.CheckIndex(item)) {
                    var t = this._list[item];
                    this._list.splice(item, 1);
                    this.OnChanged(t, item, CollectionEvent.Removed, t);
                    return true;
                }
                return false;
            };
            List.prototype.Clear = function () {
                if (this._isFrozen)
                    return;
                var l = this._list.length;
                if (l > 0) {
                    this.OnChanged(null, 0, CollectionEvent.Cleared, null, this._list.splice(0, this._list.length));
                }
            };
            Object.defineProperty(List.prototype, "Count", {
                get: function () { return this._list.length; },
                enumerable: true,
                configurable: true
            });
            List.prototype.IndexOf = function (item) {
                return this._list.indexOf(item);
            };
            Object.defineProperty(List.prototype, "Listen", {
                set: function (delegate) {
                    this._changed.push(delegate);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(List.prototype, "Unlisten", {
                set: function (delegate) {
                    var x = this._changed.indexOf(delegate);
                    if (x < 0)
                        return;
                    this._changed.splice(x, 1);
                },
                enumerable: true,
                configurable: true
            });
            List.prototype.OnChanged = function (item, startIndex, event, oldItem, collection) {
                var e = new utils.ListEventArgs(oldItem, item, startIndex, event, collection);
                var l = this._changed.length;
                this.UCount();
                for (var i = 0; i < l; i++) {
                    var con = this._changed[i];
                    if (typeof con === 'function')
                        con(e);
                    else {
                        con.Invoke.call(con.Owner, e);
                    }
                }
            };
            List.prototype.getArgType = function (json) {
                var type = this.ArgType;
                if (type != null)
                    return type;
                var typeName = json['__argtype__'];
                type = (typeName == undefined ? Object : context_3.context.GetType(typeName));
                return (type == undefined) ? this.argType == undefined ? Object : this.argType : type;
            };
            List.prototype.ToJson = function (x, indexer) {
                indexer = indexer == undefined ? x.getJson(this) : indexer;
                var ret = x.getJson(this);
                if (indexer.valid)
                    return indexer.ref;
                else
                    ret = _super.prototype.ToJson.call(this, x, indexer);
                indexer.valid = true;
                var list = [];
                var t = this._list;
                for (var i = 0; i < t.length; i++) {
                    var d = t[i];
                    d = x.ToJson(d);
                    list.push(d);
                }
                ret['__list__'] = list;
                ret['__argtype__'] = context_3.context.NameOf(this.argType);
                return ret;
            };
            List.prototype.FromJson = function (json, x, update, callback) {
                var list = json['__list__'] || [];
                this._list = new Array(0);
                var type = this.argType = this.getArgType(json);
                for (var i = 0; i < list.length; i++) {
                    var c = list[i];
                    if (c === undefined)
                        continue;
                    var st = List.getType(c);
                    if (st === undefined)
                        st = this.argType;
                    x.FromJson(c, st === undefined ? type : st, new encoding.LPath(this, i));
                }
                _super.prototype.FromJson.call(this, json, x, update);
                this.OnDeserialize(this._list);
                if (json != null && json.IsFrozen)
                    this.Freeze();
                return this;
            };
            List.prototype.OnDeserialize = function (list) {
            };
            List.getType = function (json) {
                var tn = json['__type__'];
                if (tn == undefined)
                    return undefined;
                return context_3.context.GetType(tn);
            };
            List.GenType = function (T) { return reflection.GenericType.GetType(this, [T]); };
            List.DPCount = List.CreateField('Count', Number, 0, null, null, 2);
            return List;
        }(bind.DObject));
        collection_1.List = List;
        var Dictionary = (function (_super) {
            __extends(Dictionary, _super);
            function Dictionary(Name, ReadOnly) {
                var _this_1 = _super.call(this) || this;
                _this_1.Name = Name;
                _this_1.ReadOnly = ReadOnly;
                _this_1.keys = [];
                _this_1.values = [];
                _this_1._changed = [];
                ReadOnly = ReadOnly == null ? true : false;
                return _this_1;
            }
            Dictionary.prototype.GetKeyAt = function (i) { return this.keys[i]; };
            Dictionary.prototype.GetValueAt = function (i) { return this.values[i]; };
            Object.defineProperty(Dictionary.prototype, "Count", {
                get: function () { return this.keys.length; },
                enumerable: true,
                configurable: true
            });
            Dictionary.prototype.Clear = function () {
                this.keys.length = 0;
                this.values.length = 0;
                this.OnChanged(null, null, CollectionEvent.Cleared, null);
            };
            Dictionary.prototype.IndexOf = function (key, fromIndex) {
                return this.keys.indexOf(key, fromIndex);
            };
            Dictionary.prototype.IndexOfValue = function (val, fromIndex) {
                return this.values.indexOf(val, fromIndex);
            };
            Dictionary.prototype.Set = function (key, value) {
                var i = this.keys.indexOf(key);
                if (i === -1) {
                    i = this.keys.length;
                    this.keys.push(key);
                }
                else if (this.ReadOnly)
                    if (this.values[i] === value)
                        return;
                    else
                        throw "key is exist";
                this.values[i] = value;
            };
            Dictionary.prototype.Remove = function (key) {
                var i = this.keys.indexOf(key);
                if (i === -1)
                    return undefined;
                var val = this.values[i];
                this.values.splice(i, 1);
                this.keys.splice(i, 1);
                return val;
            };
            Dictionary.prototype.RemoveAllValues = function (val) {
                var keys = [];
                do {
                    var i = this.values.indexOf(val, i);
                    if (i === -1)
                        return keys;
                    keys.push(this.keys[i]);
                    this.values.splice(i, 1);
                    this.keys.splice(i, 1);
                } while (true);
            };
            Dictionary.prototype.RemoveAt = function (i) {
                if (i < this.keys.length && i >= 0) {
                    var r = { Key: this.keys[i], Value: this.values[i] };
                    this.values.splice(i, 1);
                    this.keys.splice(i, 1);
                    return r;
                }
                return undefined;
            };
            Dictionary.prototype.getValues = function () { return this.values; };
            Dictionary.prototype.Get = function (key) {
                var i = this.keys.indexOf(key);
                return i === -1 ? undefined : this.values[i];
            };
            Dictionary.prototype.GetOrAdd = function (key, value) {
                var i = this.keys.indexOf(key);
                if (i !== -1)
                    return this.values[i];
                this.keys.push(key);
                this.values.push(value);
                return value;
            };
            Dictionary.prototype.GetOrCreate = function (key, New, param) {
                var i = this.keys.indexOf(key);
                if (i !== -1)
                    return this.values[i];
                var value = New(key, param);
                this.keys.push(key);
                this.values.push(value);
                return value;
            };
            Dictionary.prototype.GetKeyOf = function (val) {
                var i = this.values.indexOf(val);
                return i === -1 ? undefined : this.keys[i];
            };
            Object.defineProperty(Dictionary.prototype, "Listen", {
                set: function (delegate) {
                    this._changed.push(delegate);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dictionary.prototype, "Unlisten", {
                set: function (delegate) {
                    var x = this._changed.indexOf(delegate);
                    if (x < 0)
                        return;
                    this._changed.splice(x, 1);
                },
                enumerable: true,
                configurable: true
            });
            Dictionary.prototype.OnChanged = function (item, startIndex, event, oldItem) {
                var e = new utils.ListEventArgs(oldItem, item, startIndex, event);
                var l = this._changed.length;
                for (var i = 0; i < l; i++) {
                    var con = this._changed[i];
                    con(e);
                }
            };
            return Dictionary;
        }(bind.DObject));
        collection_1.Dictionary = Dictionary;
        var ExList = (function (_super) {
            __extends(ExList, _super);
            function ExList(argType) {
                var _this_1 = _super.call(this, argType) || this;
                _this_1._fid = null;
                _this_1.sicd = { Owner: _this_1, Invoke: _this_1.sourceItemChanged };
                return _this_1;
            }
            Object.defineProperty(ExList.prototype, "Source", {
                get: function () { return this.get(ExList.DPSource); },
                set: function (value) { this.set(ExList.DPSource, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExList.prototype, "Filter", {
                get: function () { return this.get(ExList.DPFilter); },
                set: function (value) { this.set(ExList.DPFilter, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExList.prototype, "MaxResult", {
                get: function () { return this.get(ExList.DPMaxResult); },
                set: function (value) { this.set(ExList.DPMaxResult, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExList.prototype, "Shift", {
                get: function () { return this.get(ExList.DPShift); },
                set: function (value) { this.set(ExList.DPShift, value); },
                enumerable: true,
                configurable: true
            });
            ExList.__fields__ = function () { return [ExList.DPFilter, ExList.DPMaxResult, ExList.DPShift, ExList.DPSource]; };
            ExList.prototype.filterChanged = function (e) {
                if (e._old)
                    e._old.OffChanged(this._fid);
                if (e._new)
                    this._fid = e._new.OnChanged(ExList.patentChanged, this);
                this.Reset();
            };
            ExList.prototype.sourceChanged = function (e) {
                if (e._old)
                    e._old.Unlisten = this.sicd;
                if (e._new)
                    e._new.Listen = this.sicd;
                this.Reset();
            };
            ExList.prototype.MaxResultChanged = function (e) {
                this.Reset();
            };
            ExList.New = function (source, filter, argType) {
                var t = new ExList(source == null ? argType : source.ArgType);
                t.Filter = filter;
                t.Source = source;
                return t;
            };
            ExList.patentChanged = function (e, t) {
                t.Reset();
            };
            ExList.prototype.sourceItemChanged = function (e) {
                switch (e.event) {
                    case CollectionEvent.Added:
                        if (this.MaxResult <= this.Count)
                            return;
                        if (this.isMatch(e.startIndex, e.newItem))
                            _super.prototype.Add.call(this, e.newItem);
                        return;
                    case CollectionEvent.Cleared:
                        return _super.prototype.Clear.call(this);
                    case CollectionEvent.Removed:
                        _super.prototype.Remove.call(this, e.oldItem);
                        return;
                    case CollectionEvent.Replace:
                        var i = this.IndexOf(e.oldItem);
                        var m = this.isMatch(e.startIndex, e.newItem);
                        if (m) {
                            if (i == -1)
                                _super.prototype.Add.call(this, e.newItem);
                            else
                                this.Set(i, e.newItem);
                        }
                        else if (i != -1)
                            _super.prototype.RemoveAt.call(this, i);
                        return;
                    case CollectionEvent.Reset:
                        return this.Reset();
                    case CollectionEvent.Setted:
                        var i = this.IndexOf(e.oldItem);
                        var m = this.isMatch(e.startIndex, e.newItem);
                        if (m)
                            if (i == -1)
                                _super.prototype.Add.call(this, e.newItem);
                            else
                                _super.prototype.Set.call(this, i, e.newItem);
                        else if (i !== -1)
                            _super.prototype.RemoveAt.call(this, i);
                        return;
                }
            };
            ExList.prototype.isMatch = function (i, item) {
                var f = this.Filter;
                if (f == null)
                    return true;
                return f.IsMatch(i, item);
            };
            ExList.prototype.Reset = function () {
                _super.prototype.Clear.call(this);
                var s = this.Source;
                if (s == null)
                    return;
                var f = this.Filter;
                var fin = f == null;
                var max = this.MaxResult;
                if (!fin)
                    if (f.Begin(this.Shift, this.MaxResult))
                        _super.prototype.AddRange.call(this, s.AsList());
                    else
                        for (var i = 0, l = s.Count; i < l && max > 0; i++) {
                            var e = s.Get(i);
                            if (fin)
                                _super.prototype.Add.call(this, e);
                            else {
                                var r = f.IsMatch(i, e);
                                if (r === null)
                                    break;
                                if (r)
                                    _super.prototype.Add.call(this, e);
                            }
                        }
            };
            ExList.DPSource = bind.DObject.CreateField("Source", List, null, function (e) { e.__this.sourceChanged(e); });
            ExList.DPFilter = bind.DObject.CreateField("Filter", utils.Filter, null, function (e) { e.__this.filterChanged(e); });
            ExList.DPMaxResult = bind.DObject.CreateField("MaxResult", Number, Infinity, function (e) { e.__this.MaxResultChanged(e); });
            ExList.DPShift = bind.DObject.CreateField("Shift", Number, 0, function (e) { e.__this.MaxResultChanged(e); });
            return ExList;
        }(List));
        collection_1.ExList = ExList;
        var TransList = (function (_super) {
            __extends(TransList, _super);
            function TransList(argType, converter, stat) {
                var _this_1 = _super.call(this, argType) || this;
                _this_1.converter = converter;
                _this_1.stat = stat;
                _this_1.sli = { Owner: _this_1, Invoke: _this_1.OnSourceChanged };
                return _this_1;
            }
            TransList.__fields__ = function () { return [this.DPSource]; };
            TransList.prototype.SourceChanged = function (e) {
                var o = e._old;
                var n = e._new;
                if (o)
                    o.Unlisten = this.sli;
                if (n)
                    n.Listen = this.sli;
                this.Reset();
            };
            TransList.prototype.OnSourceChanged = function (e) {
                this._internal = true;
                try {
                    switch (e.event) {
                        case CollectionEvent.Added:
                            var x = this.converter.ConvertA2B(this, e.startIndex, e.newItem, this.stat);
                            _super.prototype.Add.call(this, x);
                            break;
                        case CollectionEvent.Cleared:
                            _super.prototype.Clear.call(this);
                            break;
                        case CollectionEvent.Removed:
                            _super.prototype.Remove.call(this, e.startIndex);
                            break;
                        case CollectionEvent.Replace:
                            var x = this.converter.ConvertA2B(this, e.startIndex, e.newItem, this.stat);
                            _super.prototype.Set.call(this, e.startIndex, x);
                            break;
                        case CollectionEvent.Reset:
                            this.Reset();
                            break;
                    }
                }
                catch (e) {
                }
                this._internal = false;
            };
            TransList.prototype.Reset = function () {
                _super.prototype.Clear.call(this);
                var n = this.Source;
                if (!n)
                    return;
                n = n.AsList();
                for (var i = 0, l = n.length; i < l; i++) {
                    var x = this.converter.ConvertA2B(this, i, n[i], this.stat);
                    _super.prototype.Add.call(this, x);
                }
            };
            TransList.prototype.Add = function (t) {
                if (this._internal)
                    return _super.prototype.Add.call(this, t);
                this.Source.Add(this.converter.ConvertB2A(this, this._list.length, t, this.stat));
            };
            TransList.prototype.Remove = function (x) {
                if (this._internal)
                    return _super.prototype.Remove.call(this, x);
                this.Source.Remove(this.converter.ConvertB2A(this, this._list.indexOf(x), x, this.stat));
            };
            TransList.prototype.Insert = function (i, item) {
                if (this._internal)
                    return _super.prototype.Insert.call(this, i, item);
                this.Source.Insert(i, this.converter.ConvertB2A(this, i, item, this.stat));
            };
            TransList.prototype.Clear = function () {
                if (this._internal)
                    return _super.prototype.Clear.call(this);
                this.Source.Clear();
            };
            TransList.prototype.Order = function (n) {
            };
            TransList.prototype.OrderBy = function (n) {
            };
            TransList.prototype.Set = function (i, item) {
                if (this._internal)
                    return _super.prototype.Set.call(this, i, item);
                this.Source.Set(i, this.converter.ConvertB2A(this, i, item, this.stat));
            };
            TransList.DPSource = bind.DObject.CreateField("Source", List, null, TransList.prototype.SourceChanged);
            return TransList;
        }(List));
        collection_1.TransList = TransList;
        var Binding = (function () {
            function Binding(dataContext) {
                this.DataContext = dataContext;
            }
            Binding.prototype.GetType = function () { return Binding; };
            Object.defineProperty(Binding.prototype, "DataContext", {
                get: function () { return this._dataContext; },
                set: function (value) {
                    if (value == this._dataContext)
                        return;
                    var t = this._dataContext;
                    if (t != null)
                        t.Unlisten = this.initChanged;
                    if (value != null)
                        value.Listen = this.initChanged;
                    this._dataContext = value;
                    this.OnSourceInitialized(t, value);
                },
                enumerable: true,
                configurable: true
            });
            Binding.prototype.initChanged = function (e) {
                switch (e.event) {
                    case collection.CollectionEvent.Added:
                        this.OnItemAdded(e.newItem, e.startIndex);
                        break;
                    case collection.CollectionEvent.Removed:
                        this.OnItemRemoved(e.oldItem, e.startIndex);
                        break;
                    case collection.CollectionEvent.Cleared:
                        this.OnSourceCleared();
                        break;
                    case collection.CollectionEvent.Reset:
                        this.OnSourceReset();
                        break;
                    case collection.CollectionEvent.Replace:
                        this.OnSourceReplace(e.oldItem, e.newItem, e.startIndex);
                }
            };
            return Binding;
        }());
        collection_1.Binding = Binding;
        var Render = (function (_super) {
            __extends(Render, _super);
            function Render(dataContext) {
                return _super.call(this, dataContext) || this;
            }
            Render.prototype.GetType = function () { return Render; };
            Object.defineProperty(Render.prototype, "RendredList", {
                get: function () {
                    if (this._rendredList == null)
                        this._rendredList = new collection.List(Object, []);
                    return this._rendredList;
                },
                enumerable: true,
                configurable: true
            });
            Render.prototype.OnItemAdded = function (item, index) {
                this.RendredList.Insert(index, this.Render(item));
            };
            Render.prototype.OnItemRemoved = function (item, index) {
                this.RendredList.RemoveAt(index);
            };
            Render.prototype.OnSourceCleared = function () {
                this.RendredList.Clear();
            };
            Render.prototype.OnSourceInitialized = function (_old, _nex) {
                if (_nex != null) {
                    var c = _nex.Count;
                    this.RendredList.Clear();
                    for (var i = 0; i < c; i++) {
                        var e = _nex.Count;
                        this._rendredList.Add(this.Render(_nex.Get(e)));
                    }
                }
            };
            return Render;
        }(Binding));
        collection_1.Render = Render;
        var SyncQuee = (function (_super) {
            __extends(SyncQuee, _super);
            function SyncQuee(handler) {
                var _this_1 = _super.call(this) || this;
                _this_1.quee = [];
                _this_1._isExecuting = false;
                if (!_this_1.handler || !_this_1.handler.Invoke)
                    throw "argument (handler) null";
                _this_1.handler = { Invoke: handler.Invoke, Owner: handler.Owner };
                Object.preventExtensions(_this_1);
                return _this_1;
            }
            SyncQuee.prototype.push = function (data) {
                this.quee.push(data);
                if (!this._isExecuting)
                    this.EndOperation(void 0);
            };
            SyncQuee.prototype.EndOperation = function (e) {
                if (qstore.Get(this) !== e)
                    throw new Error("Unknown frame");
                if (this.quee.length) {
                    this._isExecuting = true;
                    this.CurrentData = this.quee.shift();
                    var e = {
                        data: this.CurrentData, quee: this
                    };
                    qstore.Set(this, e);
                    helper.TryCatch(this.handler.Owner || this, this.handler.Invoke, function (error, e) { e.quee.EndOperation(e); }, [e]);
                }
                else {
                    this._isExecuting = false;
                    this.CurrentData = void 0;
                    qstore.Set(this, void 0);
                }
            };
            __decorate([
                attributes.property(Object),
                __metadata("design:type", Object)
            ], SyncQuee.prototype, "CurrentData", void 0);
            return SyncQuee;
        }(bind.DObject));
        collection_1.SyncQuee = SyncQuee;
        var qstore = new collection.Dictionary("quee_sync_frame");
    })(collection = exports.collection || (exports.collection = {}));
    var mvc;
    (function (mvc) {
        var ITemplate = (function () {
            function ITemplate(Name) {
                this.Name = Name.toLowerCase();
            }
            return ITemplate;
        }());
        mvc.ITemplate = ITemplate;
        var iTemplate = (function (_super) {
            __extends(iTemplate, _super);
            function iTemplate(relativeUrl, name, shadow) {
                var _this_1 = _super.call(this, name) || this;
                if (relativeUrl == null)
                    throw "url is null";
                if (name == null)
                    throw "category is null";
                _this_1._Url = relativeUrl;
                if (shadow == undefined)
                    return _this_1;
                _this_1.Shadow = shadow;
                return _this_1;
            }
            Object.defineProperty(iTemplate.prototype, "Url", {
                get: function () {
                    return this._Url;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(iTemplate.prototype, "Shadow", {
                get: function () {
                    return this._Shadow;
                },
                set: function (v) {
                    if (v != null) {
                        if (!(v instanceof HTMLElement))
                            throw 'shadow is not HTMLElement';
                    }
                    this._Shadow = v;
                },
                enumerable: true,
                configurable: true
            });
            iTemplate.prototype.Create = function () {
                var s = this._Shadow;
                return s == null ? null : s.content.firstElementChild.cloneNode(true);
            };
            iTemplate.prototype.Load = function () {
            };
            return iTemplate;
        }(ITemplate));
        mvc.iTemplate = iTemplate;
        var Devices;
        (function (Devices) {
            Devices[Devices["Desktop"] = 0] = "Desktop";
            Devices[Devices["Mobile"] = 1] = "Mobile";
            Devices[Devices["Tablete"] = 2] = "Tablete";
        })(Devices = mvc.Devices || (mvc.Devices = {}));
        var NULL = (function () {
            function NULL() {
            }
            return NULL;
        }());
        mvc.NULL = NULL;
        var des = new collection.Dictionary("tfolders");
        var MvcDescriptor = (function () {
            function MvcDescriptor(Name, dataType) {
                this.Subs = {};
                this.Items = {};
                this.Name = Name.toLowerCase();
                this.DataType = dataType;
            }
            Object.defineProperty(MvcDescriptor.prototype, "DataType", {
                get: function () {
                    return this._dataType;
                },
                set: function (dataType) {
                    if (dataType == this._dataType)
                        return;
                    if (!dataType)
                        return;
                    if (this._dataType != NULL && typeof this._dataType == "function" && dataType)
                        throw "Conflit types";
                    var tt = des.Get(this._dataType || NULL);
                    if (tt) {
                        var i = tt.IndexOf(this);
                        if (i !== -1)
                            tt.RemoveAt(i);
                    }
                    var tt = des.Get(dataType || NULL);
                    if (!tt)
                        des.Set(dataType || NULL, tt = new collection.List(Object));
                    tt.Add(this);
                    this._dataType = dataType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MvcDescriptor.prototype, "Root", {
                get: function () {
                    var c = this;
                    while (c.Parent)
                        c = c.Parent;
                    return c;
                },
                enumerable: true,
                configurable: true
            });
            MvcDescriptor.prototype.Get = function (path) {
                path = typeof path == 'string' ? path.toLowerCase().split('.') : path;
                var t = this.GetFoder(path, path.length - 1);
                return t && t.Items[path[path.length - 1]];
            };
            MvcDescriptor.prototype.GetFoder = function (path, max) {
                path = path || "";
                if (typeof path == 'string') {
                    path = path.trim().toLowerCase();
                    if (path == '')
                        return this;
                    path = path.split('.');
                }
                var t = this;
                for (var i = 0, max = max || path.length - 1; i < max; i++) {
                    var n = path[i];
                    if (!t)
                        return undefined;
                    switch (n) {
                        case '':
                        case '.':
                            continue;
                        case '..':
                            t = t.Parent;
                            break;
                        case '/':
                            t = t.Root;
                        default:
                            t = t.Subs[n];
                    }
                }
                return t;
            };
            MvcDescriptor.prototype.CreateFolder = function (path, type) {
                path = path || "";
                if (typeof path == 'string') {
                    path = path.trim().toLowerCase();
                    if (path == '') {
                        this.DataType = type;
                    }
                    path = path.split('.');
                }
                var t = this;
                for (var i = 0, max = path.length; i < max; i++) {
                    var n = path[i];
                    if (!t)
                        return undefined;
                    switch (n) {
                        case '':
                        case '.':
                            continue;
                        case '..':
                            t = t.Parent || t;
                            break;
                        case '/':
                            t = t.Root;
                        default:
                            t = t.Subs[n] || t.AddFolder(n, i == max - 1 ? type : undefined);
                    }
                }
                return t;
            };
            MvcDescriptor.prototype.Add = function (templ) {
                if (!this.Subs)
                    this.Subs = {};
                this.Items[templ.Name] = templ;
                if (!this.Default)
                    this.Default = templ;
                return this;
            };
            MvcDescriptor.prototype.AddFolder = function (name, dataType) {
                var x = this.Subs[name = name.toLowerCase()];
                if (x)
                    if (x.DataType) {
                        if (dataType && x.DataType != dataType)
                            throw "Conflit types";
                        return x;
                    }
                    else {
                        x.DataType = dataType;
                        return x;
                    }
                this.Subs[name] = x = new MvcDescriptor(name, dataType);
                return x;
            };
            MvcDescriptor.prototype.registerTemplates = function (dom, url, getType) {
                var des;
                var name = dom.getAttribute('name');
                var type = dom.hasAttribute('type') ? getType(dom.getAttribute('type')) : undefined;
                for (var i = 0; i < dom.children.length; i++) {
                    des = dom.children.item(i);
                    this.Process(des, url, getType);
                }
                return this;
            };
            MvcDescriptor.prototype.registerTemplate = function (cat, url, name) {
                var templateName = name || cat.getAttribute('name');
                if (templateName == null) {
                    console.error('template must have a name \r\nfrom :' + url, cat);
                    return;
                }
                if (cat.children.length > 1) {
                    var v = document.createElement('div');
                    var x = cat.children;
                    for (var i = 0; i < x.length; i++) {
                        var f = x.item(i);
                        f.remove();
                        v.appendChild(f);
                    }
                    cat.appendChild(v);
                }
                var p;
                this.Add(p = new mvc.iTemplate(url + '#' + name + '+' + templateName, templateName, cat));
                if (cat.hasAttribute('default'))
                    this.Default = p;
                return this;
            };
            MvcDescriptor.Get = function (path) {
                return this.Root.Get(path);
            };
            MvcDescriptor.GetByType = function (datatype) {
                var t = des.Get(datatype || NULL);
                return t && t.Count > 0 && t.Get(0);
            };
            MvcDescriptor.GetByName = function (folderName) {
                var r = this.Root;
                for (var f in r.Subs)
                    if (f == folderName)
                        return r.Subs[f];
                return null;
            };
            MvcDescriptor.Add = function (template, path, name) {
                var t = this.Root.CreateFolder('templates', bind.DObject);
                return t.registerTemplate(template, path, name);
            };
            MvcDescriptor.New = function (name, dataType) {
                return new MvcDescriptor(name, dataType);
            };
            MvcDescriptor.prototype.Register = function (path, tmp, url, name) {
                var t = this.CreateFolder(path, undefined);
                return t.registerTemplate(tmp, url, name);
            };
            MvcDescriptor.prototype.Process = function (des, url, getType) {
                switch (des.tagName) {
                    case 'TEMPLATE':
                        return this.registerTemplate(des, url);
                    case 'DESCRIPTOR':
                    case 'TEMPLATES':
                        var name = des.getAttribute('name');
                        var type = des.hasAttribute('type') ? getType(des.getAttribute('type')) : undefined;
                        return this.CreateFolder(name, type).registerTemplates(des, url, getType);
                    case 'IMPORT': {
                        var name = des.getAttribute('name');
                        if (!name)
                            return;
                        var from = this.GetFoder(des.getAttribute('from') || '');
                        from.Subs[name] = from;
                        return;
                    }
                    case 'DEBUGGER':
                        stop();
                        return;
                    case 'REQUIRE':
                    case 'DEBUGGER':
                        return;
                    default:
                        console.error('Tag {' + des.tagName + "} Unresolved");
                }
            };
            MvcDescriptor.Root = new MvcDescriptor('root', function () { });
            return MvcDescriptor;
        }());
        mvc.MvcDescriptor = MvcDescriptor;
        var Initializer = (function () {
            function Initializer(require) {
                this.require = require;
                this._system = new collection.List(mvc.MvcDescriptor);
                this._pending = 0;
                this.templatesDescrpt = this.getDescriptor("templates", bind.DObject);
                if (require == null)
                    throw 'require argument is null';
                if (_Instance)
                    throw "App cannot have more than initializer";
                _Instance = this;
                this.Init();
            }
            Object.defineProperty(Initializer, "Instances", {
                get: function () {
                    return _Instance || (_Instance = new Initializer(require));
                },
                enumerable: true,
                configurable: true
            });
            Initializer.prototype.Init = function () { };
            Initializer.prototype.Dispose = function () { };
            Object.defineProperty(Initializer.prototype, "System", {
                get: function () { return this._system; },
                enumerable: true,
                configurable: true
            });
            Initializer.prototype.Add = function (templGroup, require) {
                this.pending++;
                (require || this.require)('template|' + templGroup.Url, Initializer.gonsuccess, Initializer.gonerror, { _this: this, tmpl: templGroup });
            };
            Initializer.SetTypeResolver = function (name, typeResolver) {
                Initializer.typeResolvers[name] = typeResolver;
            };
            Object.defineProperty(Initializer.prototype, "pending", {
                get: function () {
                    return this._pending;
                },
                set: function (v) {
                    if (v < 0)
                        throw "pending cannot be less then 0";
                    if (v === this._pending)
                        return;
                    this._pending = v;
                    if (v === 0)
                        Initializer.onfinish(this);
                },
                enumerable: true,
                configurable: true
            });
            Initializer.gonsuccess = function (r) {
                var t = this;
                var __this = t._this;
                try {
                    Initializer.MakeAsParsed(r);
                    __this.ExcecuteTemplate(t.tmpl.Url, r.html);
                    if (t.tmpl.OnSuccess)
                        thread.Dispatcher.call(t.tmpl, t.tmpl.OnSuccess, t._this);
                }
                catch (e) {
                }
                __this.pending--;
            };
            Initializer.gonerror = function (r) {
                var t = this;
                console.error(" Group of templates [" + t.tmpl.Url + "]: error downloading");
                if (t.tmpl && t.tmpl.OnError)
                    thread.Dispatcher.call(t.tmpl, t.tmpl.OnError, t._this);
                t._this.pending--;
            };
            Initializer.onsuccess = function (r) {
                var t = this;
                var tmpl = t.tmpl;
                var __this = t._this;
                __this.pending--;
                tmpl.Shadow = Initializer.htmlToElements(r);
                if (__this.pending === 0)
                    Initializer.onfinish(t._this);
            };
            Initializer.onerror = function (r) {
                var t = this;
                t._this.pending--;
                console.error("template [" + t.tmpl.Url + "] error downloading");
                t.tmpl.Shadow = Initializer.html2Template("<error>Error Downloading Template</error>");
                if (t._this.pending === 0)
                    Initializer.onfinish(t._this);
            };
            Initializer.html2Template = function (html) {
                var t = document.createElement('template');
                t.innerHTML = html;
                return t;
            };
            Initializer.htmlToElements = function (html) {
                var t = document.createElement('div');
                t.innerHTML = html;
                return t;
            };
            Initializer.prototype.then = function (call) {
                if (this.pending <= 0)
                    return call(this);
                Initializer.callbacks.push(call);
            };
            Initializer.then = function (call) {
                Initializer.callbacks.push(call);
            };
            Initializer.prototype.onfinish = function () {
                var c = Initializer.callbacks;
                while (c.length)
                    c.shift()(this);
            };
            Initializer.onfinish = function (t) {
                for (var i = 0; i < Initializer.callbacks.length; i++)
                    Initializer.callbacks[i](t);
            };
            Initializer.Get = function (type) {
                var n = _Instance.System;
                {
                    var l = n.Count;
                    for (var i = 0; i < l; i++) {
                        var e = n.Get(i);
                        if (e.DataType == type)
                            return e;
                    }
                }
                return null;
            };
            Initializer.prototype.getDescriptor = function (name, type) {
                name = name.toLowerCase();
                if (!name && !type)
                    return this.templatesDescrpt;
                if (name)
                    var descipter = MvcDescriptor.GetByName(name);
                if (!descipter && type)
                    descipter = MvcDescriptor.GetByType(type);
                if (descipter && descipter.Name.toLowerCase() != name.toLowerCase())
                    descipter = null;
                if (!descipter)
                    descipter = MvcDescriptor.Root.AddFolder(name, type);
                else if (descipter.Name !== name.toLowerCase() || descipter.DataType !== type)
                    console.log("Conflit with others template: Name(" + name + "," + descipter.Name + ")==Type(" + type + "," + descipter.DataType + ")");
                return descipter;
            };
            Initializer.prototype.ExcecuteTemplate = function (url, templ, typeResolver, e) {
                var types = {};
                var templatesDescrpt = this.getDescriptor("templates", bind.DObject);
                function getType(name) {
                    var t = types[name = name];
                    if (t != null)
                        return t;
                    if (typeResolver)
                        t = typeResolver(name);
                    if (t == null || !(t instanceof Function)) {
                        t = (e && e.context && e.context.GetType(name)) || context_3.context.GetType(name);
                        if (t == undefined || !(t instanceof Function))
                            throw "type " + name + " unresolved";
                    }
                    types[name] = t;
                    return t;
                }
                MvcDescriptor.Root.Process(templ, url, getType);
            };
            Initializer.Register = function (e) {
                var tempate = e.exports;
                if (this.parsed.indexOf(tempate) !== -1)
                    return;
                else if (tempate.html.hasAttribute('private'))
                    return;
                else
                    this.Instances.ExcecuteTemplate(e.url.toString(), tempate.html, null, tempate);
            };
            Initializer.MakeAsParsed = function (r) {
                this.parsed.push(r);
            };
            Initializer.typeResolvers = {};
            Initializer.callbacks = [];
            Initializer.parsed = [];
            return Initializer;
        }());
        mvc.Initializer = Initializer;
        var Template = (function () {
            function Template(templateDOM) {
                this._name = "";
                this._for = "";
                if (Template._store === undefined)
                    Template._store = new collection.List(Template);
                if (Template.fromInside == true) {
                    this._view = templateDOM;
                    this._name = templateDOM.getAttribute("name");
                    this._for = templateDOM.getAttribute("for");
                    if (this._name == null)
                        throw "name is null";
                    Template._store.Add(this);
                }
                else
                    throw "Access violatile";
            }
            Object.defineProperty(Template.prototype, "forType", {
                get: function () { return this._type; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Template.prototype, "View", {
                get: function () { return this._view; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Template.prototype, "Name", {
                get: function () { return this._name; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Template.prototype, "For", {
                get: function () { return this._for; },
                enumerable: true,
                configurable: true
            });
            Template.getTemplates = function (type) {
                var c = Template._store;
                var rt = [];
                for (var i = c.Count - 1; i >= 0; i--) {
                    var t = c.Get(i);
                    if (t.forType == type)
                        rt.push(t);
                }
                return rt;
            };
            Template.LoadTemplate = function (templateName, context) {
                var templatePath = Template.TempplatesPath + templateName;
                Template.getWebRequest().Download(new net.RequestUrl(templatePath, context), null);
            };
            Template.getWebRequest = function () {
                if (Template._webRequest)
                    return Template._webRequest;
                var c = basic.Crypto;
                var w = new net.WebRequest(c);
                w.OnComplete.On = Template.OnRecieveTemplates;
                return Template._webRequest = w;
            };
            Template.OnRecieveTemplates = function (result) {
                if (Template.getWebRequest().IsSuccess == false)
                    return;
                var x = Template.getWebRequest();
                var r = x.Response;
                var templates = document.createElement("templates");
                templates.innerHTML = r;
                templates = templates.firstChild;
                for (var i = 0; i < templates.childElementCount; i++) {
                    Template.createTemplate(templates.children.item(i));
                }
            };
            Template.createTemplate = function (tmplate) {
                Template.fromInside = true;
                var t = null;
                try {
                    t = new Template(tmplate);
                }
                catch (error) {
                }
                Template.fromInside = false;
                return t;
            };
            Template.GetAll = function (name) {
                if (arguments.length == 2)
                    var a = Template._store;
                var x = [];
                for (var i = 0; i < a.Count; i++) {
                    var t = a.Get(i);
                    if (t._name == name)
                        x.push(t);
                }
                return x;
            };
            Template.Get = function (name, vtype) {
                var a = Template._store;
                for (var i = 0; i < a.Count; i++) {
                    var t = a.Get(i);
                    if (t._name == name && vtype == t._for)
                        return t;
                }
                return null;
            };
            Template.Foreach = function (callback) {
                var s = Template._store;
                for (var i = s.Count - 1; i >= 0; i--) {
                    var t = s.Get(i);
                    if (callback(t))
                        return;
                }
            };
            Template.TempplatesPath = "./templates/";
            Template.fromInside = false;
            return Template;
        }());
        mvc.Template = Template;
    })(mvc = exports.mvc || (exports.mvc = {}));
    (function (bind) {
        var Scop = (function (_super) {
            __extends(Scop, _super);
            function Scop(_bindingMode) {
                var _this_1 = _super.call(this) || this;
                _this_1._bindingMode = _bindingMode == null ? 1 : _bindingMode;
                return _this_1;
            }
            Scop.prototype.getScop = function (path, createIfNotEist) {
                return Scop.getAttribute(this, path.split(/[\s\\\/\.]+/), createIfNotEist);
            };
            Scop.prototype.findScop = function (path) {
                var cs = this;
                do {
                    var t = path.pop();
                    switch (t) {
                        case '.':
                            continue;
                        case '..':
                            cs = cs.getParent();
                            break;
                        default:
                            var c = t.charCodeAt(0);
                            if (c === 36 || c === 126)
                                throw "optimize your code by delete the first part befor ($|~)";
                            if (c === 64) {
                            }
                            cs = cs._scops && cs._scops[t];
                            break;
                    }
                } while (path.length > 0);
            };
            Scop.prototype.getParent = function () { return this._parent; };
            Scop.prototype.setParent = function (v) {
                if (v == this._parent)
                    return true;
                if (this.canBeParent(v))
                    this._parent = v;
                else
                    return false;
                return true;
            };
            Scop.prototype.canBeParent = function (v) {
                var t = v;
                while (t && t != this) {
                    t = t.getParent();
                }
                return !t;
            };
            Scop.prototype.SetExParent = function (scop, parent) {
                return this.setParent(scop) || this.setParent(parent);
            };
            Scop.prototype.findAttribute = function (name) {
                var scp = this;
                var x = [];
                while (scp) {
                    if (x.indexOf(scp) != -1)
                        return undefined;
                    if (scp._scops && scp._scops.hasOwnProperty(name))
                        return scp._scops[name];
                    x.push(scp);
                    scp = this.getParent();
                }
            };
            Scop.getAttribute = function (scp, name, createIfNotEist) {
                if (typeof name == 'string')
                    name = [name];
                if (!name || name.length == 0)
                    return scp;
                var fscp = scp.findAttribute(name[0]);
                if (!fscp && !createIfNotEist)
                    return null;
                if (fscp) {
                    scp = fscp;
                    name.shift();
                }
                while (name.length) {
                    var fname = name.shift();
                    var s = void 0;
                    if (scp._scops && scp._scops.hasOwnProperty(fname))
                        s = scp._scops[fname];
                    else if (createIfNotEist) {
                        if (!scp._scops)
                            scp._scops = {};
                        scp._scops[fname] = s = new ValueScop(null);
                        s.setParent(scp);
                    }
                    else
                        return null;
                    scp = s;
                }
                return scp;
            };
            Scop.prototype.setAttribute = function (name, value) {
                var s = this.getScop(name, true);
                s.Value = value;
            };
            Scop.prototype.getAttribute = function (name, createIfNotEist) {
                return Scop.getAttribute(this, [name], createIfNotEist);
            };
            Scop.__fields__ = function () { return [Scop.DPValue]; };
            Object.defineProperty(Scop.prototype, "BindingMode", {
                get: function () { return this._bindingMode; },
                set: function (value) { this._bindingMode = value == null ? 1 : value; },
                enumerable: true,
                configurable: true
            });
            Scop.prototype.valueChanged = function (sender, e) {
                e.__this._OnValueChanged(e);
            };
            Scop.prototype._OnValueChanged_ = function (e) { return this._OnValueChanged(e); };
            Scop.Create = function (s, parent, bindingMode, controller) {
                bindingMode = bindingMode == null ? 1 : bindingMode;
                var e = s.split('|');
                if (e.length === 1)
                    return this.GenerateScop(s, parent, bindingMode, controller);
                for (var i = 0; i < e.length; i += 2) {
                    var f1 = e[i], f2 = e[i + 1];
                    parent = f1.length === 0 ? parent : this.GenerateScop(f1, parent, bindingMode, controller);
                    parent = f2.length == 0 ? parent : CreateFilter(f2, parent, bindingMode || 3) || parent;
                }
                return parent;
            };
            Scop.BuildScop = function (p, parent, bindingMode, controller) {
                var scop = parent;
                switch (p.tokon) {
                    case 'keyword':
                        scop = p.resut === 'this' ? controller && controller.MainControll
                            : p.resut === 'window' ? bind.windowScop : parent;
                        break;
                    case 'anonymousscop':
                        var scop = AnonymouseScop.UnRegister(p.resut);
                        scop.setParent(parent);
                        break;
                    case 'bindscope':
                        scop = new bind.Bind(p.resut, scop, bindingMode);
                        break;
                    case 'namedscop':
                        scop = NamedScop.Create(p.resut, null, bindingMode);
                        break;
                    case 'parentscop':
                        for (var j = p.resut - 1; j >= 0; j--)
                            scop = scop && scop.getParent();
                        break;
                    case 'subscop':
                        scop = Scop.getAttribute(scop, p.resut, true);
                        break;
                    case 'typedscope':
                        scop = new TypedScop(scop, p.resut, bindingMode);
                        scop.setParent(parent);
                        break;
                    case Syntaxer_1.Parser.CToken.functionCall:
                        scop = new FunctionCallScop(p.resut, parent, controller);
                        scop.setParent(parent);
                        break;
                    case Syntaxer_1.Parser.CToken.arrayCall:
                        scop = new ArrayCallScop(p.resut, parent, controller);
                        scop.setParent(parent);
                        break;
                    case Syntaxer_1.Parser.CToken.path:
                        for (var _i = 0, _a = p.resut; _i < _a.length; _i++) {
                            var i = _a[_i];
                            scop = this.BuildScop(i, scop, bindingMode, controller);
                        }
                        break;
                    default:
                        return null;
                }
                return scop;
            };
            Scop.GenerateScop = function (s, _parent, bindingMode, controller) {
                if (s == "" || s == null || s == ".")
                    return _parent;
                var t = Syntaxer_1.Parser.parseExpression(s);
                if (!t.success)
                    return console.error('bind path : ' + s), null;
                return Scop.BuildScop(t, _parent, bindingMode, controller);
            };
            Scop.GetStringScop = function (s, _parent, controller) {
                return StringScop.GetStringScop(s, _parent, controller);
            };
            Scop.prototype.AddJob = function (job, dom) {
                var ji = new bind.JobInstance(this, job, dom);
                if (!this.__jobs__)
                    this.__jobs__ = [ji];
                else
                    this.__jobs__.push(ji);
                if (job.OnInitialize != null)
                    job.OnInitialize(ji, null);
                return ji;
            };
            Scop.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.setParent(null);
                if (this.__jobs__) {
                    for (var i = 0; i < this.__jobs__.length; i++) {
                        var ji = this.__jobs__[i];
                        if (ji.IsDisposed)
                            continue;
                        ji.Dispose();
                        basic.Url;
                    }
                    this.__jobs__.length = 0;
                    this.__jobs__ = null;
                }
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            Scop.prototype.RegisterJob = function (job) {
                if (!this.__mjobs__)
                    this.__mjobs__ = {};
                this.__mjobs__[job.Name] = job;
            };
            Scop.prototype.GetJob = function (name) {
                return this.__mjobs__ && this.__mjobs__[name];
            };
            Scop.prototype.getThis = function () {
                return this.__Controller__ && this.__Controller__.CurrentControl;
            };
            Object.defineProperty(Scop.prototype, "__hasSegments__", {
                get: function () { return false; },
                enumerable: true,
                configurable: true
            });
            Scop.prototype.forEach = function (callback, param) {
            };
            Object.defineProperty(Scop.prototype, "ParentValue", {
                get: function () { var p = this.getParent(); return p && p.Value; },
                enumerable: true,
                configurable: true
            });
            Scop.prototype.WhenIschanged = function (callback, owner) {
                return this.OnPropertyChanged(Scop.DPValue, callback, owner).Dispose;
            };
            Scop.prototype.OffIsIchangeing = function (callback) {
            };
            Scop.DPValue = bind.DObject.CreateField("Value", Object, void 0, Scop.prototype._OnValueChanged_);
            return Scop;
        }(bind.DObject));
        bind.Scop = Scop;
        var StringScop = (function (_super) {
            __extends(StringScop, _super);
            function StringScop(template, _parent, controller) {
                var _this_1 = _super.call(this, bind.BindingMode.SourceToTarget) || this;
                _this_1.template = template;
                for (var _i = 0, template_1 = template; _i < template_1.length; _i++) {
                    var str = template_1[_i];
                    if ((typeof str)[0] !== 'o')
                        continue;
                    str.scop = Scop.GenerateScop(str.Code, _parent, BindingMode.SourceToTarget, controller);
                    str.pb = str.scop.OnPropertyChanged(Scop.DPValue, _this_1.Reset, _this_1);
                }
                _this_1.setParent(_parent);
                _this_1.Reset(void 0, void 0);
                return _this_1;
            }
            StringScop.prototype.AttacheTo = function (Dom) {
                this._dom = Dom;
                this._dom && (this._dom.textContent = this.Value || "");
            };
            StringScop.GetStringScop = function (s, _parent, controller) {
                var d = Syntaxer_1.Parser.StringTemplate.Compile(s);
                for (var _i = 0, d_1 = d; _i < d_1.length; _i++) {
                    var x = d_1[_i];
                    if ((typeof x)[0] !== 'o')
                        continue;
                    else
                        return new StringScop(d, _parent, controller);
                }
                return s;
            };
            StringScop.prototype._OnValueChanged = function (e) { this._dom && (this._dom.textContent = e._new || ""); };
            StringScop.prototype.setParent = function (v) {
                if (!this.canBeParent(v))
                    return false;
                var lp = this._parent;
                if (lp && this.pb)
                    lp.removeEvent(bind.Scop.DPValue, this.pb);
                else
                    this.pb = null;
                this._parent = v;
                for (var i = 0; i < this.template.length; i++) {
                    var r = this.template[i];
                    if ((typeof r)[0] !== 'o' || !(r.scop instanceof bind.Bind))
                        continue;
                    r.scop && r.scop.setParent(v);
                }
                return true;
            };
            StringScop.prototype.Reset = function (sender, e) {
                for (var i = 0; i < this.template.length; i++) {
                    var r = this.template[i];
                    if ((typeof r)[0] !== 'o')
                        continue;
                    r.result = r.scop && r.scop.Value;
                }
                this.Value = Syntaxer_1.Parser.StringTemplate.GenearteString(this.template);
            };
            StringScop.prototype.FromJson = function (json, context, update) {
                return this;
            };
            StringScop.prototype.ToJson = function (context, iintexder) {
                var o = _super.prototype.ToJson.call(this, context, iintexder);
                return o;
            };
            StringScop.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.setParent(null);
                for (var i = 0; i < this.template.length; i++) {
                    var r = this.template[i];
                    if ((typeof r)[0] !== 'o' || !(r.scop instanceof bind.Bind))
                        continue;
                    r.scop.Dispose();
                }
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            return StringScop;
        }(bind.Scop));
        bind.StringScop = StringScop;
        function isConstant(t) {
            return t.tokon <= Syntaxer_1.Parser.CToken.string;
        }
        var FunctionCallScop = (function (_super) {
            __extends(FunctionCallScop, _super);
            function FunctionCallScop(rslt, _parent, controller) {
                var _this_1 = _super.call(this, 1) || this;
                _this_1.caller = {
                    scop: Scop.BuildScop(rslt.caller, _parent, BindingMode.SourceToTarget, controller)
                };
                _this_1.caller.pb = _this_1.caller.scop.OnPropertyChanged(Scop.DPValue, _this_1.Reset, _this_1);
                _this_1.args = new Array(rslt.args.length);
                for (var i = 0; i < rslt.args.length; i++) {
                    var arg = rslt.args[i];
                    _this_1.args[i] = {
                        isConstant: isConstant(arg),
                        value: isConstant(arg) ? arg.resut : void 0,
                        scop: isConstant(arg) ? void 0 : Scop.BuildScop(arg, _parent, BindingMode.SourceToTarget, controller)
                    };
                    if (!_this_1.args[i].isConstant)
                        _this_1.args[i].pb = _this_1.args[i].scop.OnPropertyChanged(Scop.DPValue, _this_1.Reset, _this_1);
                }
                _this_1.Reset();
                return _this_1;
            }
            FunctionCallScop.prototype._OnValueChanged = function (e) { };
            FunctionCallScop.prototype.Reset = function (s, e) {
                var caller = this.caller.scop.Value;
                if (typeof caller !== 'function') {
                    this.Value = caller;
                    return;
                }
                var args = new Array(this.args.length);
                for (var i = 0; i < this.args.length; i++) {
                    var arg = this.args[i];
                    args[i] = arg.isConstant ? arg.value : arg.value = this.args[i].scop.Value;
                }
                this.Value = helper.TryCatch(this.caller.scop.ParentValue, caller, void 0, args);
            };
            return FunctionCallScop;
        }(bind.Scop));
        bind.FunctionCallScop = FunctionCallScop;
        var ArrayCallScop = (function (_super) {
            __extends(ArrayCallScop, _super);
            function ArrayCallScop(rslt, _parent, controller) {
                var _this_1 = _super.call(this, 1) || this;
                _this_1.caller = {
                    scop: Scop.BuildScop(rslt.caller, _parent, BindingMode.SourceToTarget, controller)
                };
                _this_1.caller.pb = _this_1.caller.scop.OnPropertyChanged(Scop.DPValue, _this_1.Reset, _this_1);
                var arg = rslt.index;
                _this_1.index = {
                    isConstant: isConstant(arg),
                    value: isConstant(arg) ? arg.resut : void 0,
                    scop: isConstant(arg) ? void 0 : Scop.BuildScop(arg, _parent, BindingMode.SourceToTarget, controller)
                };
                if (!_this_1.index.isConstant)
                    _this_1.index.pb = _this_1.index.scop.OnPropertyChanged(Scop.DPValue, _this_1.Reset, _this_1);
                _this_1.Reset();
                return _this_1;
            }
            ArrayCallScop.prototype._OnValueChanged = function (e) { };
            ArrayCallScop.prototype.Reset = function (s, e) {
                var caller = this.caller.scop.Value;
                var index = this.index.isConstant ? this.index.value : this.index.scop.Value;
                if (caller instanceof collection.List)
                    this.Value = caller.Get(index);
                else
                    this.Value = caller[index];
            };
            return ArrayCallScop;
        }(bind.Scop));
        bind.ArrayCallScop = ArrayCallScop;
        var scops = {};
        var NamedScop = (function (_super) {
            __extends(NamedScop, _super);
            function NamedScop(name, bindingMode) {
                var _this_1 = _super.call(this, bindingMode) || this;
                if (name.charAt(0) == '$')
                    throw "Name of scop cannot be started with '$' char";
                if (vars.names_scop_fromIn != true)
                    throw "Access violatil";
                _this_1._name = name;
                if (name)
                    scops[name] = _this_1;
                vars.names_scop_fromIn = false;
                return _this_1;
            }
            Object.defineProperty(NamedScop.prototype, "Name", {
                get: function () { return this._name; },
                enumerable: true,
                configurable: true
            });
            NamedScop.Get = function (name) {
                return scops[name];
            };
            NamedScop.prototype._OnValueChanged = function (e) {
            };
            NamedScop.Create = function (name, value, twoWay) {
                var t = scops[name];
                if (t != null)
                    return t;
                vars.names_scop_fromIn = true;
                t = new NamedScop(name, twoWay);
                t.Value = value;
                return t;
            };
            NamedScop.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                _super.prototype.Dispose.call(this);
                scops[this.Name] = undefined;
                delete scops[this.Name];
                if (!h)
                    this.DisposingStat = 2;
            };
            return NamedScop;
        }(Scop));
        bind.NamedScop = NamedScop;
        var Bind = (function (_super) {
            __extends(Bind, _super);
            function Bind(path, parent, bindMode) {
                var _this_1 = _super.call(this, bindMode) || this;
                _this_1.pb = null;
                _this_1.observer = new bind.Observer(null, []);
                _this_1.int = false;
                if (typeof path === 'string')
                    path = path.split('.');
                _this_1.Path = path;
                if (typeof (parent) == "string")
                    parent = NamedScop.Create(parent, undefined);
                _this_1.int = true;
                _this_1.Parent = parent;
                _this_1.Value = _this_1.observer.Value;
                if ((bindMode & 1) == 1)
                    _this_1.observerBinding = _this_1.observer.OnPropertyChanged(bind.Observer.DPValue, _this_1.__OnValueChanged, _this_1);
                _this_1.int = false;
                return _this_1;
            }
            Bind.__fields__ = function () {
                return [Bind.DPParent, Bind.DPPath];
            };
            Bind.prototype.PathChanged = function (e) {
                this.int = true;
                this.observer.Path = e._new == null ? [] : e._new;
                this.int = false;
            };
            Bind.ParentChanged = function (e) {
                var t = e.__this;
                var n = e._new;
                var o = e._old;
                if (o != null && t.pb != null) {
                    o.removeEvent(Scop.DPValue, t.pb);
                }
                if (n != null) {
                    t.pb = n.OnPropertyChanged(Scop.DPValue, t.ParentValueChanged, t);
                    t.observer.Me = n.Value;
                }
                else
                    t.observer.Me = null;
            };
            Bind.prototype.Dispose = function () {
                var h = this.OnDispose();
                if (h === null)
                    return;
                this.removeEvent(Scop.DPValue, this.pb);
                this.observer.removeEvent(bind.Observer.DPValue, this.observerBinding);
                this.observer.Dispose();
                this.pb = null;
                this.observerBinding = null;
                this.observer = null;
                _super.prototype.Dispose.call(this);
                if (!h)
                    this.DisposingStat = 2;
            };
            Bind.prototype.ParentValueChanged = function (sender, e) {
                this.int = true;
                this.observer.Me = e._new;
                this.int = false;
            };
            Object.defineProperty(Bind.prototype, "Path", {
                get: function () { return this.get(Bind.DPPath); },
                set: function (value) { this.set(Bind.DPPath, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Bind.prototype, "Parent", {
                get: function () { return this.get(Bind.DPParent); },
                set: function (value) { this.set(Bind.DPParent, value); },
                enumerable: true,
                configurable: true
            });
            Bind.prototype.__OnValueChanged = function (sender, e) {
                this.isChanging = true;
                this.Value = e._new;
                this.isChanging = false;
            };
            Bind.prototype.AttributeChanged = function (e) {
            };
            Bind.prototype._OnValueChanged = function (e) {
                if (this.isChanging)
                    return;
                if (((this.BindingMode & 2) === 2) && !this.int) {
                    var o = this.observer;
                    var p = o.xpath;
                    var l = p.length;
                    if (l === 0)
                        return;
                    var parent;
                    var lp = p[l - 1];
                    if (l === 1)
                        parent = o.Me;
                    else
                        parent = p[l - 2].Value;
                    if (parent)
                        if (lp.Property != null)
                            parent.set(lp.Property, e._new);
                        else
                            parent[lp.Name] = e._new;
                }
            };
            Bind.prototype.getParent = function () { return this.get(Bind.DPParent); };
            Bind.prototype.setParent = function (v) { if (this.canBeParent(v))
                this.set(Bind.DPParent, v);
            else
                return false; return true; };
            Bind.prototype.getChildren = function () { return []; };
            Object.defineProperty(Bind.prototype, "Values", {
                get: function () { return this.observer.xpath; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Bind.prototype, "Segments", {
                get: function () { return this.observer.xpath; },
                enumerable: true,
                configurable: true
            });
            Bind.prototype.forEach = function (callback, param) {
                var t = this.observer.xpath;
                for (var i = t.length - 1; i >= 0; i--) {
                    if (callback(t[i].Value, param))
                        return { value: t[i].Value };
                }
            };
            Object.defineProperty(Bind.prototype, "ParentValue", {
                get: function () {
                    var pth = this.observer.xpath;
                    if (pth.length == 1) {
                        var p = this.getParent();
                        return p && p.Value;
                    }
                    return pth[pth.length - 2].Value;
                },
                enumerable: true,
                configurable: true
            });
            Bind.DPPath = bind.DObject.CreateField("Path", Array, null, Bind.prototype.PathChanged);
            Bind.DPParent = bind.DObject.CreateField("Parent", Scop, null, Bind.ParentChanged);
            return Bind;
        }(Scop));
        bind.Bind = Bind;
        var i = -1;
        var ascops = [];
        var AnonymouseScop;
        (function (AnonymouseScop) {
            function Register(scop) {
                ascops[++i] = scop;
                return i;
            }
            AnonymouseScop.Register = Register;
            function UnRegister(i) {
                var t = ascops[i];
                ascops[i] = undefined;
                return t;
            }
            AnonymouseScop.UnRegister = UnRegister;
            function Get(i) {
                return ascops[i];
            }
            AnonymouseScop.Get = Get;
        })(AnonymouseScop = bind.AnonymouseScop || (bind.AnonymouseScop = {}));
        var ValueScop = (function (_super) {
            __extends(ValueScop, _super);
            function ValueScop(value, bindMode) {
                var _this_1 = _super.call(this, bindMode) || this;
                _this_1.Value = value;
                return _this_1;
            }
            ValueScop.prototype._OnValueChanged = function (e) {
            };
            return ValueScop;
        }(Scop));
        bind.ValueScop = ValueScop;
        bind.windowScop = new ValueScop(window, 0);
        var TypedScop = (function (_super) {
            __extends(TypedScop, _super);
            function TypedScop(parent, type, bindingMode) {
                var _this_1 = _super.call(this, bindingMode) || this;
                _this_1.eq = type.type == '=';
                _this_1.itself = type.type == ':';
                _this_1.type = context_3.context.GetType(type.path) || type.type;
                _this_1.setParent(parent);
                return _this_1;
            }
            TypedScop.prototype.getParent = function () {
                return this.parent;
            };
            TypedScop.prototype.setParent = function (v) {
                if (v == this.parent)
                    return;
                if (this.parent && this.pB)
                    this.parent.removeEvent(Scop.DPValue, this.pB);
                this.pB = v.OnPropertyChanged(Scop.DPValue, this.OnParentValueChanged, this);
                this.parent = v;
                this.reProcess();
                return true;
            };
            TypedScop.prototype._OnValueChanged = function (e) {
            };
            TypedScop.prototype.OnParentValueChanged = function (pB, e) {
                this.reProcess();
            };
            TypedScop.prototype.reProcess = function () {
                var pS = this.parent;
                var tiss = typeof this.type === 'string';
                while (pS) {
                    if (pS.__hasSegments__ && pS.forEach(function (s, p) { return p.checkType(s, tiss, true); }, this) !== undefined)
                        return;
                    else if (this.checkType(pS, tiss, this.itself))
                        return;
                    pS = pS.getParent();
                    this.setAttribute;
                }
            };
            TypedScop.prototype.checkType = function (pS, tiss, itself) {
                var pv = itself ? pS : pS.Value;
                if (pv != null)
                    if (tiss) {
                        if (pv.constructor.name == this.type) {
                            this.Value = pv;
                            return true;
                        }
                    }
                    else if (this.eq ? pv.constructor === this.type : pv instanceof this.type) {
                        this.Value = pv;
                        return true;
                    }
            };
            return TypedScop;
        }(Scop));
        bind.TypedScop = TypedScop;
        var tx = {
            '3': 3,
            '2': 2,
            '1': 1,
            '': 0,
            'false': 1,
            'true': 3
        };
        function getDbTwoWay(t) {
            if (t == null)
                return 1;
            return tx[t] || BindingMode[t];
        }
        var db = (function () {
            function db(dom) {
                this.events = {};
                var a = dom.attributes;
                for (var i = 0; i < a.length; i++) {
                    var n = a[i].name;
                    if (n.indexOf('db-') === 0)
                        this[n.substr(3)] = a[i].value;
                    else if (n.indexOf('on-') === 0) {
                        this.events[n.substr(3)] = a[i].value;
                    }
                }
                if (this.twoway)
                    this.twoway = getDbTwoWay(this.twoway);
                this.init = helper.TryCatch(JSON, JSON.parse, void 0, [this.init]);
                if (this.stop != undefined) {
                    if (typeof stop !== undefined)
                        stop();
                    stop();
                }
            }
            return db;
        }());
        bind.db = db;
        var Todo = (function () {
            function Todo(scopFunction) {
                this.scopFunction = scopFunction;
            }
            Object.defineProperty(Todo.prototype, "Name", {
                get: function () { return "Todo"; },
                enumerable: true,
                configurable: true
            });
            Todo.prototype.Todo = function (job, e) {
                var v = this.scopFunction.Value;
                if (!(v instanceof Function))
                    return;
                var p = this.scopFunction.getParent();
                v.call(p && p.Value, job, e);
            };
            return Todo;
        }());
        bind.Todo = Todo;
        var FnJob = (function () {
            function FnJob(fns) {
                this.fns = fns;
                if (fns.indexOf('=') == 0)
                    fns = fns.substr(1);
            }
            Object.defineProperty(FnJob.prototype, "Name", {
                get: function () { return "FnTodo"; },
                enumerable: true,
                configurable: true
            });
            FnJob.prototype.Todo = function (job, e) {
                var v = this.fn;
                if (!(v instanceof Function))
                    return;
                var scp = job.Scop;
                var p = scp.__Controller__ && scp.__Controller__.MainControll;
                v.call(p, e._old, e._new, scp, job, e);
            };
            FnJob.register = function (fn) {
                var t = basic.EvalCode.CompileExpression(fn, ["ovalue", "value", "scop", "job", "event"], function (fn, b) { stop(); }, this, true);
            };
            FnJob.fns = {};
            return FnJob;
        }());
        var events = (function () {
            function events(scop) {
                this.scop = scop;
                this.Name = "Events";
            }
            events.prototype.Todo = function (job, e) {
                throw new Error("Method not implemented.");
            };
            events.prototype.Register = function (eventType, dom, scop, controller) {
                if (!this.events)
                    this.events = {};
                var a = this.events[eventType];
                var s = { scop: scop, controller: controller, dom: dom };
                if (!a) {
                    this.events[eventType] = a = [s];
                    dom.addEventListener(eventType, this);
                }
                else
                    a.push(s);
            };
            events.prototype.handleEvent = function (e) {
                var scps = this.events[e.type];
                for (var i = 0; i < scps.length; i++) {
                    var scp = scps[i];
                    helper.TryCatch(this, this.exec, void 0, [scp, this.scop, e]);
                }
            };
            events.prototype.exec = function (dt, scopValue, e) {
                var scp = dt.scop;
                var scpv = scp.Value;
                if (typeof scpv === 'function') {
                    var p = scp.ParentValue;
                    scpv.call(p, e, dt, scopValue, this);
                }
                else if (scpv instanceof Object && scpv.handleEvent) {
                    scpv.handleEvent(e, dt, scopValue, this);
                }
            };
            return events;
        }());
        bind.events = events;
        var Filter = (function (_super) {
            __extends(Filter, _super);
            function Filter(source, bindingMode) {
                var _this_1 = _super.call(this, bindingMode) || this;
                _this_1.source = source;
                return _this_1;
            }
            Filter.prototype.Initialize = function () {
                if (this.source)
                    this.dbb = this.source.OnPropertyChanged(Scop.DPValue, this.SourceChanged, this);
                this.Value = this.Convert(this.source ? this.source.Value : null);
            };
            Filter.prototype.SourceChanged = function (p, e) {
                if ((this._bindingMode & 1) === 0)
                    return;
                if (this.isChanging)
                    return;
                this.isChanging = true;
                this.Value = this.Convert(e._new);
                this.isChanging = false;
            };
            Filter.prototype._OnValueChanged = function (e) {
                if ((this._bindingMode & 2) === 0)
                    return;
                if (this.isChanging)
                    return;
                this.isChanging = true;
                this.source.Value = this.ConvertBack(e._new);
                this.isChanging = false;
            };
            Filter.prototype.Update = function () {
                this.Value = this.Convert(this.source.Value);
            };
            Filter.prototype.UpdateBack = function () {
                this.source.Value = this.ConvertBack(this.Value);
            };
            Filter.prototype.getParent = function () { return this.source; };
            Filter.prototype.setParent = function (v) {
                if (!this.canBeParent(v))
                    return false;
                if (this.source)
                    this.source.removeEvent(Scop.DPValue, this.dbb);
                if (v)
                    this.dbb = v.OnPropertyChanged(Scop.DPValue, this.SourceChanged, this);
                this.source = v;
                this.Initialize();
                return true;
            };
            Filter.prototype.Dispose = function () {
                if (this.source)
                    this.source.removeEvent(Scop.DPValue, this.dbb);
                this.source = null;
                _super.prototype.Dispose.call(this);
            };
            return Filter;
        }(Scop));
        bind.Filter = Filter;
        var DoubleFilter = (function (_super) {
            __extends(DoubleFilter, _super);
            function DoubleFilter() {
                var _this_1 = _super !== null && _super.apply(this, arguments) || this;
                _this_1.fraction = 0.3333;
                return _this_1;
            }
            Object.defineProperty(DoubleFilter.prototype, "Fraction", {
                set: function (v) {
                    if (this.fraction === v)
                        return;
                    this.fraction = v;
                    switch (this._bindingMode) {
                        case 0:
                            return;
                        case 2:
                            this.UpdateBack();
                            return;
                        case 1:
                        case 3:
                            this.Update();
                            return;
                    }
                },
                enumerable: true,
                configurable: true
            });
            DoubleFilter.prototype.Convert = function (data) { return data / this.fraction; };
            DoubleFilter.prototype.ConvertBack = function (data) { return data * this.fraction; };
            return DoubleFilter;
        }(Filter));
        bind.DoubleFilter = DoubleFilter;
        var filters = {};
        function RegisterFilter(filter) {
            if (filters[filter.Name])
                return false;
            $defineProperty(filters, filter.Name, { value: filter, writable: false, configurable: false, enumerable: false });
            return true;
        }
        bind.RegisterFilter = RegisterFilter;
        function CreateFilter(filterName, parent, bindingMode) {
            var i = filterName.indexOf(':');
            if (i == -1)
                var p = null, name = filterName;
            else {
                name = filterName.substring(0, i);
                p = filterName.substring(i + 1);
            }
            var f = filters[name];
            if (!f)
                return parent;
            var e = f.CreateNew(parent, bindingMode & f.BindingMode, p);
            e.Initialize();
            return e;
        }
        bind.CreateFilter = CreateFilter;
        var BindingMode;
        (function (BindingMode) {
            BindingMode[BindingMode["SourceToTarget"] = 1] = "SourceToTarget";
            BindingMode[BindingMode["TwoWay"] = 3] = "TwoWay";
            BindingMode[BindingMode["TargetToSource"] = 2] = "TargetToSource";
        })(BindingMode = bind.BindingMode || (bind.BindingMode = {}));
        var TwoBind = (function () {
            function TwoBind(bindingMode, a, b, pa, pb) {
                this.bindingMode = bindingMode;
                this.a = a;
                this.b = b;
                this.pa = pa;
                this.pb = pb;
                this.dba = a.OnPropertyChanged(pa, this.pac, this);
                this.dbb = b.OnPropertyChanged(pb, this.pab, this);
                this.Dispose = this.Dispose.bind(this);
                a.OnDisposing = this.Dispose;
                b.OnDisposing = this.Dispose;
                if (bindingMode == BindingMode.TargetToSource)
                    this.initB();
                else
                    this.init();
            }
            TwoBind.prototype.init = function () {
                var va = this.a.GetValue(this.pa);
                this.b.set(this.pb, va);
            };
            TwoBind.prototype.initB = function () {
                var vb = this.b.GetValue(this.pb);
                this.a.set(this.pa, vb);
            };
            TwoBind.prototype.pac = function (p, e) {
                if ((this.bindingMode & 1) == 0)
                    return;
                if (this.IsChanging)
                    return;
                this.IsChanging = true;
                this.b.set(this.pb, e._new);
                this.IsChanging = false;
            };
            TwoBind.prototype.pab = function (p, e) {
                if ((this.bindingMode & 2) == 0)
                    return;
                if (this.IsChanging)
                    return;
                this.IsChanging = true;
                this.a.set(this.pa, e._new);
                this.IsChanging = false;
            };
            TwoBind.prototype.Dispose = function () {
                if (this.disposed)
                    return;
                this.disposed = true;
                this.a.OffDisposing = this.Dispose;
                this.b.OffDisposing = this.Dispose;
                this.disposed = null;
                this.a.removeEvent(this.pa, this.dba);
                this.b.removeEvent(this.pb, this.dbb);
                this.a = null;
                this.b = null;
                this.dba = null;
                this.dbb = null;
                this.pa = null;
                this.pb = null;
            };
            return TwoBind;
        }());
        bind.TwoBind = TwoBind;
        var TwoDBind = (function () {
            function TwoDBind(bindingMode, a, b, pa, pb, con, conBack) {
                this.bindingMode = bindingMode;
                this.a = a;
                this.b = b;
                this.pa = pa;
                this.pb = pb;
                this.con = con;
                this.conBack = conBack;
                this.dba = a.OnPropertyChanged(pa, this.pac, this);
                this.dbb = b.OnPropertyChanged(pb, this.pab, this);
                this.Dispose = this.Dispose.bind(this);
                a.OnDisposing = this.Dispose;
                b.OnDisposing = this.Dispose;
                if (bindingMode == 2)
                    this.initB();
                else
                    this.init();
            }
            TwoDBind.prototype.pac = function (p, e) {
                if ((this.bindingMode & 1) == 0)
                    return;
                if (this.IsChanging)
                    return;
                this.IsChanging = true;
                this.b.set(this.pb, this.con ? this.con(e._new) : e._new);
                this.IsChanging = false;
            };
            TwoDBind.prototype.pab = function (p, e) {
                if ((this.bindingMode & 2) == 0)
                    return;
                if (this.IsChanging)
                    return;
                this.IsChanging = true;
                this.a.set(this.pa, this.conBack ? this.conBack(e._new) : e._new);
                this.IsChanging = false;
            };
            TwoDBind.prototype.init = function () {
                var va = this.a.GetValue(this.pa);
                this.b.set(this.pb, this.con ? this.con(va) : va);
            };
            TwoDBind.prototype.initB = function () {
                var vb = this.b.GetValue(this.pb);
                this.a.set(this.pa, this.con ? this.conBack(vb) : vb);
            };
            TwoDBind.prototype.Dispose = function () {
                if (this.disposed)
                    return;
                this.disposed = true;
                this.a.OffDisposing = this.Dispose;
                this.b.OffDisposing = this.Dispose;
                this.disposed = null;
                this.a.removeEvent(this.pa, this.dba);
                this.b.removeEvent(this.pb, this.dbb);
                this.a = null;
                this.b = null;
                this.dba = null;
                this.dbb = null;
                this.pa = null;
                this.pb = null;
            };
            return TwoDBind;
        }());
        bind.TwoDBind = TwoDBind;
    })(bind = exports.bind || (exports.bind = {}));
    var Processor;
    (function (Processor) {
        var debug = (function () {
            function debug() {
            }
            debug.OnAttribute = function (name, value) {
                this.lst.push({ check: function (p) { return p.instance.attribute == name && p.value == value; } });
            };
            debug.check = function (p) {
                for (var _i = 0, _a = this.lst; _i < _a.length; _i++) {
                    var i = _a[_i];
                    if (i.check(p))
                        debugger;
                }
            };
            debug.lst = [];
            return debug;
        }());
        Processor.debug = debug;
        var Stat;
        (function (Stat) {
            Stat[Stat["None"] = 0] = "None";
            Stat[Stat["Waitting"] = 1] = "Waitting";
            Stat[Stat["Executing"] = 2] = "Executing";
            Stat[Stat["Executed"] = 3] = "Executed";
        })(Stat = Processor.Stat || (Processor.Stat = {}));
        var Manager = (function () {
            function Manager(dom) {
                this.enumerator = [];
                this.events = {};
                var a = dom.attributes;
                if (dom instanceof HTMLElement) {
                    if (Manager._components[dom.tagName])
                        this.enumerator.push(this.ComponentCreator = {
                            instance: Manager._components[dom.tagName], manager: this, stat: Stat.Waitting, value: dom
                        });
                }
                for (var i = 0; i < a.length; i++) {
                    var n = a[i].name;
                    if (n.indexOf('on-') === 0) {
                        this.events[n.substr(3)] = a[i].value;
                    }
                    if (!Manager._processors.hasOwnProperty(n))
                        continue;
                    var p = Manager.getPrcessorByAttribute(n);
                    if (n.indexOf('db-') === 0) {
                        if (p) {
                            this.enumerator.push({ manager: this, instance: p, value: p.valueParser ? p.valueParser(a[i].value) : a[i].value, stat: Stat.Waitting });
                        }
                        else
                            throw new Error('the processor ' + n + ' is not defined');
                    }
                    else {
                        p && this.enumerator.push({ instance: p, value: p.valueParser ? p.valueParser(a[i].value) : a[i].value, manager: this, stat: Stat.Waitting });
                    }
                }
                this.enumerator = this.enumerator.sort(Manager.orderInstances);
            }
            Manager.getPrcessorByName = function (name) {
                for (var i in this._processors) {
                    if (this._processors[i].name == name)
                        return this._processors[i];
                }
                return undefined;
            };
            Manager.getPrcessorByAttribute = function (name) {
                return this._processors[name];
            };
            Manager.stringIsNullOrWhiteSpace = function (s) {
                return !(s && s.trim());
            };
            Manager.registerComponent = function (p) {
                if (this.stringIsNullOrWhiteSpace(p.name))
                    throw new Error("attribute value is null");
                if (p.check && typeof p.check != 'function')
                    throw new Error("check property is not function");
                if (typeof p.execute !== "function")
                    throw new Error("create property is not function");
                if (this._components[p.name])
                    console.warn("The component " + p.name + " was overrided");
                p.name = p.name.toUpperCase();
                p.isPrimitive = true;
                p.isFinalizer = false;
                p.priority = Number.POSITIVE_INFINITY;
                this._components[p.name] = p;
            };
            Manager.register = function (p) {
                if (this.stringIsNullOrWhiteSpace(p.attribute))
                    throw new Error("attribute value is null");
                if (p.check && typeof p.check != 'function')
                    throw new Error("check value is not function");
                if (this.stringIsNullOrWhiteSpace(p.name))
                    p.name = p.attribute;
                p.attribute = p.attribute.toLowerCase();
                p.name = p.name.toLowerCase();
                if (!p.priority)
                    p.priority = ++this.maxPriority;
                if (this.maxPriority < p.priority)
                    this.maxPriority = p.priority;
                if (this._processors[p.attribute])
                    throw 'processor ' + p.attribute + ' cannot be re-define ';
                p.isPrimitive = !!p.isPrimitive;
                p.isFinalizer = !!p.isFinalizer;
                if (p.isFinalizer === p.isPrimitive && p.isFinalizer === true)
                    throw new Error("invalid arguments isPremitive && isFinalizer set to true");
                this._processors[p.attribute] = p;
                this.enumerator.push(p);
                this.enumerator.sort(this.orderDefs);
            };
            Manager.orderDefs = function (a, b) {
                if (!!a.isPrimitive == !!b.isPrimitive)
                    return a.priority - b.priority;
                else if (a.isPrimitive)
                    return -1;
                else if (a.isFinalizer)
                    return 1;
            };
            Manager.orderInstances = function (a, b) {
                return Manager.orderDefs(a.instance, b.instance);
            };
            Manager.prototype.getProcessorByAttribute = function (processor) {
                for (var _i = 0, _a = this.enumerator; _i < _a.length; _i++) {
                    var i = _a[_i];
                    if (i.instance.attribute == processor)
                        return i;
                }
                return undefined;
            };
            Manager._components = {};
            Manager._processors = {};
            Manager.enumerator = [];
            Manager.maxPriority = 0;
            return Manager;
        }());
        Processor.Manager = Manager;
        var Tree = (function () {
            function Tree(e, parent, controller) {
                this.e = e;
                this.parent = parent;
                this.controller = controller;
            }
            Object.defineProperty(Tree.prototype, "Scop", {
                get: function () { return this.e.Scop || (this.parent && this.parent.Scop) || (this.controller.Scop); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tree.prototype, "Control", {
                get: function () { return this.e.Control || (this.parent && this.parent.Control) || this.controller.CurrentControl; },
                enumerable: true,
                configurable: true
            });
            ;
            Object.defineProperty(Tree.prototype, "Dom", {
                get: function () { return this.e.dom; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tree.prototype, "IsNew", {
                get: function () {
                    if (this.parent)
                        return this.e.Scop != this.parent.Scop || this.e.Control != this.parent.Control || this.e.Jobs.length != 0;
                    else
                        return this.e.Scop != null || this.e.Jobs.length != 0;
                },
                enumerable: true,
                configurable: true
            });
            Tree.prototype.validateE = function () {
                if (this.IsNew) {
                    this.e.Scop = this.Scop;
                }
            };
            Tree.New = function (dom, parent, controller) {
                return new Tree({ dom: dom, Scop: null, Control: null, IsNew: false, Jobs: [] }, parent, controller);
            };
            Tree.Root = function (dom, Scop, Control, controller) {
                return new Tree({ dom: dom, Scop: Scop, Control: Control, IsNew: false, Jobs: [] }, null, controller || Control.__Controller__);
            };
            Tree.prototype.New = function (dom) {
                return new Tree({ dom: dom, Scop: null, Control: null, IsNew: false, Jobs: [] }, this, this.controller);
            };
            Object.defineProperty(Tree.prototype, "Depth", {
                get: function () {
                    return this.parent ? this.parent.Depth + 1 : 1;
                },
                enumerable: true,
                configurable: true
            });
            return Tree;
        }());
        Processor.Tree = Tree;
        var MyClass = (function () {
            function MyClass() {
            }
            MyClass.ParseBinding = function (data) {
                var instance = Processor.Compiler.Compile(data);
                data.e = instance;
                var cnt = instance.Control;
                if (instance.Jobs.length !== 0 || instance.IsNew)
                    data.controller.instances.push(instance);
                if (!instance.Control)
                    MyClass.ExploreTree(data);
                return instance;
            };
            MyClass.ExploreTree = function (data) {
                var dom = data.Dom;
                for (var i = 0; i < dom.childElementCount; i++) {
                    var el = dom.children.item(i);
                    if (el.hasAttribute('controlled'))
                        continue;
                    this.ParseBinding(data.New(el));
                }
            };
            return MyClass;
        }());
        Processor.MyClass = MyClass;
        function register(p) {
            Manager.register(p);
        }
        Processor.register = register;
        var Compiler = (function () {
            function Compiler() {
            }
            Compiler.initEvents = function (xx, m) {
                var e = xx.e, parentScop = xx.parent.Scop, controller = xx.controller;
                if (!m.events)
                    return;
                var x;
                for (var i in m.events) {
                    if (!x)
                        x = new bind.events(xx.Scop);
                    var v = m.events[i];
                    if (v.indexOf('.') == 0)
                        parentScop = xx.Scop, v = v.substring(1);
                    x.Register(i, e.dom, bind.Scop.Create(v, parentScop, 0, controller), controller);
                }
                return x;
            };
            Compiler.Compile = function (x) {
                var dom = x.e.dom;
                if (dom.hasAttribute('compiled'))
                    return x.e;
                dom.setAttribute('compiled', '');
                var e = x.e;
                var m = new Manager(dom);
                if (dom.hasAttribute('debugger'))
                    debugger;
                for (var _i = 0, _a = m.enumerator; _i < _a.length; _i++) {
                    var i = _a[_i];
                    if (!i.instance.check || i.instance.check(x, i)) {
                        var r = i.instance.execute(x, i);
                        if (r) {
                            if (r.e)
                                e = r.e;
                            if (r.Break)
                                break;
                        }
                    }
                }
                Compiler.initEvents(x, m);
                x.e.IsNew = x.Scop != x.parent.Scop || x.Control != x.parent.Control;
                x.validateE();
                if (!x.e.Scop)
                    x.e.Scop = x.parent.Scop || x.controller.Scop;
                if (!e)
                    stop();
                return e;
            };
            return Compiler;
        }());
        Processor.Compiler = Compiler;
        function Register(p) {
            return Processor.Manager.register(p);
        }
        Processor.Register = Register;
        function Compile(x) {
            return Compiler.Compile(x);
        }
        Processor.Compile = Compile;
    })(Processor = exports.Processor || (exports.Processor = {}));
    bind.RegisterFilter({
        Name: '2bl', BindingMode: 3, CreateNew: function (s, b, p) {
            var e = new bind.DoubleFilter(s, b);
            if (p)
                e.Fraction = parseFloat(p);
            return e;
        }
    });
    var ScopicControl;
    (function (ScopicControl) {
        var _stor = {};
        function register(name, creator) {
            _stor[name] = creator;
        }
        ScopicControl.register = register;
        function create(e) {
            var c = _stor[e.name];
            if (c)
                return c(e);
        }
        ScopicControl.create = create;
    })(ScopicControl = exports.ScopicControl || (exports.ScopicControl = {}));
    var ScopicCommand;
    (function (ScopicCommand) {
        var store = {};
        var i = 0;
        function Register(callback, param, name) {
            var n = name ? name : '@' + ++i;
            store[n] = {
                callback: callback, Param: param
            };
            return n;
        }
        ScopicCommand.Register = Register;
        function Call(n, dom, scop) {
            var cb = store[n];
            return cb ? cb.callback.Invoke.call(cb.callback.Owner, n, dom, scop, cb.Param) : void 0;
        }
        ScopicCommand.Call = Call;
        function Delete(n) {
            delete store[n];
        }
        ScopicCommand.Delete = Delete;
        function contains(n) {
            return store[n] != null;
        }
        ScopicCommand.contains = contains;
    })(ScopicCommand = exports.ScopicCommand || (exports.ScopicCommand = {}));
    var Api;
    (function (Api) {
        var $freeze = Object.freeze;
        var _apis = {};
        function RegisterApiCallback(api) {
            if (typeof api.Name !== 'string')
                return false;
            if (api.DoApiCallback instanceof Function === false)
                return false;
            var c = _apis[api.Name];
            if (c == null) {
                c = { Callback: [api], Trigger: undefined };
                $defineProperty(_apis, api.Name, { value: c, configurable: false, enumerable: false, writable: false });
            }
            else {
                if (c.Callback.indexOf(api) !== -1)
                    return;
                c.Callback.push(api);
            }
            $freeze(api);
        }
        Api.RegisterApiCallback = RegisterApiCallback;
        function RegisterTrigger(api) {
            if (typeof api.Name !== 'string')
                return false;
            if (api.Filter && !(api.Filter instanceof Function))
                return false;
            var c = _apis[api.Name];
            if (c == null) {
                c = { Callback: [], Trigger: api };
                _apis[api.Name] = c;
                $freeze(c);
            }
            else if (c.Trigger == null) {
                c.Trigger = api;
                $freeze(c);
            }
            else
                throw "This Command Exist";
            $freeze(api);
        }
        Api.RegisterTrigger = RegisterTrigger;
        function RiseApi(apiName, params) {
            var api = _apis[apiName];
            if (!api)
                throw "Cmd Is Not Exist";
            var t = api.Trigger;
            if (t) {
                if (t.CheckAccess)
                    if (!t.CheckAccess(t))
                        throw "Access denied";
                var f = t.Filter;
            }
            var cs = api.Callback;
            for (var i = 0, l = cs.length; i < l; i++) {
                var c = cs[i];
                if (f && !t.Filter(c, params))
                    continue;
                helper.TryCatch(c, c.DoApiCallback, void 0, [t, c, params]);
            }
        }
        Api.RiseApi = RiseApi;
    })(Api = exports.Api || (exports.Api = {}));
    var encoding;
    (function (encoding) {
        function error(e) {
            try {
                return e.parser ? e.parser(e.e) : e.e.value;
            }
            catch (e) {
                return e.e.value;
            }
        }
        var BPath = (function () {
            function BPath(Owner, Property) {
                this.Owner = Owner;
                this.Property = Property;
            }
            BPath.prototype.Set = function (value) {
                this.Owner.set(this.Property, value);
                this.executed = true;
                return value;
            };
            return BPath;
        }());
        encoding.BPath = BPath;
        var Path = (function () {
            function Path(Owner, Property) {
                this.Owner = Owner;
                this.Property = Property;
            }
            Path.prototype.Set = function (value) {
                if (this.Property instanceof bind.DProperty)
                    this.Owner.set(this.Property, value);
                else
                    this.Owner[this.Property] = value;
                this.executed = true;
                return value;
            };
            return Path;
        }());
        encoding.Path = Path;
        var LPath = (function () {
            function LPath(Owner, Property) {
                this.Owner = Owner;
                this.Property = Property;
            }
            LPath.prototype.Set = function (value) {
                if (!this.Owner.Insert(this.Property, value))
                    this.Owner.Add(value);
                this.executed = true;
                return value;
            };
            return LPath;
        }());
        encoding.LPath = LPath;
        var _sstore = new collection.Dictionary("SerializationContext", false);
        var SerializationContext = (function () {
            function SerializationContext(isDefault) {
                this._ext = [];
                this.indexer = new collection.Dictionary("Indexer", true);
                this.refs = [];
                this.cnt = 0;
                if (isDefault)
                    this._store = _sstore;
                else
                    this._store = new collection.Dictionary("SerializationContext", false);
            }
            SerializationContext.prototype.Dispose = function () {
                this.reset();
                this._ext = null;
                this._store = null;
                this.cnt = null;
                this.indexer = null;
                this.refs = null;
            };
            SerializationContext.prototype.Register = function (type, ser) {
                this._store.Set(type, ser);
            };
            SerializationContext.prototype.UnRegister = function (type) {
                return this._store.Remove(type);
            };
            SerializationContext.prototype.GetRegistration = function (type) {
                return this._store.Get(type);
            };
            SerializationContext.prototype.Append = function (con) {
                this._ext.push(con);
            };
            SerializationContext.prototype.Get = function (type) {
                var v = this._store.Get(type);
                if (v)
                    return v;
                var c = this._ext;
                for (var i = c.length - 1; i >= 0; i--)
                    if ((v = c[i].Get(type)) != null)
                        return v;
                return null;
            };
            SerializationContext.prototype.get = function (ref, path) {
                var dref = this.refs[ref];
                if (dref) {
                    if (dref.setted)
                        return path ? path.Set(this.refs[ref].val) : this.refs[ref].val;
                    else if (path) {
                        if (!dref.paths)
                            dref.paths = [path];
                        else
                            dref.paths.push(path);
                    }
                    else
                        throw "entry Point not Found";
                }
                else {
                    var i = { val: undefined, paths: [path] };
                    this.refs[ref] = i;
                }
                return undefined;
            };
            SerializationContext.prototype.set = function (ref, obj) {
                var x = this.refs[ref];
                if (x) {
                    x.val = obj;
                    x.setted = true;
                    if (x.paths)
                        for (var i = 0; i < x.paths.length; i++)
                            x.paths[i].Set(obj);
                }
                else
                    this.refs[ref] = { val: obj, setted: true };
            };
            SerializationContext.prototype.getJson = function (obj) {
                var l = this.indexer.Get(obj);
                if (l == null) {
                    var ref = { __ref__: ++this.cnt };
                    var json = { '@ref': ref };
                    this.indexer.Set(obj, l = { ref: ref, json: json, valid: false });
                    if (obj instanceof bind.DObject) {
                        var type = context_3.context.NameOf(obj.constructor);
                        if (type != null)
                            json['__type__'] = type;
                    }
                }
                return l;
            };
            SerializationContext.prototype.reset = function () {
                this.indexer.Clear();
                this.cnt = 0;
                this.refs.length = 0;
                return this;
            };
            SerializationContext.getType = function (type) {
                while (true) {
                    if (type instanceof reflection.DelayedType)
                        type = type.Type;
                    else if (type instanceof reflection.GenericType)
                        type = type.Constructor;
                    else
                        return type;
                }
            };
            SerializationContext.prototype.FromJson = function (json, type, path) {
                if (json == null)
                    return path ? path.Set(json) : json;
                if (type instanceof reflection.DelayedType)
                    type = type.Type;
                if (type instanceof reflection.GenericType)
                    type = type.Constructor;
                if (type === String || type === Number || type === Boolean)
                    return path ? path.Set(json) : json;
                else if (type === Date) {
                    if (typeof json === 'string')
                        return path.Set(new Date(Date.parse(json)));
                    return path.Set(new Date(json));
                }
                if (typeof json.__ref__ == 'number')
                    return this.get(json.__ref__, path);
                var obj;
                var ref = json['@ref'];
                delete json['@ref'];
                if (reflection.IsInstanceOf(type, bind.DObject)) {
                    if (type.CreateFromJson)
                        obj = type.CreateFromJson(json, type, this.RequireNew ? this.RequireNew(json, type) : false);
                    if (obj == null)
                        obj = new type();
                    if (ref)
                        this.set(ref.__ref__, obj);
                    obj = obj.FromJson(json, this);
                }
                else {
                    if (type.prototype != null && type.prototype.hasOwnProperty('fromJson'))
                        obj = type.prototype.fromJson(json, context_3.context, ref);
                    else {
                        var c = this.Get(type);
                        obj = c != null ? c.FromJson(json, this, ref) : json;
                    }
                    if (ref)
                        this.set(ref.__ref__, obj);
                }
                return path ? path.Set(obj) : obj;
            };
            SerializationContext.prototype.ToJson = function (obj) {
                if (obj === null)
                    return null;
                switch (typeof obj) {
                    case 'undefined':
                    case 'boolean':
                    case 'number':
                    case 'string':
                        return obj;
                    case 'function':
                        return obj.toString();
                    default:
                        var ref_json = this.getJson(obj);
                        if (ref_json.valid)
                            return ref_json.ref;
                        if (obj === Object)
                            return this._toJson(obj, ref_json);
                        else if (obj instanceof bind.DObject)
                            return obj.ToJson(this, ref_json);
                        else {
                            var c = this.Get(obj.constructor);
                            if (c) {
                                return c.ToJson(obj, this, ref_json);
                            }
                            else
                                return this._toJson(obj, ref_json);
                        }
                }
            };
            SerializationContext.prototype._toJson = function (obj, ret) {
                ret.valid = true;
                if (obj instanceof Array)
                    return this._arrayToJson(obj, ret);
                ret.json = {};
                for (var i in obj)
                    ret.json[i] = this.ToJson(obj[i]);
                return ret.json;
            };
            SerializationContext.prototype.toString = function () {
                JSON.stringify(this);
            };
            SerializationContext.prototype._arrayToJson = function (arr, ret) {
                var lst = [];
                var json = { "__type__": NativeTypes.Array, "__value__": lst, "@ref": ret.ref.__ref__ };
                for (var i = 0; i < arr.length; i++)
                    lst[i] = this.ToJson(arr[i]);
                return json;
            };
            SerializationContext.GlobalContext = new SerializationContext(true);
            return SerializationContext;
        }());
        encoding.SerializationContext = SerializationContext;
        var CSV = (function () {
            function CSV(input, autoParse, asJson) {
                this.input = input;
                this.autoParse = autoParse;
                this.asJson = asJson;
                this.e = {
                    csv: this, index: -1, value: void 0, set: function (value, index) { this.value = value; this.index = index; return this; }
                };
                this.Columns = new Array();
                this._current = void 0;
                this._cursor = CSV.readLine(input, void 0, { cols: this.Columns, csv: this, e: this.e, parser: function (v) { return v.value; } });
                Object.defineProperty(this, '_startCursor', { value: this._cursor, configurable: false, writable: false, enumerable: false });
                this._current = asJson ? {} : new Array(this.Columns.length);
            }
            CSV.ReadAllLines = function (s) {
                var t = [];
                var pi = 0;
                var inq = false;
                for (var i = 0; i < s.length; i++) {
                    var c = s[i];
                    if (c == '\\') {
                        i++;
                        continue;
                    }
                    if (c == '"' && s[i - 1] !== '\\')
                        inq = !inq;
                    if (inq)
                        continue;
                    if (c == '\r') {
                        t.push(s.substr(pi, i - pi));
                        if (s[i + 1] == '\n')
                            i++;
                        pi = i + 1;
                    }
                }
                return t;
            };
            CSV.prototype.parse = function (pind, s) {
            };
            CSV.isEmptyLine = function (s, pchar) {
                if (!pchar)
                    pchar = { cursor: 0, value: void 0 };
                else if (pchar.EOF)
                    return true;
                var c = pchar.cursor || 0;
                var cchar = s[c];
                var r = s[c + 1];
                if (r == '\r') {
                    var n = s[c + 2];
                    if (n == '\n')
                        var nchar = { cursor: c + 3, EOF: s[c + 3] == null, len: 2, newLine: true, value: '\r\n' };
                    else
                        nchar = { cursor: c + 2, EOF: n == void 0, len: 1, newLine: true, value: '\r' };
                }
                else
                    nchar = { cursor: c + 1, EOF: r == void 0, len: 0, newLine: false, value: '' };
                if (nchar.EOF)
                    return true;
                if (nchar.newLine && pchar.newLine)
                    return true;
                return false;
            };
            CSV.trim = function (s, pchar) {
                if (!pchar)
                    pchar = { cursor: 0, value: void 0 };
                else if (pchar.EOF)
                    return pchar;
                var c = pchar.cursor || 0;
                var cchar = s[c];
                var r = s[c + 1];
                if (r == '\r') {
                    var n = s[c + 2];
                    if (n == '\n')
                        var nchar = { cursor: c + 3, EOF: s[c + 3] == null, len: 2, newLine: true, value: '\r\n' };
                    else
                        nchar = { cursor: c + 2, EOF: n == void 0, len: 1, newLine: true, value: '\r' };
                }
                else if (r == void 0) {
                    nchar = { cursor: c + 1, EOF: true, len: 0, newLine: void 0, value: void 0 };
                }
                else
                    return pchar;
                return nchar;
            };
            CSV.nextChar = function (s, pchar) {
                if (!pchar)
                    pchar = { cursor: 0, value: void 0 };
                else if (pchar.EOF)
                    return pchar;
                var start = pchar.cursor;
                var i = start;
                var lc;
                while (i < s.length) {
                    lc = c;
                    var c = s[i++];
                    if (c === this.separator)
                        return { value: c, cursor: i };
                    if (c === '"') {
                        if (lc !== '\\')
                            return { value: '"', cursor: i - 1 };
                    }
                    else if (c === '\r') {
                        var hasn = s[i] === '\n';
                        if (hasn)
                            i++;
                        return { value: hasn ? '\r\n' : c, cursor: i, newLine: true, len: hasn ? 2 : 1 };
                    }
                }
                return { value: void 0, cursor: s.length, EOF: true };
            };
            CSV.readString = function (s, stat) {
                var start = stat.cursor;
                var i = start;
                var lc = s[i];
                if (lc !== '"')
                    return null;
                while (++i < s.length) {
                    if (s[i] == '"' && lc !== '\\')
                        return { value: s.substring(stat.cursor, i + 1), cursor: i + 1, EOF: i == s.length - 1 };
                    else
                        lc = s[i];
                }
                return { value: s.substring(start), cursor: s.length, EOF: true };
            };
            CSV.readColumn = function (s, cursor) {
                if (!cursor)
                    cursor = { cursor: 0, value: void 0 };
                else if (cursor.EOF)
                    return void 0;
                var i = cursor;
                while (true) {
                    var nchar = this.nextChar(s, i);
                    if (nchar.value === this.separator)
                        return { value: s.substring(cursor.cursor, nchar.cursor - 1), EOF: false, cursor: nchar };
                    else if (nchar.EOF) {
                        return { value: s.substr(cursor.cursor), EOF: true, cursor: nchar };
                    }
                    else if (nchar.newLine)
                        return { value: s.substring(cursor.cursor, nchar.cursor - nchar.len), EOF: false, cursor: nchar };
                    else if (nchar.value === '"') {
                        var t = this.readString(s, nchar);
                        i = t;
                    }
                }
            };
            CSV.clear = function (arr, start) {
                for (; start < arr.length; start++)
                    arr[start] = void 0;
                return arr;
            };
            CSV.fillColumns = function (s, stat, e) {
                if (!e.e) {
                    e.e = {
                        csv: void 0,
                        set: function (v, i) { this.value = v; this.index = i; return this; }
                    };
                }
                ;
                var cols = e.cols;
                var header = e.header;
                var isarr = cols instanceof Array;
                if (stat && stat.EOF) {
                    if (isarr)
                        this.clear(cols, 0);
                    return stat;
                }
                var i = 0;
                var cursor = stat;
                do {
                    var p = this.readColumn(s, cursor);
                    if (!p) {
                        if (isarr)
                            this.clear(cols, i);
                        return { EOF: true, cursor: s.length, value: void 0 };
                    }
                    cursor = p.cursor;
                    e.e.set(p.value, i);
                    var v = error(e);
                    if (isarr)
                        cols[i] = v;
                    else if (header[i])
                        cols[header[i]] = v;
                    i++;
                } while (!cursor.EOF && i < (isarr ? cols : header).length && !cursor.newLine);
                if (!cursor.EOF && !p.cursor.newLine)
                    while (cursor && !cursor.EOF && !cursor.newLine)
                        p = this.readColumn(s, cursor), cursor = p && p.cursor;
                if (isarr)
                    this.clear(cols, i);
                return cursor;
            };
            CSV.readLine = function (s, stat, e) {
                if (!e.e) {
                    e.e = {
                        csv: void 0,
                        set: function (v, i) { this.value = v; this.index = i; return this; }
                    };
                }
                ;
                var cols = e.cols;
                var header = e.header;
                var isarr = cols instanceof Array;
                if (isarr)
                    cols.length = 0;
                if (stat && stat.EOF)
                    return stat;
                var cursor = stat;
                var i = 0;
                do {
                    var p = this.readColumn(s, cursor);
                    if (!p)
                        return { EOF: true, cursor: s.length, value: void 0 };
                    cursor = p.cursor;
                    e.e.set(p.value, i);
                    var v = error(e);
                    if (isarr)
                        cols.push(v);
                    else if (header[i])
                        cols[header[i]] = v;
                    i++;
                } while (!p.EOF && !p.cursor.newLine);
                return cursor;
            };
            CSV.prototype.ColumnName = function (index) {
                return this.Columns[index] || "";
            };
            CSV.prototype.ColumnIndex = function (name) { return this.Columns.indexOf(name); };
            Object.defineProperty(CSV.prototype, "Cursor", {
                get: function () { return this._cursor; },
                enumerable: true,
                configurable: true
            });
            CSV.prototype.Reset = function () { this._cursor = this._startCursor; return this; };
            CSV.prototype.Next = function (e) {
                if (this._cursor.EOF)
                    return false;
                if (!this.AllowNullValue)
                    while (true) {
                        var x = CSV.trim(this.input, this._cursor);
                        if (x === this._cursor)
                            break;
                        if (x.EOF)
                            return false;
                        if (x.newLine) {
                            this._cursor = x;
                            continue;
                        }
                        else
                            break;
                    }
                this._cursor = CSV.fillColumns(this.input, this._cursor, this.swapArgs(e));
                return true;
            };
            CSV.prototype.swapArgs = function (e) {
                if (!e)
                    return {
                        cols: this._current,
                        parser: this.autoParse ? this.jsonParser : void 0,
                        header: this.Columns || [],
                        csv: this, e: this.e
                    };
                if (!e.cols)
                    e.cols = this._current;
                if (!e.header)
                    e.header = this.Columns || [];
                if (!e.csv)
                    e.csv = this;
                if (!e.e)
                    e.e = this.e;
                return e;
            };
            CSV.prototype.jsonParser = function (e) { return !e.value ? void 0 : JSON.parse(e.value); };
            Object.defineProperty(CSV.prototype, "Current", {
                get: function () { return this._current; },
                enumerable: true,
                configurable: true
            });
            CSV.prototype.Field = function (name_index) {
                var c = this.Current;
                return c ? this.Current[typeof name_index === 'string' ? this.Columns.indexOf(name_index) : name_index] : null;
            };
            CSV.separator = ';';
            CSV.emptyArray = Object.freeze([]);
            return CSV;
        }());
        encoding.CSV = CSV;
        var NativeTypes;
        (function (NativeTypes) {
            NativeTypes[NativeTypes["Nullable"] = 0] = "Nullable";
            NativeTypes[NativeTypes["Boolean"] = 1] = "Boolean";
            NativeTypes[NativeTypes["Number"] = 2] = "Number";
            NativeTypes[NativeTypes["String"] = 3] = "String";
            NativeTypes[NativeTypes["Function"] = 4] = "Function";
            NativeTypes[NativeTypes["Array"] = 5] = "Array";
            NativeTypes[NativeTypes["Object"] = 6] = "Object";
            NativeTypes[NativeTypes["DObject"] = 7] = "DObject";
        })(NativeTypes = encoding.NativeTypes || (encoding.NativeTypes = {}));
        window['GC'] = function () { return encoding.SerializationContext.GlobalContext; };
        var UTF8 = (function () {
            function UTF8() {
            }
            UTF8.ToArray = function (str, outU8Array, outIdx, maxBytesToWrite) {
                if (!(maxBytesToWrite > 0))
                    return 0;
                var startIdx = outIdx;
                var endIdx = outIdx + maxBytesToWrite - 1;
                for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 0xD800 && u <= 0xDFFF)
                        u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
                    if (u <= 0x7F) {
                        if (outIdx >= endIdx)
                            break;
                        outU8Array[outIdx++] = u;
                    }
                    else if (u <= 0x7FF) {
                        if (outIdx + 1 >= endIdx)
                            break;
                        outU8Array[outIdx++] = 0xC0 | (u >> 6);
                        outU8Array[outIdx++] = 0x80 | (u & 63);
                    }
                    else if (u <= 0xFFFF) {
                        if (outIdx + 2 >= endIdx)
                            break;
                        outU8Array[outIdx++] = 0xE0 | (u >> 12);
                        outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                        outU8Array[outIdx++] = 0x80 | (u & 63);
                    }
                    else if (u <= 0x1FFFFF) {
                        if (outIdx + 3 >= endIdx)
                            break;
                        outU8Array[outIdx++] = 0xF0 | (u >> 18);
                        outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                        outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                        outU8Array[outIdx++] = 0x80 | (u & 63);
                    }
                    else if (u <= 0x3FFFFFF) {
                        if (outIdx + 4 >= endIdx)
                            break;
                        outU8Array[outIdx++] = 0xF8 | (u >> 24);
                        outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
                        outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                        outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                        outU8Array[outIdx++] = 0x80 | (u & 63);
                    }
                    else {
                        if (outIdx + 5 >= endIdx)
                            break;
                        outU8Array[outIdx++] = 0xFC | (u >> 30);
                        outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
                        outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
                        outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                        outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                        outU8Array[outIdx++] = 0x80 | (u & 63);
                    }
                }
                outU8Array[outIdx] = 0;
                return outIdx - startIdx;
            };
            UTF8.lengthOf = function (str) {
                var len = 0;
                for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 0xD800 && u <= 0xDFFF)
                        u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
                    if (u <= 0x7F) {
                        ++len;
                    }
                    else if (u <= 0x7FF) {
                        len += 2;
                    }
                    else if (u <= 0xFFFF) {
                        len += 3;
                    }
                    else if (u <= 0x1FFFFF) {
                        len += 4;
                    }
                    else if (u <= 0x3FFFFFF) {
                        len += 5;
                    }
                    else {
                        len += 6;
                    }
                }
                return len;
            };
            UTF8.ToString = function (u8Array, idx) {
                var endPtr = idx;
                while (u8Array[endPtr])
                    ++endPtr;
                if (endPtr - idx > 16 && u8Array.subarray && UTF8.UTF8Decoder) {
                    return UTF8.UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
                }
                else {
                    var u0, u1, u2, u3, u4, u5;
                    var str = '';
                    while (1) {
                        u0 = u8Array[idx++];
                        if (!u0)
                            return str;
                        if (!(u0 & 0x80)) {
                            str += String.fromCharCode(u0);
                            continue;
                        }
                        u1 = u8Array[idx++] & 63;
                        if ((u0 & 0xE0) == 0xC0) {
                            str += String.fromCharCode(((u0 & 31) << 6) | u1);
                            continue;
                        }
                        u2 = u8Array[idx++] & 63;
                        if ((u0 & 0xF0) == 0xE0) {
                            u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
                        }
                        else {
                            u3 = u8Array[idx++] & 63;
                            if ((u0 & 0xF8) == 0xF0) {
                                u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
                            }
                            else {
                                u4 = u8Array[idx++] & 63;
                                if ((u0 & 0xFC) == 0xF8) {
                                    u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
                                }
                                else {
                                    u5 = u8Array[idx++] & 63;
                                    u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
                                }
                            }
                        }
                        if (u0 < 0x10000) {
                            str += String.fromCharCode(u0);
                        }
                        else {
                            var ch = u0 - 0x10000;
                            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
                        }
                    }
                }
            };
            UTF8.GetBytes = function (str) {
                var l = this.lengthOf(str) + 1;
                var buffer = new Array(l);
                this.ToArray(str, buffer, 0, l);
                return buffer;
            };
            UTF8.UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
            return UTF8;
        }());
        encoding.UTF8 = UTF8;
        var UTF16 = (function () {
            function UTF16() {
            }
            UTF16.ToString = function (HEAP16, ptr) {
                console.assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
                var endPtr = ptr;
                var idx = endPtr >> 1;
                while (HEAP16[idx])
                    ++idx;
                endPtr = idx << 1;
                if (endPtr - ptr > 32 && UTF16.UTF16Decoder) {
                    return UTF16.UTF16Decoder.decode(new Uint8Array(HEAP16, ptr, endPtr - ptr + 1));
                }
                else {
                    var i = 0;
                    var str = '';
                    while (1) {
                        var codeUnit = HEAP16[(((ptr) + (i * 2)) >> 1)];
                        if (codeUnit == 0)
                            return str;
                        ++i;
                        str += String.fromCharCode(codeUnit);
                    }
                }
            };
            UTF16.ToArray = function (str, HEAP16, outPtr, maxBytesToWrite) {
                console.assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
                console.assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
                if (maxBytesToWrite === undefined) {
                    maxBytesToWrite = 0x7FFFFFFF;
                }
                if (maxBytesToWrite < 2)
                    return 0;
                maxBytesToWrite -= 2;
                var startPtr = outPtr;
                var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;
                for (var i = 0; i < numCharsToWrite; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    HEAP16[((outPtr) >> 1)] = codeUnit;
                    outPtr += 2;
                }
                HEAP16[((outPtr) >> 1)] = 0;
                return outPtr - startPtr;
            };
            UTF16.lengthBytesUTF16 = function (str) {
                return str.length * 2;
            };
            UTF16.UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
            return UTF16;
        }());
        encoding.UTF16 = UTF16;
        var UTF32 = (function () {
            function UTF32() {
            }
            UTF32.UTF32ToString = function (HEAP32, ptr) {
                console.assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
                var i = 0;
                var str = '';
                while (1) {
                    var utf32 = HEAP32[(((ptr) + (i * 4)) >> 2)];
                    if (utf32 == 0)
                        return str;
                    ++i;
                    if (utf32 >= 0x10000) {
                        var ch = utf32 - 0x10000;
                        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
                    }
                    else {
                        str += String.fromCharCode(utf32);
                    }
                }
            };
            UTF32.stringToUTF32 = function (str, HEAP32, outPtr, maxBytesToWrite) {
                console.assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
                console.assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
                if (maxBytesToWrite === undefined) {
                    maxBytesToWrite = 0x7FFFFFFF;
                }
                if (maxBytesToWrite < 4)
                    return 0;
                var startPtr = outPtr;
                var endPtr = startPtr + maxBytesToWrite - 4;
                for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
                        var trailSurrogate = str.charCodeAt(++i);
                        codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
                    }
                    HEAP32[((outPtr) >> 2)] = codeUnit;
                    outPtr += 4;
                    if (outPtr + 4 > endPtr)
                        break;
                }
                HEAP32[((outPtr) >> 2)] = 0;
                return outPtr - startPtr;
            };
            UTF32.lengthBytesUTF32 = function (str) {
                var len = 0;
                for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF)
                        ++i;
                    len += 4;
                }
                return len;
            };
            return UTF32;
        }());
        encoding.UTF32 = UTF32;
        var Utf8;
        (function (Utf8) {
            var root = function () {
            };
            var stringFromCharCode = String.fromCharCode;
            function ucs2decode(string) {
                var output = [];
                var counter = 0;
                var length = string.length;
                var value;
                var extra;
                while (counter < length) {
                    value = string.charCodeAt(counter++);
                    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                        extra = string.charCodeAt(counter++);
                        if ((extra & 0xFC00) == 0xDC00) {
                            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                        }
                        else {
                            output.push(value);
                            counter--;
                        }
                    }
                    else {
                        output.push(value);
                    }
                }
                return output;
            }
            Utf8.ucs2decode = ucs2decode;
            function ucs2encode(array) {
                var length = array.length;
                var index = -1;
                var value;
                var output = '';
                while (++index < length) {
                    value = array[index];
                    if (value > 0xFFFF) {
                        value -= 0x10000;
                        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                        value = 0xDC00 | value & 0x3FF;
                    }
                    output += stringFromCharCode(value);
                }
                return output;
            }
            Utf8.ucs2encode = ucs2encode;
            function checkScalarValue(codePoint) {
                if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
                    throw Error("Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value");
                }
            }
            function createByte(codePoint, shift) {
                return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
            }
            function encodeCodePoint(codePoint) {
                if ((codePoint & 0xFFFFFF80) == 0) {
                    return stringFromCharCode(codePoint);
                }
                var symbol = '';
                if ((codePoint & 0xFFFFF800) == 0) {
                    symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
                }
                else if ((codePoint & 0xFFFF0000) == 0) {
                    checkScalarValue(codePoint);
                    symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
                    symbol += createByte(codePoint, 6);
                }
                else if ((codePoint & 0xFFE00000) == 0) {
                    symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
                    symbol += createByte(codePoint, 12);
                    symbol += createByte(codePoint, 6);
                }
                symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
                return symbol;
            }
            function utf8encode(string) {
                var codePoints = ucs2decode(string);
                var length = codePoints.length;
                var index = -1;
                var codePoint;
                var byteString = '';
                while (++index < length) {
                    codePoint = codePoints[index];
                    byteString += encodeCodePoint(codePoint);
                }
                return byteString;
            }
            Utf8.utf8encode = utf8encode;
            function readContinuationByte() {
                if (byteIndex >= byteCount) {
                    throw Error('Invalid byte index');
                }
                var continuationByte = byteArray[byteIndex] & 0xFF;
                byteIndex++;
                if ((continuationByte & 0xC0) == 0x80) {
                    return continuationByte & 0x3F;
                }
                throw Error('Invalid continuation byte');
            }
            function decodeSymbol() {
                var byte1;
                var byte2;
                var byte3;
                var byte4;
                var codePoint;
                if (byteIndex > byteCount) {
                    throw Error('Invalid byte index');
                }
                if (byteIndex == byteCount) {
                    return false;
                }
                byte1 = byteArray[byteIndex] & 0xFF;
                byteIndex++;
                if ((byte1 & 0x80) == 0) {
                    return byte1;
                }
                if ((byte1 & 0xE0) == 0xC0) {
                    byte2 = readContinuationByte();
                    codePoint = ((byte1 & 0x1F) << 6) | byte2;
                    if (codePoint >= 0x80) {
                        return codePoint;
                    }
                    else {
                        throw Error('Invalid continuation byte');
                    }
                }
                if ((byte1 & 0xF0) == 0xE0) {
                    byte2 = readContinuationByte();
                    byte3 = readContinuationByte();
                    codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
                    if (codePoint >= 0x0800) {
                        checkScalarValue(codePoint);
                        return codePoint;
                    }
                    else {
                        throw Error('Invalid continuation byte');
                    }
                }
                if ((byte1 & 0xF8) == 0xF0) {
                    byte2 = readContinuationByte();
                    byte3 = readContinuationByte();
                    byte4 = readContinuationByte();
                    codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
                        (byte3 << 0x06) | byte4;
                    if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
                        return codePoint;
                    }
                }
                throw Error('Invalid UTF-8 detected');
            }
            var byteArray;
            var byteCount;
            var byteIndex;
            function utf8decode(byteString) {
                byteArray = ucs2decode(byteString);
                byteCount = byteArray.length;
                byteIndex = 0;
                var codePoints = [];
                var tmp;
                while ((tmp = decodeSymbol()) !== false) {
                    codePoints.push(tmp);
                }
                return ucs2encode(codePoints);
            }
            Utf8.utf8decode = utf8decode;
            Utf8.version = '3.0.0';
            Utf8.encode = utf8encode;
            Utf8.decode = utf8decode;
        })(Utf8 = encoding.Utf8 || (encoding.Utf8 = {}));
    })(encoding = exports.encoding || (exports.encoding = {}));
    var xNode = (function () {
        function xNode(node, param, unknown) {
            this.node = node;
            this.param = param;
            this.unknown = unknown;
            this.children = [];
            if (!unknown)
                this.unknown = [];
        }
        xNode.prototype.add = function (node, param) {
            var v = new xNode(node, param, this.unknown);
            v = this.__add(v);
            if (this.unknown.length)
                return this.Validate();
            return v;
        };
        xNode.prototype.__add = function (v) {
            var t = this._add(v);
            if (t)
                return t;
            for (var i = 0; i < this.unknown.length; i++) {
                if (t = this.unknown[i]._add(v))
                    return t;
            }
            for (var i = 0; i < this.unknown.length; i++)
                if (this.unknown[i].node == v.node)
                    return this;
            this.unknown.push(v);
            return this;
        };
        xNode.prototype.Validate = function () {
            var t = this;
            for (var i = 0; i < this.unknown.length; i++) {
                var t1 = this._add(this.unknown[i]);
                if (t1) {
                    this.unknown.splice(i, 1);
                    i--;
                }
            }
            return this;
        };
        xNode.prototype.ReValidate = function (callback) {
            if (this.unknown) {
                for (var i = 0; i < this.unknown.length; i++) {
                    if (this.node.contains(this.unknown[i].node)) {
                        callback(this.unknown[i]);
                        this.unknown.splice(i, 1);
                        i--;
                    }
                }
            }
        };
        xNode.prototype.get = function (node) {
            for (var i = 0; i < this.children.length; i++) {
                var c = this.children[i];
                if (c.node == node)
                    return c;
                if (c = c.get(node))
                    return c;
            }
        };
        xNode.prototype._add = function (node) {
            var s = false;
            if (this.node.contains(node.node)) {
                for (var i = 0; i < this.children.length; i++) {
                    var c = this.children[i];
                    if (node.node == c.node)
                        return this;
                    if (c._add(node))
                        return this;
                    if (node.node.contains(c.node))
                        this.children.splice(i, 1, c);
                }
                if (this.children.indexOf(node) == -1)
                    this.children.push(node);
                return this;
            }
            if (this.node == node.node)
                return this;
            if (node.node.contains(this.node))
                return node._add(this);
            return undefined;
        };
        xNode.prototype.remove = function (node) {
            for (var i = 0; i < this.children.length; i++) {
                var c = this.children[i];
                if (c.node == node) {
                    this.children.push.apply(this.children, c.children);
                    this.children.splice(i, 1);
                    return c;
                }
                else if (c = c.remove(node))
                    return c;
            }
        };
        xNode.prototype.hasChild = function (node) {
            for (var i = 0; i < this.children.length; i++) {
                var c = this.children[i];
                if (node.contains(c.node))
                    return c;
                if (c = c.hasChild(node))
                    return c;
            }
        };
        xNode.prototype.foreach = function (callback, parent) {
            var t = callback(parent, this);
            if (t > 0)
                return t;
            for (var i = 0; i < this.children.length; i++) {
                var t = this.children[i].foreach(callback, this);
                if (t > 0)
                    return t - 1;
            }
            return 0;
        };
        return xNode;
    }());
    exports.xNode = xNode;
    var fast = (function () {
        function fast() {
            this.dic = new collection.Dictionary("s");
            this.unknown = new collection.Dictionary("s1");
        }
        fast.prototype.add = function (node, param) {
            var x = this.dic.Get(node);
            if (x)
                return;
            var l = this.unknown.Get(node);
            if (l)
                return;
            if (window.document.body.contains(node))
                return this.dic.Set(node, param);
            else
                this.unknown.Set(node, param);
        };
        fast.prototype.ReValidate = function (callback, onficish) {
            var n;
            if (this.unknown) {
                for (var i = 0, l = this.unknown.Count; i < l; i++) {
                    if (window.document.body.contains(n = this.unknown.GetKeyAt(i))) {
                        callback(n, this.unknown.GetValueAt(i));
                        this.unknown.RemoveAt(i);
                        i--;
                    }
                }
            }
            onficish && onficish();
        };
        fast.prototype.Remove = function (node) {
            var c = this.dic.Remove(node);
        };
        fast.prototype.GetAndRemove = function (node) {
            return this.dic.Remove(node);
        };
        fast.prototype.Dispose = function (node) {
            var l = this.dic.Remove(node);
            return this.unknown.Remove(node) || l;
        };
        return fast;
    }());
    var UIDispatcher;
    (function (UIDispatcher) {
        function OnIdle(f) {
            help.pushToIdl(f);
        }
        UIDispatcher.OnIdle = OnIdle;
    })(UIDispatcher = exports.UIDispatcher || (exports.UIDispatcher = {}));
    var help;
    (function (help) {
        var uiListDispatcher = [];
        var isExecuting;
        var f;
        function OnNodeInserted(controller, dom) {
            f.add(dom, controller);
            if (!__global.useListenerOrMutation)
                dom.addEventListener(OnNodeLoaded, controller);
        }
        help.OnNodeInserted = OnNodeInserted;
        function RemoveListener(dom) {
            var c = f.Dispose(dom);
            if (!__global.useListenerOrMutation)
                dom.removeEventListener(OnNodeLoaded, c);
        }
        help.RemoveListener = RemoveListener;
        function observe(mutations, observer) {
            var cmd;
            var n;
            var t = [];
            if (f.dic.Count)
                for (var i = 0; i < mutations.length; i++) {
                    var m = mutations[i];
                    if (m.type == 'childList') {
                        n = m.addedNodes;
                        for (var j = 0; j < n.length; j++) {
                            var c = f.GetAndRemove(n[j]);
                            if (c)
                                c.OnNodeLoaded();
                        }
                    }
                }
            if (f.unknown.Count)
                thread.Dispatcher.call(f, f.ReValidate, function (node, controller) {
                    controller.OnNodeLoaded();
                }, OnMutationFinished);
        }
        function OnMutationFinished() {
            if (isExecuting)
                return;
            runQueue();
        }
        function runQueue() {
            if (uiListDispatcher.length == 0)
                return;
            isExecuting = true;
            if (thread.Dispatcher.IsRunning())
                return thread.Dispatcher.OnIdle(null, runQueue);
            else
                thread.Dispatcher.call(null, execute);
        }
        function execute() {
            for (var i = 0; i < uiListDispatcher.length; i++)
                helper.TryCatch(undefined, uiListDispatcher[i]);
            uiListDispatcher.splice(0, uiListDispatcher.length);
            isExecuting = false;
        }
        function pushToIdl(f) {
            if (!(f instanceof Function))
                return;
            uiListDispatcher.push(f);
            OnMutationFinished();
        }
        help.pushToIdl = pushToIdl;
        function init() {
            f = new fast();
            if (__global.useListenerOrMutation) {
                var t = new MutationObserver(observe);
                t.observe(document.body, { childList: true, subtree: true });
            }
        }
        init();
    })(help || (help = {}));
    var ttt = true;
    var net;
    (function (net) {
        var Header = (function () {
            function Header(key, value) {
                this._key = key;
                this._value = value;
            }
            Object.defineProperty(Header.prototype, "key", {
                get: function () {
                    return this._key;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Header.prototype, "value", {
                get: function () {
                    return this._value;
                },
                enumerable: true,
                configurable: true
            });
            return Header;
        }());
        net.Header = Header;
        var ResponseType;
        (function (ResponseType) {
            ResponseType[ResponseType["json"] = 0] = "json";
            ResponseType[ResponseType["document"] = 1] = "document";
            ResponseType[ResponseType["text"] = 2] = "text";
            ResponseType[ResponseType["arraybuffer"] = 3] = "arraybuffer";
            ResponseType[ResponseType["blob"] = 4] = "blob";
        })(ResponseType = net.ResponseType || (net.ResponseType = {}));
        var WebRequestMethod;
        (function (WebRequestMethod) {
            WebRequestMethod[WebRequestMethod["Get"] = 0] = "Get";
            WebRequestMethod[WebRequestMethod["Post"] = 1] = "Post";
            WebRequestMethod[WebRequestMethod["Head"] = 2] = "Head";
            WebRequestMethod[WebRequestMethod["Put"] = 3] = "Put";
            WebRequestMethod[WebRequestMethod["Delete"] = 4] = "Delete";
            WebRequestMethod[WebRequestMethod["Options"] = 5] = "Options";
            WebRequestMethod[WebRequestMethod["Connect"] = 6] = "Connect";
            WebRequestMethod[WebRequestMethod["Create"] = 7] = "Create";
            WebRequestMethod[WebRequestMethod["Open"] = 8] = "Open";
            WebRequestMethod[WebRequestMethod["Close"] = 9] = "Close";
            WebRequestMethod[WebRequestMethod["Validate"] = 10] = "Validate";
            WebRequestMethod[WebRequestMethod["FastValidate"] = 11] = "FastValidate";
            WebRequestMethod[WebRequestMethod["Print"] = 12] = "Print";
            WebRequestMethod[WebRequestMethod["UPDATE"] = 13] = "UPDATE";
            WebRequestMethod[WebRequestMethod["SUPDATE"] = 14] = "SUPDATE";
            WebRequestMethod[WebRequestMethod["Set"] = 15] = "Set";
        })(WebRequestMethod = net.WebRequestMethod || (net.WebRequestMethod = {}));
        var WebRequest = (function () {
            function WebRequest(crypt) {
                this.crypt = crypt;
                this.http = new XMLHttpRequest();
                this._responseType = null;
                this.key = new Object();
                this.OnComplete = new bind.EventListener(this.key);
                this.http.addEventListener('loadend', this.downloadDelegate = new basic.Delegate(this, this._onprogress, function (p) {
                    p.Owner.http.removeEventListener('loadend', p);
                    p.Owner.http.removeEventListener('error', p);
                }));
                if (typeof __global.https != 'undefined' && __global.https)
                    this.crypt = new crypto.AesCBC(key.slice(0));
                this.http.addEventListener('error', this.downloadDelegate);
            }
            WebRequest.prototype.getResponseType = function () {
                return typeof this._responseType === 'number' ? this._responseType : ResponseType.text;
            };
            WebRequest.prototype.setResponseType = function (v) {
                this._responseType = v;
                return v;
            };
            Object.defineProperty(WebRequest.prototype, "Crypto", {
                set: function (v) {
                    this.crypt = v;
                },
                enumerable: true,
                configurable: true
            });
            WebRequest.prototype.Dispose = function () {
                this.OnComplete.Dispose();
                this.downloadDelegate.Dispose();
                this.key = null;
                this.http = null;
                this.OnComplete = null;
                this.downloadDelegate = null;
            };
            WebRequest.prototype._onprogress = function (e) {
                var cur = null;
                switch (this.http.readyState) {
                    case 4:
                        cur = this.OnComplete;
                        break;
                    default: return;
                }
                if (cur) {
                    var t = this;
                    cur.Invoke(this.key, [t]);
                }
            };
            Object.defineProperty(WebRequest.prototype, "IsSuccess", {
                get: function () { return this.http.status == 200 && this.http.readyState == 4; },
                enumerable: true,
                configurable: true
            });
            WebRequest.prototype.Download = function (req, data) {
                this.http.open(WebRequestMethod[req.Method], req.Url, true, this.Uid, this.Pwd);
                this.http.setRequestHeader('xreq', btoa((this.Uid || '') + ':' + (this.Pwd || '')));
                this.http.responseType = ResponseType[this.getResponseType()].toLowerCase();
                if (req.Method === WebRequestMethod.Get)
                    this.http.send();
                else
                    this.http.send(JSON.stringify(data));
            };
            WebRequest.prototype.Download2 = function (c) {
                if (c.url.beforRequest && !c.url.beforRequest(c.url))
                    return this.OnComplete && this.OnComplete.Invoke(this.key, [this]);
                var req = c.url;
                this.http.open(WebRequestMethod[req.Method], this.getUrlOf(c), true, this.Uid, this.Pwd);
                this.http.setRequestHeader('xreq', btoa((this.Uid || '') + ':' + (this.Pwd || '')));
                this.http.setRequestHeader('Access-Control-Allow-Origin', '*');
                if (c.url.timeout)
                    this.http.timeout = c.url.timeout;
                else
                    this.http.timeout = 0;
                this.http.responseType = ResponseType[c.url.ResponseType] || 'text';
                this.http.send(this.getDataOf(c));
            };
            WebRequest.prototype.getUrlOf = function (c) {
                var req = c.url;
                var url = req.Url;
                if (c.params) {
                    var s = url.lastIndexOf('?') != -1;
                    for (var i in c.params)
                        url += (!s ? ((s = true) && '?') : '&') + (encodeURI(i) + '=' + encodeURI(String(c.params[i])));
                }
                return url;
            };
            WebRequest.prototype.getDataOf = function (c) {
                var req = c.url;
                if (req.HasBody === true && req.Method !== WebRequestMethod.Get && c.data !== undefined) {
                    if (__global['https']) {
                        var bytes = encoding.Utf8.ucs2decode(c.data.OutputData());
                        this.crypt && (bytes = this.crypt.Encrypt(bytes));
                        return new Uint8Array(bytes);
                    }
                    else
                        return c.data.OutputData();
                }
            };
            WebRequest.prototype.GetFileSize = function (url, callback) {
                this.http.open("HEAD", url, true, this.Uid, this.Pwd);
                this.http.onreadystatechange = function () {
                    if (this.readyState == this.DONE) {
                        if (callback)
                            callback(parseInt(this.getResponseHeader("Content-Length")));
                    }
                };
                this.http.send();
            };
            WebRequest.prototype.RequestHeader = function (url, callback) {
                this.http.open("HEAD", url, true);
                this.http.onreadystatechange = function () {
                    if (this.readyState == this.DONE) {
                        if (callback) {
                            var h = this.getAllResponseHeaders().split('\r\n');
                            var t = [];
                            for (var i = h.length - 1; i >= 0; i--) {
                                var p = h[i];
                                if (p) {
                                    var vk = p.split(': ');
                                    t.push(new Header(vk[0], vk[1]));
                                }
                            }
                            callback(t);
                        }
                    }
                };
                this.http.send();
            };
            Object.defineProperty(WebRequest.prototype, "Response", {
                get: function () {
                    return this.http.response;
                },
                enumerable: true,
                configurable: true
            });
            WebRequest.prototype.GetHeader = function (name) {
                return this.http.getResponseHeader(name);
            };
            WebRequest.prototype.GetHeaders = function () {
                return this.http.getAllResponseHeaders();
            };
            return WebRequest;
        }());
        net.WebRequest = WebRequest;
        var RequestParams = (function () {
            function RequestParams(callback, data, isPrivate) {
                this.callback = callback;
                this.data = data;
                this.isPrivate = isPrivate;
                this.IsSuccess = null;
                if (isPrivate == void 0)
                    this.isPrivate = false;
            }
            RequestParams.prototype.Callback = function (sender, result) {
                if (this.callback)
                    this.callback(sender, result);
            };
            return RequestParams;
        }());
        net.RequestParams = RequestParams;
        var Request = (function () {
            function Request(url, data, params) {
                this.url = url;
                this.data = data;
                this.params = params;
                this.fail = undefined;
            }
            return Request;
        }());
        net.Request = Request;
        var QueeDownloader = (function () {
            function QueeDownloader(crypt) {
                this.crypt = crypt;
                this.quee = [];
                this.isRunning = false;
                this.isDownloading = false;
                this.OnSuccess = new bind.EventListener(1);
                this.OnFail = new bind.EventListener(1);
                this.OnFinish = new bind.EventListener(1);
                this.webr = new net.WebRequest(crypt);
                this.webr.setResponseType(net.ResponseType.text);
                this.webr.OnComplete.Add(this.DownloadComplete.bind(this), "DCT");
            }
            Object.defineProperty(QueeDownloader.prototype, "Uid", {
                set: function (v) { this.webr.Uid = v; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueeDownloader.prototype, "Pwd", {
                set: function (v) { this.webr.Pwd = v; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueeDownloader.prototype, "Request", {
                get: function () { return this.webr; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueeDownloader.prototype, "Crypto", {
                set: function (v) {
                    this.webr.Crypto = v;
                },
                enumerable: true,
                configurable: true
            });
            QueeDownloader.prototype.OnError = function () {
                this.isDownloading = false;
                if (this.current) {
                    var ip = true;
                    var c = this.current.data;
                    if (c instanceof RequestParams) {
                        c.IsSuccess = false;
                        helper.TryCatch(c, c.Callback, void 0, [this, this.webr]);
                        ip = !(c.isPrivate);
                    }
                    if (ip)
                        this.OnFail.PInvok(1, [this, c], this);
                }
                this.Next();
            };
            QueeDownloader.prototype.DownloadComplete = function (xmlRequest) {
                this.isDownloading = false;
                var x = this.webr.IsSuccess ? this.OnSuccess : this.OnFail;
                if (this.current) {
                    var ip = true;
                    var c = this.current.data;
                    if (c instanceof RequestParams) {
                        c.IsSuccess = this.webr.IsSuccess;
                        helper.TryCatch(c, c.Callback, void 0, [this, this.webr]);
                        ip = !(c.isPrivate);
                    }
                    if (ip)
                        x.PInvok(1, [this, c], this);
                }
                this.Next();
            };
            QueeDownloader.prototype.Push = function (url, data, params) {
                this.quee.push(new Request(url, data, params));
                if (!this.isRunning)
                    this.Start();
            };
            QueeDownloader.prototype.Insert = function (dcall) {
                this.quee.push(dcall);
                if (!this.isRunning)
                    this.Start();
            };
            QueeDownloader.prototype.Start = function () {
                if (this.isDownloading)
                    return;
                this.isRunning = true;
                this.Next();
            };
            QueeDownloader.prototype.Next = function () {
                if (0 == this.quee.length) {
                    this.isRunning = false;
                    this.isDownloading = false;
                    var ___this = this;
                    this.OnFinish.Invoke(1, [___this, ___this.current.data]);
                    return;
                }
                try {
                    this.webr.Download2(this.current = this.quee.shift());
                    this.isDownloading = true;
                }
                catch (e) {
                    this.isDownloading = false;
                    this.OnError();
                }
            };
            QueeDownloader.prototype.Restart = function () {
                this.isDownloading = false;
                this.Start();
            };
            return QueeDownloader;
        }());
        net.QueeDownloader = QueeDownloader;
    })(net = exports.net || (exports.net = {}));
    (function (net) {
        var RequestUrl = (function () {
            function RequestUrl(_url, context, Header, Method, HasBody, ResponseType) {
                this._url = _url;
                this.context = context;
                this.Header = Header;
                this.Method = Method;
                this.HasBody = HasBody;
                this.ResponseType = ResponseType;
                if (Method == undefined)
                    this.Method = net.WebRequestMethod.Get;
            }
            Object.defineProperty(RequestUrl.prototype, "Url", {
                get: function () {
                    if (this.context)
                        return this.context.GetPath(this._url);
                    return this._url;
                },
                set: function (v) { this._url = v; },
                enumerable: true,
                configurable: true
            });
            return RequestUrl;
        }());
        net.RequestUrl = RequestUrl;
    })(net = exports.net || (exports.net = {}));
    (function (basic) {
        var _events = new collection.Dictionary("ethandler");
        var DomEventHandler = (function () {
            function DomEventHandler(dom, event, owner, handle, param) {
                this.dom = dom;
                this.event = event;
                this.owner = owner;
                this.handle = handle;
                this.param = param;
                this.Started = false;
                _events.Set(this, dom);
            }
            DomEventHandler.prototype.Start = function () {
                if (this.Started === false) {
                    this.Started = true;
                    this.dom.addEventListener(this.event, this);
                }
            };
            DomEventHandler.prototype.Pause = function () {
                if (this.Started === true) {
                    this.Started = false;
                    this.dom.removeEventListener(this.event, this);
                }
            };
            DomEventHandler.prototype.Dispose = function () {
                if (this.Started === undefined)
                    return;
                this.Pause();
                _events.Remove(this);
                this.dom = undefined;
                this.event = undefined;
                this.handle = undefined;
                this.Started = undefined;
                this.param = undefined;
            };
            DomEventHandler.prototype.Reset = function () {
                this.Pause();
                this.Start();
            };
            DomEventHandler.prototype.handleEvent = function (evt) {
                this.handle.call(this.owner, this, evt, this.param);
            };
            DomEventHandler.Dispose = function (dom, event) {
                var i;
                if (event == null)
                    for (var i_1 = 0, ks = _events.RemoveAllValues(dom); i_1 < ks.length; i_1++)
                        ks[i_1].Dispose();
                else
                    do
                        if ((i = _events.IndexOfValue(dom, i)) === -1)
                            break;
                        else
                            _events.RemoveAt(i).Key.Dispose();
                    while (true);
            };
            return DomEventHandler;
        }());
        basic.DomEventHandler = DomEventHandler;
    })(basic = exports.basic || (exports.basic = {}));
    var crypto;
    (function (crypto) {
        var Sbox = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
        var ShiftRowTab = [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11];
        var ShiftRowTab_Inv;
        var Sbox_Inv, xtime;
        function string2bytes_16(a) {
            var c = new Uint16Array(a.length);
            for (var d = 0; d < a.length; d++)
                c[d] = a.charCodeAt(d);
            return c;
        }
        crypto.string2bytes_16 = string2bytes_16;
        function bytes2string_16(a) {
            for (var c = "", d = 0; d < a.length; d++)
                c += String.fromCharCode(a[d]);
            return c;
        }
        crypto.bytes2string_16 = bytes2string_16;
        function string2bytes(a) {
            if (a instanceof Array)
                return a.slice(0);
            var c = new Array(a.length);
            for (var d = 0; d < a.length; d++) {
                var x = a.charCodeAt(d);
                if (x > 255)
                    throw "Invalid ASCII Charactere";
                c[d] = x;
            }
            return c;
        }
        crypto.string2bytes = string2bytes;
        function bytes2string(a) {
            for (var c = "", d = 0; d < a.length; d++)
                c += String.fromCharCode(a[d]);
            return c;
        }
        crypto.bytes2string = bytes2string;
        Sbox_Inv = Array(256);
        for (var b = 0; b < 256; b++)
            Sbox_Inv[Sbox[b]] = b;
        ShiftRowTab_Inv = Array(16);
        for (b = 0; b < 16; b++)
            ShiftRowTab_Inv[ShiftRowTab[b]] = b;
        xtime = Array(256);
        for (b = 0; b < 128; b++)
            xtime[b] = b << 1,
                xtime[128 + b] = b << 1 ^ 27;
        var Aes = (function () {
            function Aes(key) {
                if ('string' === typeof (key))
                    this.Key = this.InitKey(string2bytes(key));
                else if (key instanceof Array)
                    this.Key = this.InitKey(key);
                else
                    throw "Invalid Key";
            }
            Aes.prototype.InitKey = function (key) {
                return key;
            };
            Aes.ExpandKey = function (b) {
                var c = b.length, d, e = 1;
                var c1 = c;
                if (c <= 16) {
                    c1 = 16;
                    d = 176;
                }
                else if (c <= 24) {
                    c1 = 24;
                    d = 208;
                }
                else if (c <= 32) {
                    c1 = 32;
                    d = 240;
                }
                else
                    throw "my.ExpandKey: Only key lengths of 16, 24 or 32 bytes allowed!";
                b.length = c1;
                for (; c < c1; c++) {
                    b[c] = 0;
                }
                for (var g = c; g < d; g += 4) {
                    var h = b.slice(g - 4, g);
                    if (g % c == 0) {
                        if (h = [Sbox[h[1]] ^ e, Sbox[h[2]], Sbox[h[3]], Sbox[h[0]]], (e <<= 1) >= 256)
                            e ^= 283;
                    }
                    else
                        c > 24 && g % c == 16 && (h = [Sbox[h[0]], Sbox[h[1]], Sbox[h[2]], Sbox[h[3]]]);
                    for (var f = 0; f < 4; f++)
                        b[g + f] = b[g + f - c] ^ h[f];
                }
            };
            Aes.prototype.Encrypt = function (data) {
                ;
                var Key = this.Key;
                var d = Key.length;
                Aes.AddRoundKey(data, Key.slice(0, 16));
                for (var e = 16; e < d - 16; e += 16)
                    Aes.SubBytes(data, Sbox),
                        Aes.ShiftRows(data, ShiftRowTab),
                        Aes.MixColumns(data),
                        Aes.AddRoundKey(data, Key.slice(e, e + 16));
                Aes.SubBytes(data, Sbox);
                Aes.ShiftRows(data, ShiftRowTab);
                Aes.AddRoundKey(data, Key.slice(e, d));
                return data;
            };
            Aes.prototype.Decrypt = function (data) {
                ;
                var Key = this.Key;
                var d = Key.length;
                Aes.AddRoundKey(data, Key.slice(d - 16, d));
                Aes.ShiftRows(data, ShiftRowTab_Inv);
                Aes.SubBytes(data, Sbox_Inv);
                for (d -= 32; d >= 16; d -= 16)
                    Aes.AddRoundKey(data, Key.slice(d, d + 16)),
                        Aes.MixColumns_Inv(data),
                        Aes.ShiftRows(data, ShiftRowTab_Inv),
                        Aes.SubBytes(data, Sbox_Inv);
                Aes.AddRoundKey(data, Key.slice(0, 16));
                return data;
            };
            Aes.prototype.SEncrypt = function (data) {
                return bytes2string(this.Encrypt(string2bytes(data)));
            };
            Aes.prototype.SDecrypt = function (data) {
                return bytes2string(this.Decrypt(string2bytes(data)));
            };
            Aes.SubBytes = function (a, c) {
                ;
                for (var d = 0; d < 16; d++)
                    a[d] = c[a[d]];
            };
            Aes.AddRoundKey = function (a, c) {
                ;
                for (var d = 0; d < 16; d++)
                    a[d] ^= c[d];
            };
            Aes.ShiftRows = function (a, c) {
                ;
                for (var d = [].concat(a), e = 0; e < 16; e++)
                    a[e] = d[c[e]];
            };
            Aes.MixColumns = function (b) {
                ;
                var _xtime = xtime;
                for (var c = 0; c < 16; c += 4) {
                    var d = b[c + 0], e = b[c + 1], g = b[c + 2], h = b[c + 3], f = d ^ e ^ g ^ h;
                    b[c + 0] ^= f ^ _xtime[d ^ e];
                    b[c + 1] ^= f ^ _xtime[e ^ g];
                    b[c + 2] ^= f ^ _xtime[g ^ h];
                    b[c + 3] ^= f ^ _xtime[h ^ d];
                }
            };
            Aes.MixColumns_Inv = function (b) {
                ;
                var _xtime = xtime;
                for (var c = 0; c < 16; c += 4) {
                    var d = b[c + 0], e = b[c + 1], g = b[c + 2], h = b[c + 3], f = d ^ e ^ g ^ h, o = _xtime[f], p = _xtime[_xtime[o ^ d ^ g]] ^ f;
                    f ^= _xtime[_xtime[o ^ e ^ h]];
                    b[c + 0] ^= p ^ _xtime[d ^ e];
                    b[c + 1] ^= f ^ _xtime[e ^ g];
                    b[c + 2] ^= p ^ _xtime[g ^ h];
                    b[c + 3] ^= f ^ _xtime[h ^ d];
                }
            };
            return Aes;
        }());
        crypto.Aes = Aes;
        var AesCBC = (function (_super) {
            __extends(AesCBC, _super);
            function AesCBC(key) {
                return _super.call(this, key) || this;
            }
            AesCBC.prototype.InitKey = function (key) {
                Aes.ExpandKey(key);
                return key;
            };
            AesCBC.blockXOR = function (a, c) {
                ;
                for (var d = Array(16), e = 0; e < 16; e++)
                    d[e] = a[e] ^ c[e];
                return d;
            };
            AesCBC.blockIV = function () {
                ;
                var a = new crypto.SecureRandom(), c = Array(16);
                a.nextBytes(c);
                return c;
            };
            AesCBC.pad16 = function (a) {
                var c = a.slice(0), d = (16 - a.length % 16) % 16;
                for (var i = a.length; i < a.length + d; i++)
                    c.push(0);
                return c;
            };
            ;
            AesCBC.depad = function (a) {
                for (a = a.slice(0); a[a.length - 1] == 0;)
                    a = a.slice(0, a.length - 1);
                return a;
            };
            AesCBC.prototype.Encrypt = function (data) {
                for (var e = AesCBC.pad16(data), g = AesCBC.blockIV(), h = 0; h < e.length / 16; h++) {
                    var f = e.slice(h * 16, h * 16 + 16);
                    f = AesCBC.blockXOR(g.slice(h * 16, h * 16 + 16), f);
                    _super.prototype.Encrypt.call(this, f);
                    g = g.concat(f);
                }
                return g;
            };
            AesCBC.prototype.Decrypt = function (data) {
                ;
                var g = [];
                for (var h = 1; h < data.length / 16; h++) {
                    var f = data.slice(h * 16, h * 16 + 16), o = data.slice((h - 1) * 16, (h - 1) * 16 + 16);
                    _super.prototype.Decrypt.call(this, f);
                    f = AesCBC.blockXOR(o, f);
                    g = g.concat(f);
                }
                return AesCBC.depad(g);
            };
            return AesCBC;
        }(Aes));
        crypto.AesCBC = AesCBC;
    })(crypto = exports.crypto || (exports.crypto = {}));
    (function (crypto) {
        var Arcfour = (function () {
            function Arcfour() {
                this.S = [];
            }
            Arcfour.prototype.init = function (a) {
                ;
                var b, c, d;
                for (b = 0; b < 256; ++b)
                    this.S[b] = b;
                for (b = c = 0; b < 256; ++b)
                    c = c + this.S[b] + a[b % a.length] & 255,
                        d = this.S[b],
                        this.S[b] = this.S[c],
                        this.S[c] = d;
                this.j = this.i = 0;
            };
            Arcfour.prototype.next = function () {
                ;
                var a;
                this.i = this.i + 1 & 255;
                this.j = this.j + this.S[this.i] & 255;
                a = this.S[this.i];
                this.S[this.i] = this.S[this.j];
                this.S[this.j] = a;
                return this.S[a + this.S[this.i] & 255];
            };
            return Arcfour;
        }());
        var rng_psize = 256, rng_state, rng_pool, rng_pptr;
        if (rng_pool == null) {
            rng_pool = new Uint8Array(rng_psize);
            rng_pptr = 0;
            var t;
            if (navigator.appName == "Netscape" && navigator.appVersion < "5" && window.crypto) {
                var z = window.crypto.random(32);
                for (t = 0; t < z.length; ++t)
                    rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
            }
            for (; rng_pptr < rng_psize;)
                t = Math.floor(65536 * Math.random()),
                    rng_pool[rng_pptr++] = t >>> 8,
                    rng_pool[rng_pptr++] = t & 255;
            rng_pptr = 0;
            rng_seed_time();
        }
        function prng_newstate() {
            return new Arcfour;
        }
        function rng_seed_int(a) {
            ;
            rng_pool[rng_pptr++] ^= a & 255;
            rng_pool[rng_pptr++] ^= a >> 8 & 255;
            rng_pool[rng_pptr++] ^= a >> 16 & 255;
            rng_pool[rng_pptr++] ^= a >> 24 & 255;
            rng_pptr >= rng_psize && (rng_pptr -= rng_psize);
        }
        function rng_seed_time() {
            rng_seed_int((new Date).getTime());
        }
        var SecureRandom = (function () {
            function SecureRandom() {
            }
            SecureRandom.prototype.nextBytes = function (a) {
                ;
                var b;
                for (b = 0; b < a.length; ++b)
                    a[b] = this.rng_get_byte();
            };
            SecureRandom.prototype.rng_get_byte = function () {
                if (rng_state == null) {
                    rng_seed_time();
                    rng_state = prng_newstate();
                    rng_state.init(rng_pool);
                    for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
                        rng_pool[rng_pptr] = 0;
                    rng_pptr = 0;
                }
                return rng_state.next();
            };
            return SecureRandom;
        }());
        crypto.SecureRandom = SecureRandom;
    })(crypto = exports.crypto || (exports.crypto = {}));
    var crypto1;
    (function (crypto1) {
        var aes_store = {};
        var Sbox = new Uint8Array([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]);
        var ShiftRowTab = new Uint8Array([0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]);
        var ShiftRowTab_Inv;
        var Sbox_Inv, xtime;
        function string2bytes(a) {
            var c = new Uint8Array(a.length);
            for (var d = 0; d < a.length; d++)
                c[d] = a.charCodeAt(d);
            return c;
        }
        crypto1.string2bytes = string2bytes;
        function bytes2string(a) {
            for (var c = "", d = 0; d < a.length; d++)
                c += String.fromCharCode(a[d]);
            return c;
        }
        crypto1.bytes2string = bytes2string;
        {
            ;
            Sbox_Inv = new Uint8Array(256);
            for (var b = 0; b < 256; b++)
                Sbox_Inv[Sbox[b]] = b;
            ShiftRowTab_Inv = new Uint8Array(16);
            for (b = 0; b < 16; b++)
                ShiftRowTab_Inv[ShiftRowTab[b]] = b;
            xtime = new Uint8Array(256);
            for (b = 0; b < 128; b++)
                xtime[b] = b << 1,
                    xtime[128 + b] = b << 1 ^ 27;
        }
        var ExAes = (function () {
            function ExAes(key) {
                if ('string' === typeof (key))
                    this.Key = this.InitKey(string2bytes(key));
                else if (key instanceof Uint8Array)
                    this.Key = this.InitKey(key);
                else
                    throw "Invalid Key";
            }
            ExAes.prototype.InitKey = function (key) {
                return key;
            };
            ExAes.ExpandKey = function (b) {
                ;
                var c = b.length, d, e = 1;
                switch (c) {
                    case 16:
                        d = 176;
                        break;
                    case 24:
                        d = 208;
                        break;
                    case 32:
                        d = 240;
                        break;
                    default:
                        alert("my.ExpandKey: Only key lengths of 16, 24 or 32 bytes allowed!");
                }
                for (var g = c; g < d; g += 4) {
                    var h = b.slice(g - 4, g);
                    if (g % c == 0) {
                        if (h = new Uint8Array([Sbox[h[1]] ^ e, Sbox[h[2]], Sbox[h[3]], Sbox[h[0]]]),
                            (e <<= 1) >= 256)
                            e ^= 283;
                    }
                    else
                        c > 24 && g % c == 16 && (h = new Uint8Array([Sbox[h[0]], Sbox[h[1]], Sbox[h[2]], Sbox[h[3]]]));
                    for (var f = 0; f < 4; f++)
                        b[g + f] = b[g + f - c] ^ h[f];
                }
            };
            ExAes.prototype.Encrypt = function (data) {
                ;
                var Key = this.Key;
                var d = Key.length;
                ExAes.AddRoundKey(data, Key.slice(0, 16));
                for (var e = 16; e < d - 16; e += 16)
                    ExAes.SubBytes(data, Sbox),
                        ExAes.ShiftRows(data, ShiftRowTab),
                        ExAes.MixColumns(data),
                        ExAes.AddRoundKey(data, Key.slice(e, e + 16));
                ExAes.SubBytes(data, Sbox);
                ExAes.ShiftRows(data, ShiftRowTab);
                ExAes.AddRoundKey(data, Key.slice(e, d));
                return data;
            };
            ExAes.prototype.Decrypt = function (data) {
                ;
                var Key = this.Key;
                var d = Key.length;
                ExAes.AddRoundKey(data, Key.slice(d - 16, d));
                ExAes.ShiftRows(data, ShiftRowTab_Inv);
                ExAes.SubBytes(data, Sbox_Inv);
                for (d -= 32; d >= 16; d -= 16)
                    ExAes.AddRoundKey(data, Key.slice(d, d + 16)),
                        ExAes.MixColumns_Inv(data),
                        ExAes.ShiftRows(data, ShiftRowTab_Inv),
                        ExAes.SubBytes(data, Sbox_Inv);
                ExAes.AddRoundKey(data, Key.slice(0, 16));
                return data;
            };
            ExAes.SubBytes = function (a, c) {
                ;
                for (var d = 0; d < 16; d++)
                    a[d] = c[a[d]];
            };
            ExAes.AddRoundKey = function (a, c) {
                ;
                for (var d = 0; d < 16; d++)
                    a[d] ^= c[d];
            };
            ExAes.ShiftRows = function (a, c) {
                ;
                for (var d = [].concat(a), e = 0; e < 16; e++)
                    a[e] = d[c[e]];
            };
            ExAes.MixColumns = function (b) {
                ;
                var _xtime = xtime;
                for (var c = 0; c < 16; c += 4) {
                    var d = b[c + 0], e = b[c + 1], g = b[c + 2], h = b[c + 3], f = d ^ e ^ g ^ h;
                    b[c + 0] ^= f ^ _xtime[d ^ e];
                    b[c + 1] ^= f ^ _xtime[e ^ g];
                    b[c + 2] ^= f ^ _xtime[g ^ h];
                    b[c + 3] ^= f ^ _xtime[h ^ d];
                }
            };
            ExAes.MixColumns_Inv = function (b) {
                ;
                var _xtime = xtime;
                for (var c = 0; c < 16; c += 4) {
                    var d = b[c + 0], e = b[c + 1], g = b[c + 2], h = b[c + 3], f = d ^ e ^ g ^ h, o = _xtime[f], p = _xtime[_xtime[o ^ d ^ g]] ^ f;
                    f ^= _xtime[_xtime[o ^ e ^ h]];
                    b[c + 0] ^= p ^ _xtime[d ^ e];
                    b[c + 1] ^= f ^ _xtime[e ^ g];
                    b[c + 2] ^= p ^ _xtime[g ^ h];
                    b[c + 3] ^= f ^ _xtime[h ^ d];
                }
            };
            return ExAes;
        }());
        crypto1.ExAes = ExAes;
        var AesCBC = (function (_super) {
            __extends(AesCBC, _super);
            function AesCBC(key) {
                return _super.call(this, key) || this;
            }
            AesCBC.prototype.InitKey = function (key) {
                ExAes.ExpandKey(key);
                return key;
            };
            AesCBC.blockXOR = function (a, c) {
                ;
                for (var d = new Uint8Array(16), e = 0; e < 16; e++)
                    d[e] = a[e] ^ c[e];
                return d;
            };
            AesCBC.blockIV = function () {
                ;
                var a = new crypto.SecureRandom(), c = new Uint8Array(16);
                a.nextBytes(c);
                return c;
            };
            AesCBC.pad16 = function (a) {
                ;
                var c = a.slice(0), d = (16 - a.length % 16) % 16;
                var c = new Uint8Array(a.length + d);
                for (var i = 0, l = a.length; i < l; i++)
                    c[i] = a[i];
                return c;
            };
            ;
            AesCBC.depad = function (a) {
                ;
                for (var i = a.length - 1; i >= 0; i--)
                    if (a[i] != 0)
                        return a.slice(0, i + 1);
                return new Uint8Array(0);
            };
            AesCBC.prototype.concate = function (a, b) {
                var x = new Uint8Array(a.length + b.length);
                for (var i = 0, l = a.length; i < l; i++)
                    x[i] = a[i];
                for (var i = 0, j = a.length, l = b.length; i < l; i++, j++)
                    x[j] = b[i];
                return x;
            };
            AesCBC.prototype.Encrypt = function (data) {
                ;
                var Key = this.Key;
                data = AesCBC.pad16(data);
                var g = AesCBC.blockIV();
                for (var h = 0; h < data.length / 16; h++) {
                    var f = data.slice(h * 16, h * 16 + 16);
                    var o = g.slice(h * 16, (h + 1) * 16);
                    f = AesCBC.blockXOR(o, f);
                    _super.prototype.Encrypt.call(this, f);
                    g = this.concate(g, f);
                }
                return g;
            };
            AesCBC.prototype.Decrypt = function (data) {
                ;
                var g = new Uint8Array(data.length);
                var i0 = 0;
                var i1 = 16;
                var i2 = 32;
                for (var h = 1; h < data.length / 16; h++) {
                    var f = data.slice(i1, i2);
                    var o = data.slice(i0, i1);
                    _super.prototype.Decrypt.call(this, f);
                    f = AesCBC.blockXOR(o, f);
                    g.set(f, i0);
                    i0 = i1;
                    i1 = i2;
                    i2 += 16;
                }
                return AesCBC.depad(g);
            };
            return AesCBC;
        }(ExAes));
        crypto1.AesCBC = AesCBC;
    })(crypto1 = exports.crypto1 || (exports.crypto1 = {}));
    (function (crypto1) {
        var Arcfour = (function () {
            function Arcfour() {
                this.S = new Uint8Array(256);
            }
            ;
            Arcfour.prototype.init = function (a) {
                ;
                var b, c, d;
                for (b = 0; b < 256; ++b)
                    this.S[b] = b;
                for (b = c = 0; b < 256; ++b)
                    c = c + this.S[b] + a[b % a.length] & 255,
                        d = this.S[b],
                        this.S[b] = this.S[c],
                        this.S[c] = d;
                this.j = this.i = 0;
            };
            Arcfour.prototype.next = function () {
                ;
                var a;
                this.i = this.i + 1 & 255;
                this.j = this.j + this.S[this.i] & 255;
                a = this.S[this.i];
                this.S[this.i] = this.S[this.j];
                this.S[this.j] = a;
                return this.S[a + this.S[this.i] & 255];
            };
            return Arcfour;
        }());
        var rng_psize = 256, rng_state, rng_pool, rng_pptr;
        if (rng_pool == null) {
            rng_pool = new Uint8Array(rng_psize);
            rng_pptr = 0;
            var t;
            if (navigator.appName == "Netscape" && navigator.appVersion < "5" && window.crypto) {
                var z = window.crypto.random(32);
                for (t = 0; t < z.length; ++t)
                    rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
            }
            for (; rng_pptr < rng_psize;)
                t = Math.floor(65536 * Math.random()),
                    rng_pool[rng_pptr++] = t >>> 8,
                    rng_pool[rng_pptr++] = t & 255;
            rng_pptr = 0;
            rng_seed_time();
        }
        function prng_newstate() {
            return new Arcfour;
        }
        function rng_seed_int(a) {
            ;
            rng_pool[rng_pptr++] ^= a & 255;
            rng_pool[rng_pptr++] ^= a >> 8 & 255;
            rng_pool[rng_pptr++] ^= a >> 16 & 255;
            rng_pool[rng_pptr++] ^= a >> 24 & 255;
            rng_pptr >= rng_psize && (rng_pptr -= rng_psize);
        }
        function rng_seed_time() {
            rng_seed_int((new Date).getTime());
        }
        var SecureRandom = (function () {
            function SecureRandom() {
            }
            SecureRandom.prototype.nextBytes = function (a) {
                ;
                var b;
                for (b = 0; b < a.length; ++b)
                    a[b] = this.rng_get_byte();
            };
            SecureRandom.prototype.rng_get_byte = function () {
                ;
                if (rng_state == null) {
                    rng_seed_time();
                    rng_state = prng_newstate();
                    rng_state.init(rng_pool);
                    for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
                        rng_pool[rng_pptr] = 0;
                    rng_pptr = 0;
                }
                return rng_state.next();
            };
            return SecureRandom;
        }());
        crypto1.SecureRandom = SecureRandom;
    })(crypto1 = exports.crypto1 || (exports.crypto1 = {}));
    var backups = new collection.Dictionary("buckups");
    function setProperty(type, p) {
        $defineProperty(type.prototype, p.Name, {
            get: function () { return this.get(p); },
            set: function (v) { this.set(p, v); },
            configurable: false,
            enumerable: false
        });
    }
    var key = [234, 23, 196, 234, 69, 238, 92, 244, 50, 110, 70, 181, 109, 139, 252, 209, 146, 174, 40, 140, 129, 41, 58, 89, 102, 193, 99, 194, 178, 192, 239, 152];
    var cssRules = [];
    var CSSRule = (function () {
        function CSSRule(cssrule, parent) {
            var t;
            t = this;
            if (cssrule instanceof CSSMediaRule) {
                var mr = cssrule;
                var rs = mr.cssRules;
                for (var j = 0; j < rs.length; j++) {
                    var r = rs[j];
                    if (r instanceof CSSMediaRule)
                        new CSSRule(r, this);
                }
                t.IsMedia = true;
            }
            if (parent) {
                t.Parent = parent;
                if (!parent.children)
                    parent.children = [this];
                else
                    parent.children.push(this);
            }
            cssRules.push(this);
            t.Rule = cssrule;
        }
        CSSRule.prototype.Dispose = function () {
            var i = cssRules.indexOf(this);
            if (i == -1)
                return;
            cssRules.splice(i, 1);
        };
        Object.defineProperty(CSSRule.prototype, "Selectors", {
            get: function () {
                var t = null;
                t = this;
                var r = t.Rule;
                if (t.IsMedia) {
                    return [];
                }
                t._selectors = r.selectorText.split(',');
                return t._selectors;
            },
            enumerable: true,
            configurable: true
        });
        CSSRule.prototype.IsMatch = function (selector) {
            var c = this.Selectors;
            for (var i = 0; c.length; i++) {
            }
        };
        return CSSRule;
    }());
    function collectCss() {
        var d;
        d = document;
        var ss = d.styleSheets;
        for (var i = 0; i < ss.length; i++) {
            var s = ss.item(i);
            var rs = s.cssRules;
            for (var j = 0; j < rs.length; j++) {
                var r = rs[j];
                new CSSRule(r, null);
            }
        }
    }
    var Ids;
    (function (Ids) {
        var t1 = (function () {
            function t1() {
            }
            return t1;
        }());
        Ids.t1 = t1;
        var t2 = (function () {
            function t2() {
            }
            return t2;
        }());
        Ids.t2 = t2;
        var t3 = (function () {
            function t3() {
            }
            return t3;
        }());
        Ids.t3 = t3;
    })(Ids = exports.Ids || (exports.Ids = {}));
    var JsonFileParser = (function () {
        function JsonFileParser() {
        }
        JsonFileParser.parse = function (x, scop, name) {
            name = name || x.__name__;
            var value = x.value;
            switch (x.__type__) {
                case 'namespace':
                    scop[name] = this.parseNamedScop(x);
                    break;
                case 'namedscop':
                    this.context.FromJson(x, bind.NamedScop, new encoding.Path(scop, name));
                    break;
                case 'valuepace':
                    this.context.FromJson(x, bind.ValueScop, new encoding.Path(scop, name));
                    break;
                case 'stringscop':
                    this.context.FromJson(x, bind.StringScop, new encoding.Path(scop, name));
                    break;
                case 'templatestring':
                    this.context.FromJson(x, bind.NamedScop, new encoding.Path(scop, name));
                    break;
                case 'template':
                    this.context.FromJson(x, bind.NamedScop, new encoding.Path(scop, name));
                    break;
                case Syntaxer_1.Parser.CToken.functionCall:
                    break;
                default:
                    break;
            }
            return scop;
        };
        JsonFileParser.parseNamespace = function (x) {
        };
        JsonFileParser.parseNamedScop = function (x) {
        };
        JsonFileParser.context = new encoding.SerializationContext(true);
        return JsonFileParser;
    }());
    var injecter;
    (function (injecter) {
        var DObject = (function () {
            function DObject(obj) {
                this.obj = obj;
                this.props = {};
            }
            DObject.prototype.create = function (prop, p) {
                var x = this.props[prop];
                if (x)
                    return x;
                return this.props[prop] = new IEvent(this, prop, p);
            };
            DObject.prototype.get = function (prop) {
                return this.props[prop];
            };
            DObject.create = function (obj) {
                var t = this.store.Get(obj);
                if (!t)
                    this.store.Set(obj, t = new DObject(obj));
                return t;
            };
            DObject.get = function (obj) {
                return this.store.Get(obj);
            };
            DObject.prototype.observe = function (p, prop, callback, owner) {
                p = Object.getOwnPropertyDescriptor(this.obj, prop);
                if (!p || (p && p.configurable && !p.get)) {
                    var e = this.create(prop, p);
                    if (!p) {
                        Object.defineProperty(this.obj, prop, p = { get: e.get, set: e.set });
                    }
                    else if (p.set)
                        Object.defineProperty(this.obj, prop, { get: p.get, set: e.set, enumerable: p.enumerable });
                    else
                        Object.defineProperty(this.obj, prop, { get: e.get, set: e.set, enumerable: p.enumerable });
                    var pb;
                    e.callback.push(pb = new bind.PropBinding(callback, owner));
                    return pb;
                }
                return null;
            };
            Object.defineProperty(DObject.prototype, "Obj", {
                set: function (v) {
                    for (var i in this.props)
                        this.props[i].set(v && v[i]);
                },
                enumerable: true,
                configurable: true
            });
            DObject.prototype.unobserve = function (prop, stat, owner) {
                var e = this.get(prop);
                if (e)
                    return e.UnObserve(stat, owner);
                return false;
            };
            DObject.store = new collection.Dictionary("");
            return DObject;
        }());
        var IEvent = (function () {
            function IEvent(parent, prop, p) {
                this.parent = parent;
                this.p = p;
                this.callback = [];
                this.prop = { Name: prop, Type: Object, Index: -1 };
                this.set = this.set.bind(this);
                this.get = this.get.bind(this);
                this.value = parent.obj[prop];
            }
            IEvent.prototype.getInstCallback = function () { return this.callback; };
            IEvent.prototype.set = function (v) {
                var o = this.value;
                if (v == o)
                    return;
                this.value = v;
                this.p && this.p.set && this.p.set.call(this.parent.obj, v);
                this.onPropertyChanged(o, v);
            };
            IEvent.prototype.get = function () {
                if (this.p && this.p.get)
                    this.p.get.call(this.parent.obj);
                return this.value;
            };
            IEvent.prototype.onPropertyChanged = function (o, v) {
                var e = bind.EventArgs.New(this.prop, this.parent.obj, o, v);
                for (var i = 0; i < this.callback.length; i++) {
                    var c = this.callback[i];
                    helper.TryCatch(c, c.handleEvent, void 0, [e]);
                }
            };
            IEvent.prototype.addEventListener = function (callback, owner) {
                this.callback.push(new bind.PropBinding(callback, owner));
            };
            IEvent.prototype.UnObserve = function (y, owner) {
                if (this) {
                    if (typeof y !== 'function') {
                        var i = this.callback.indexOf(y);
                        if (i != -1) {
                            y.Dispose();
                            return this.callback.splice(i, 1);
                        }
                    }
                    else {
                        var t, j;
                        for (var i = this.callback.length - 1; i >= 0; i--) {
                            var p = this.callback[i];
                            if (p.Invoke == y) {
                                if (p.Owner === owner) {
                                    p.Dispose();
                                    this.callback.splice(i, 1);
                                    return true;
                                }
                                if (!t)
                                    t = p, j = i;
                            }
                        }
                        if (t) {
                            t.Dispose();
                            this.callback.splice(j, 1);
                            return true;
                        }
                    }
                }
                return false;
            };
            return IEvent;
        }());
        var ldobj;
        function observe(obj, prop, callback, owner) {
            prop = String(prop);
            if (obj instanceof bind.DObject) {
                var p_1 = obj.GetProperty(prop);
                if (p_1) {
                    ldobj = obj;
                    return obj.OnPropertyChanged(p_1, function (s, e) {
                        callback(e._new, e._old);
                    }, owner);
                }
            }
            var p = Object.getOwnPropertyDescriptor(obj, prop);
            if (!p || (p && p.configurable && !p.get)) {
                var dobj = DObject.create(obj);
                return dobj.observe(p, prop, callback, owner);
            }
            ldobj = null;
            return null;
        }
        injecter.observe = observe;
        function observePath(obj, props, callback, owner) {
            var path = new Array(props.length);
            var val;
            var o = obj;
            for (var i = 0; i < props.length; i++) {
                var v = o[props[i]];
                path.push({ propName: props[i], obj: null, value: v, pb: null });
                o = v;
            }
            rebuild(0);
            function rebuild(i) {
                var prevObj = obj;
                for (i = 0; i < props.length; i++) {
                    var prop = props[i];
                    var leaf = path[i];
                    var curObj = leaf.obj;
                    if (!curObj)
                        return;
                    if (leaf.pb) {
                        if (curObj instanceof DObject)
                            curObj.unobserve(leaf.propName, leaf.pb);
                        else
                            curObj.UnObserve(curObj.GetProperty(leaf.propName), leaf.pb);
                        leaf.pb = null;
                    }
                }
            }
            function dispose(i) {
                for (; i < path.length; i++) {
                    var p = path[i];
                    if (!p.obj)
                        return;
                    unobserve(p.obj, p.propName, p.pb);
                    p.pb = null;
                    p.value = null;
                }
            }
            function recalc(i) {
            }
            function onValueChanged(s, e) {
            }
        }
        injecter.observePath = observePath;
        function unobserve(obj, prop, stat, owner) {
            prop = String(prop);
            if (obj instanceof bind.DObject) {
                var p = obj.GetProperty(prop);
                if (p)
                    return obj.UnObserve(p, stat, owner);
            }
            var dobj = DObject.create(obj);
            if (!dobj)
                return false;
            dobj.unobserve(prop, stat, owner);
            var e = dobj.get(prop);
            if (e)
                return e.UnObserve(stat, owner);
            return false;
        }
        injecter.unobserve = unobserve;
        function _observe(prop, callback, owner) {
            if (!callback || !prop)
                return;
            return observe(this, typeof prop === 'string' ? prop : prop.Name, callback, owner);
        }
        function _unobserve(prop, callback, owner) {
            if (!callback || !prop)
                return;
            return unobserve(this, typeof prop === 'string' ? prop : prop.Name, callback, owner);
        }
        Object.defineProperty(Object.prototype, 'Observe', {
            writable: false, enumerable: false,
            value: _observe
        });
        Object.defineProperty(Object.prototype, 'UnObserve', {
            writable: false, enumerable: false,
            value: _unobserve
        });
    })(injecter = exports.injecter || (exports.injecter = {}));
    var Notification;
    (function (Notification) {
        var _store = {};
        var id = 0;
        function on(name, handler) {
            $defineProperty(handler, 'Id', { value: handler.Id || ++id, writable: false, configurable: false, enumerable: true });
            if (!_store[name])
                _store[name] = [handler];
            else
                _store[name].push(handler);
        }
        Notification.on = on;
        function fire(name, params) {
            var s = _store[name];
            if (!s || !s.length)
                return;
            var e = { data: params, name: name, handler: void 0 };
            params = params ? params.slice(0) : [];
            params.unshift(e);
            for (var i = 0; i < s.length; i++) {
                var h = s[i];
                e.handler = h;
                helper.TryCatch(h.owner || h, h.callback, void 0, params);
            }
        }
        Notification.fire = fire;
        function off(name, hndl_id) {
            var s = _store[name];
            if (!s || !s.length)
                return true;
            var j = s.indexOf(hndl_id);
            if (j == -1)
                for (var i = 0; i < s.length; i++) {
                    var h = s[i];
                    if (h.Id !== hndl_id)
                        continue;
                    j = i;
                    break;
                }
            if (j !== -1)
                s.splice(j, 1);
            return true;
        }
        Notification.off = off;
    })(Notification = exports.Notification || (exports.Notification = {}));
    var Attributes;
    (function (Attributes) {
        var AttributeTargets;
        (function (AttributeTargets) {
            AttributeTargets[AttributeTargets["Class"] = 2] = "Class";
            AttributeTargets[AttributeTargets["Object"] = 4] = "Object";
            AttributeTargets[AttributeTargets["Function"] = 8] = "Function";
            AttributeTargets[AttributeTargets["Property"] = 16] = "Property";
            AttributeTargets[AttributeTargets["All"] = -1] = "All";
        })(AttributeTargets = Attributes.AttributeTargets || (Attributes.AttributeTargets = {}));
        var __attributes = new Map();
        var __defs = new Map();
        function getAttributes(_target) {
            return __attributes.get(_target);
        }
        function setAttributeToClass(_target, _attribute, value) {
            var x = __attributes.get(_target);
            if (!x)
                __attributes.set(_target, x = new Map());
            x.set(_attribute, value);
        }
        function _declare(_target, value) {
            setAttributeToClass(_target, this, value);
        }
        function getData(_target) {
            return getAttributeOf(_target, this);
        }
        function asAttribute(attributer, e) {
            attributer['declare'] = _declare;
            attributer['getData'] = getData;
            __defs.set(attributer, e);
        }
        Attributes.asAttribute = asAttribute;
        function getAttributeDef(attr) {
            return __defs.get(attr);
        }
        Attributes.getAttributeDef = getAttributeDef;
        function check(attr, args) {
            var a = getAttributeDef(attr);
            if (!a)
                return true;
            var d = args[2];
            var n = args[1];
            var t = args[0];
            switch (a.Target) {
                case AttributeTargets.All:
                    return true;
                case AttributeTargets.Class:
                    return reflection.IsClass(t);
                case AttributeTargets.Function:
                    return !!(d && (typeof d.value === 'function'));
                case AttributeTargets.Object:
                    return !!reflection.IsInstance(t);
                case AttributeTargets.Property:
                    return !!d;
                default:
                    return false;
            }
        }
        Attributes.check = check;
        function _getAttributeOf(_target, _attribute) {
            var x = __attributes.get(_target);
            return x && x.get(_attribute);
        }
        function getAttributesOf(_target) {
            return __attributes.get(_target);
        }
        Attributes.getAttributesOf = getAttributesOf;
        function getAttributeOf(_target, _attribute) {
            var x = _getAttributeOf(_target, _attribute);
            if (!x) {
                var def = getAttributeDef(_attribute);
                if (def && def.Heritable) {
                    var types = reflection.GetBaseTypes(_target, Object);
                    for (var t in types)
                        if (x = _getAttributeOf(t, _attribute))
                            return x;
                }
            }
            return x;
        }
        Attributes.getAttributeOf = getAttributeOf;
    })(Attributes = exports.Attributes || (exports.Attributes = {}));
    var PaintThread;
    (function (PaintThread) {
        var JobsQueeStat;
        (function (JobsQueeStat) {
            JobsQueeStat[JobsQueeStat["Stoped"] = 0] = "Stoped";
            JobsQueeStat[JobsQueeStat["Waitting"] = 1] = "Waitting";
            JobsQueeStat[JobsQueeStat["Executing"] = 2] = "Executing";
        })(JobsQueeStat || (JobsQueeStat = {}));
        var _stat = 0;
        var _array = new Array(100);
        var currIndex = -1;
        function Push(ins, e, scop) {
            if (!ins)
                throw "Argument inst is null";
            switch (_stat) {
                case JobsQueeStat.Stoped:
                    _stat = JobsQueeStat.Waitting;
                    _defreredExecution();
                case JobsQueeStat.Waitting:
                    _array[++currIndex] = { ins: ins, e: e, scop: scop };
                    break;
                case JobsQueeStat.Executing:
                    _execute1({ ins: ins, e: e, scop: scop });
                    break;
            }
        }
        PaintThread.Push = Push;
        function OnPaint(task) {
            if (!task.method)
                throw "Argument inst is null";
            switch (_stat) {
                case JobsQueeStat.Stoped:
                    _stat = JobsQueeStat.Waitting;
                    _defreredExecution();
                case JobsQueeStat.Waitting:
                    _array[++currIndex] = task;
                    break;
                case JobsQueeStat.Executing:
                    _execute2(task);
                    break;
            }
        }
        PaintThread.OnPaint = OnPaint;
        function _defreredExecution() {
            var raf = window.requestAnimationFrame
                || (window).webkitRequestAnimationFrame
                || window.mozRequestAnimationFrame
                || window.msRequestAnimationFrame;
            if (raf) {
                raf(_executeAll);
            }
            else
                thread.Dispatcher.OnIdle(PaintThread, _executeAll, true);
        }
        function _execute1(e) {
            try {
                var j = e.ins.job;
                j && j.Todo && j.Todo(e.ins, e.e);
            }
            catch (_a) { }
        }
        function _execute2(e) {
            try {
                var x = e;
                x.method && x.method.apply(x.owner, x.args);
            }
            catch (_a) { }
        }
        function _execute(e) {
            try {
                if (e.ins) {
                    var j = e.ins.job;
                    j && j.Todo && j.Todo(e.ins, e.e);
                }
                else {
                    var x = e;
                    x.method && x.method.apply(x.owner, x.args);
                }
            }
            catch (_a) { }
        }
        function _executeAll() {
            _stat = JobsQueeStat.Executing;
            for (; currIndex >= 0; currIndex--)
                _execute(_array[currIndex]);
            _stat = JobsQueeStat.Stoped;
        }
    })(PaintThread = exports.PaintThread || (exports.PaintThread = {}));
    var JobsQuee1;
    (function (JobsQuee1) {
        var JobsQueeStat;
        (function (JobsQueeStat) {
            JobsQueeStat[JobsQueeStat["Stoped"] = 0] = "Stoped";
            JobsQueeStat[JobsQueeStat["Waitting"] = 1] = "Waitting";
            JobsQueeStat[JobsQueeStat["Executing"] = 2] = "Executing";
        })(JobsQueeStat || (JobsQueeStat = {}));
        var _stat = 0;
        var _array = new Array(100);
        var currIndex = -1;
        function Push(scop, prop, value) {
            switch (_stat) {
                case JobsQueeStat.Stoped:
                    _stat = JobsQueeStat.Waitting;
                    _defreredExecution();
                case JobsQueeStat.Waitting:
                    var t = _array[++currIndex];
                    if (t) {
                        t.prop = prop;
                        t.value = value;
                        t.scop = scop;
                    }
                    else
                        _array[currIndex] = { prop: prop, scop: scop, value: value };
                    break;
                case JobsQueeStat.Executing:
                    _execute({ prop: prop, scop: scop, value: value });
                    break;
            }
        }
        JobsQuee1.Push = Push;
        function _defreredExecution() {
            var raf = window.requestAnimationFrame
                || (window).webkitRequestAnimationFrame
                || window.mozRequestAnimationFrame
                || window.msRequestAnimationFrame;
            if (raf) {
                raf(_defreredExecution);
            }
            else if (!thread.Dispatcher.InIdle())
                thread.Dispatcher.OnIdle(PaintThread, _executeAll, true);
            else
                thread.Dispatcher.call(JobsQuee1, function () {
                    thread.Dispatcher.OnIdle(PaintThread, _executeAll, true);
                });
        }
        function _execute(e) {
            try {
                e.scop.set(e.prop, e.value);
            }
            catch (_a) { }
        }
        function _executeAll() {
            _stat = JobsQueeStat.Executing;
            for (; currIndex >= 0; currIndex--)
                _execute(_array[currIndex]);
            _stat = JobsQueeStat.Stoped;
        }
    })(JobsQuee1 || (JobsQuee1 = {}));
    bind.NamedScop.Create('window', window, 0);
});
define("sys/defs", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("sys/Consts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Consts;
    (function (Consts) {
        Consts.IDENT = '(?:' + '[a-zA-Z_$][\\w.:$\\-*]*' + ')';
        Consts.NUMBER = '(?:' + '[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';
        Consts.SQUOTE_STRING = '(?:' + '\'(?:[^\'\\\\]|\\\\.)*\'' + ')';
        Consts.DQUOTE_STRING = '(?:' + '"(?:[^"\\\\]|\\\\.)*"' + ')';
        Consts.STRING = '(?:' + Consts.SQUOTE_STRING + '|' + Consts.DQUOTE_STRING + ')';
        Consts.ARGUMENT = '(?:' + Consts.IDENT + '|' + Consts.NUMBER + '|' + Consts.STRING + '\\s*' + ')';
        Consts.ARGUMENTS = '(?:' + Consts.ARGUMENT + '(?:,\\s*' + Consts.ARGUMENT + ')*' + ')';
        Consts.ARGUMENT_LIST = '(?:' + '\\(\\s*' + '(?:' + Consts.ARGUMENTS + '?' + ')' + '\\)\\s*' + ')';
        Consts.BINDING = '(' + Consts.IDENT + '\\s*' + Consts.ARGUMENT_LIST + '?' + ')';
        Consts.OPEN_BRACKET = '(\\[\\[|{{)' + '\\s*';
        Consts.CLOSE_BRACKET = '(?:]]|}})';
        Consts.NEGATE = '(?:(!)\\s*)?';
        Consts.EXPRESSION = Consts.OPEN_BRACKET + Consts.NEGATE + Consts.BINDING + Consts.CLOSE_BRACKET;
        Consts.IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);
        Consts.css = {
            comments: /\/\*[^*]*\*+([^\/*][^*]*\*+)*\//gim,
            port: /@import[^;]*;/gim,
            customProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,
            mixinProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,
            mixinApply: /@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,
            varApply: /[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,
            keyframesRule: /^@[^\s]*keyframes/,
            multipleSpaces: /\s+/g
        };
    })(Consts = exports.Consts || (exports.Consts = {}));
    var ModuleStat;
    (function (ModuleStat) {
        ModuleStat[ModuleStat["New"] = 0] = "New";
        ModuleStat[ModuleStat["Downloading"] = 1] = "Downloading";
        ModuleStat[ModuleStat["Downloaded"] = 2] = "Downloaded";
        ModuleStat[ModuleStat["Defining"] = 3] = "Defining";
        ModuleStat[ModuleStat["Defined"] = 4] = "Defined";
        ModuleStat[ModuleStat["Executing"] = 5] = "Executing";
        ModuleStat[ModuleStat["Executed"] = 6] = "Executed";
        ModuleStat[ModuleStat["Failed"] = 7] = "Failed";
    })(ModuleStat = exports.ModuleStat || (exports.ModuleStat = {}));
    Object.freeze(Consts);
});
define("sys/db", ["require", "exports", "sys/Corelib", "sys/System", "context"], function (require, exports, Corelib_4, System_2, context_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var db;
    (function (db_1) {
        var __SUPPORT_OPENDATABASE__ = typeof openDatabase === 'function';
        var Database = (function () {
            function Database() {
                this.databaseName = "data_store";
                this.databaseDesc = "Data store";
                this.sqlLiteDBVersion = "1.0";
                this.FIVE_MB = 5120;
                this.tableName = "data-store";
                this._tables__ = new _Tables__(this);
                this.shemas = new DatabaseTable(this, "__tables__", _Table__);
                this.OnLoad = new Corelib_4.bind.FEventListener(0, true);
                this.queue = [];
                this._commands = [];
                this._current = { value: null };
                this._IsExecuting = false;
                this._job = Corelib_4.thread.Dispatcher.cretaeJob(this._runCmd, [], this, false);
                this._store = {};
                this.__info__ = new DatabaseTable(this, '__info__', __ExeInfo__);
            }
            Database.prototype.initialize = function () {
                var _this_1 = this;
                if (!__SUPPORT_OPENDATABASE__)
                    return this;
                this.database = openDatabase(this.databaseName, this.sqlLiteDBVersion, this.databaseDesc, this.FIVE_MB);
                this._transaction = this._transaction.bind(this);
                this._OnError = this._OnError.bind(this);
                this._OnSuccess = this._OnSuccess.bind(this);
                this.shemas.CreateIfNotExist(function (ise, s) {
                    _this_1.__info__.CreateIfNotExist(function (iss, s) {
                        _this_1.shemas.LoadTableFromDB(_this_1._tables__, function (succ) {
                            _this_1.IsLoaded = true;
                            _this_1.OnLoad.PInvok(0, [_this_1], _this_1);
                        });
                    });
                });
                return this;
            };
            Database.prototype.Push = function (cmd) {
                var _this_1 = this;
                if (!__SUPPORT_OPENDATABASE__)
                    return;
                if (cmd.async) {
                    this.queue.push(cmd);
                    if (this.isExecuting)
                        return;
                    this.queue = [];
                    this.isExecuting = true;
                    var oldQuee = this.queue;
                    this.database.transaction(function (db) {
                        for (var i = 0; i < _this_1.queue.length; i++) {
                            if (typeof _this_1.queue[i].cmd === 'string')
                                _this_1._exeScalSQL(db, _this_1.queue[i]);
                            else
                                _this_1._exeVectorSQL(db, _this_1.queue[i]);
                        }
                        _this_1.isExecuting = false;
                    }, function (err) {
                        for (var i = 0; i < oldQuee.length; i++) {
                            var q = oldQuee[i];
                            if (typeof q.cmd === 'string')
                                q.callback && q.callback(false, _this_1, err);
                            else
                                q.callback && q.callback(0, false, _this_1, err);
                        }
                    });
                }
                else {
                    this.database.transaction(function (db) {
                        if (typeof cmd.cmd === 'string')
                            _this_1._exeScalSQL(db, cmd);
                        else
                            _this_1._exeVectorSQL(db, cmd);
                    }, function (err) {
                        if (typeof cmd.cmd === 'string')
                            cmd.callback && cmd.callback(false, _this_1, err);
                        else
                            cmd.callback && cmd.callback(0, false, _this_1, err);
                    });
                }
            };
            Database.prototype.execute = function (async, command, callback) {
                this.Push({ cmd: command, callback: callback, async: async });
            };
            Database.prototype._exeScalSQL = function (db, cmd) {
                var _this_1 = this;
                db.executeSql(cmd.cmd, [], cmd.callback ? function (s, r) { cmd.callback(true, _this_1, s, r); cmd.callback = undefined; } : void 0);
            };
            Database.prototype._exeVectorSQL = function (db, cmd) {
                var _this_1 = this;
                var j = -1;
                var _callback = cmd.callback ? function (s, r) {
                    j++;
                    cmd.callback && cmd.callback(j, true, _this_1, s, r);
                    if (j == commands.length - 1)
                        cmd.callback = undefined;
                } : void 0;
                var commands = cmd.cmd;
                for (var i = 0; i < commands.length; i++)
                    db.executeSql(commands[i], [], _callback);
            };
            Database.prototype.executes = function (async, commands, callback) {
                this.Push({ async: async, cmd: commands, callback: callback });
            };
            Database.prototype.syncExecute = function (command, callback) {
                if (!__SUPPORT_OPENDATABASE__)
                    return;
                this._Push({ cmd: command, callback: callback });
            };
            Database.prototype._Push = function (cmd) {
                this._commands.push(cmd);
                if (!this._IsExecuting)
                    return this._next();
            };
            Database.prototype._runCmd = function () {
                this.database.transaction(this._transaction, this._OnError);
            };
            Database.prototype._transaction = function (db) {
                db.executeSql(this._current.value.cmd, [], this._OnSuccess);
            };
            Database.prototype._OnSuccess = function (sql, rslt) {
                try {
                    this._current.value.callback && this._current.value.callback(true, this, sql, rslt);
                }
                catch (e) {
                }
                this._next();
            };
            Database.prototype._OnError = function (sqlE) {
                try {
                    this._current.value.callback && this._current.value.callback(false, this, sqlE);
                }
                catch (e) {
                }
                this._next();
            };
            Database.prototype._next = function () {
                if (this._commands.length === 0) {
                    this._IsExecuting = false;
                    return;
                }
                this._IsExecuting = true;
                this._current.value = this._commands.pop();
                Corelib_4.thread.Dispatcher.Push(this._job, [this._current]);
            };
            Database.prototype.CreateTable = function (name, rowType) {
                if (!__SUPPORT_OPENDATABASE__)
                    return this;
                var x = new DatabaseTable(this, name, rowType);
                var tbl = {
                    table: x,
                    info: this._tables__.gettableByName(name, rowType),
                    _dbInfo_: this.shemas
                };
                x.CreateIfNotExist();
                this._store[name] = tbl;
                return this;
            };
            Database.prototype.Get = function (tableName) {
                return this._store[tableName];
            };
            Database.prototype.MakeUpdate = function (tableName, date) {
                if (!__SUPPORT_OPENDATABASE__)
                    return;
                if (date == null)
                    date = 0;
                if (typeof date !== 'number')
                    date = date.valueOf();
                var q = this._store[tableName];
                if (!q)
                    return;
                q.info.LastUpdate = date;
                q._dbInfo_.ExecuteOperation({ op: Operation.Update, row: q.info }, function (a, b, c, d) {
                });
            };
            return Database;
        }());
        db_1.Database = Database;
        var SQLInstructureBuilder = (function () {
            function SQLInstructureBuilder(tableName, type) {
                this.tableName = tableName;
                this.type = type;
                this._map = {};
                this.init();
            }
            Object.defineProperty(SQLInstructureBuilder.prototype, "Key", {
                get: function () {
                    return this._key;
                },
                enumerable: true,
                configurable: true
            });
            SQLInstructureBuilder.prototype.init = function () {
                var flds = Corelib_4.bind.DObject.getFields(this.type);
                for (var i = 0; i < flds.length; i++) {
                    var fld = flds[i];
                    if (fld.IsKey)
                        this._key = fld;
                    this._map[fld.Name] = fld.Type;
                }
                this.cretaeCmd = this.getCreateCmd();
                this.insertCmd = this.getInsertCmd();
                this.updateCmd = this.getUpdateCmd();
                this.selectCmd = this.getSelectCmd();
                this.deleteCmd = this.getDeleteCmd();
            };
            SQLInstructureBuilder.prototype.getSB = function (s) {
                return Corelib_4.basic.CompileString(s, this.getDbValue, this);
            };
            SQLInstructureBuilder.prototype.getCreateCmd = function () {
                var flds = Corelib_4.bind.DObject.getFields(this.type);
                var s = "CREATE TABLE IF NOT EXISTS [" + this.tableName + "] (";
                for (var i = 0; i < flds.length; i++) {
                    var fld = flds[i];
                    var type = this.getTypeName(fld.Type);
                    if (type == undefined) {
                        console.error("Filed [" + fld.Name + "] of table " + this.tableName + " cannot be created");
                        continue;
                    }
                    if (i !== 0)
                        s += ",";
                    s += "[" + fld.Name + "] " + type + ((fld.Attribute & Corelib_4.bind.PropertyAttribute.IsKey) === Corelib_4.bind.PropertyAttribute.IsKey ? " PRIMARY KEY" : " ");
                }
                s += ")";
                return this.getSB(s);
            };
            SQLInstructureBuilder.prototype.getInsertCmd = function () {
                var flds = Corelib_4.bind.DObject.getFields(this.type);
                var names = "", values = "";
                for (var i = 0; i < flds.length; i++) {
                    var fld = flds[i];
                    if (i !== 0) {
                        names += ",";
                        values += ",";
                    }
                    names += "[" + fld.Name + "]";
                    values += "@" + fld.Name;
                }
                return this.getSB("INSERT INTO [" + this.tableName + "] (" + names + ") VALUES (" + values + ')');
            };
            SQLInstructureBuilder.prototype.getUpdateCmd = function () {
                var flds = Corelib_4.bind.DObject.getFields(this.type);
                var inst = "";
                var key = null;
                for (var i = 0; i < flds.length; i++) {
                    var fld = flds[i];
                    if (i !== 0)
                        inst += ",";
                    if (!key && fld.IsKey)
                        key = fld;
                    inst += "[" + fld.Name + "] = @" + fld.Name + "";
                }
                inst = "UPDATE [" + this.tableName + "] SET " + inst + " WHERE [" + key.Name + "] = @" + key.Name;
                return this.getSB(inst);
            };
            SQLInstructureBuilder.prototype.getSelectCmd = function () {
                return this.getSB("SELECT * FROM [" + this.tableName + "] WHERE [" + this._key.Name + "] = @" + this._key.Name + " LIMIT 1");
            };
            SQLInstructureBuilder.prototype.getDeleteCmd = function () {
                return this.getSB("DELETE FROM [" + this.tableName + "] WHERE [" + this._key.Name + "] = @" + this._key.Name);
            };
            SQLInstructureBuilder.prototype.getTypeName = function (type) {
                if (type === String)
                    return 'TEXT';
                if (type === Number || type === Date)
                    return 'Number';
                if (type === Boolean)
                    return 'Boolean';
                if (Corelib_4.reflection.IsInstanceOf(type, System_2.sdata.DataRow))
                    return 'number';
                if (Corelib_4.reflection.IsInstanceOf(type, System_2.sdata.DataTable))
                    return undefined;
                console.error("Unresolved Type = " + type, type);
                throw "unresolved type";
            };
            SQLInstructureBuilder.prototype.getDbValue = function (name, v) {
                if (v == null)
                    return 'null';
                var _this = this.params;
                var type = _this._map[name];
                switch (type) {
                    case String:
                        return v == null ? "null" : "'" + v + "'";
                    case Number:
                        return _this.getNumber(v);
                    case Boolean:
                        return v == undefined ? 'null' : v ? '1' : '0';
                    case Date:
                        return _this.getNumber(v && v.valueOf());
                    default:
                        if (Corelib_4.reflection.IsInstanceOf(type, System_2.sdata.DataRow)) {
                            var id = v && v.Id;
                            if (id == null)
                                return 'null';
                            return String(id);
                        }
                        else
                            return undefined;
                }
            };
            SQLInstructureBuilder.prototype.getNumber = function (v) {
                return v == null || isNaN(v) ? 'null' : String(Math.abs(v) > Number.MAX_VALUE ? Number.MAX_VALUE : v);
            };
            SQLInstructureBuilder.parseBool = function (v) {
                if (v == null)
                    return null;
                switch (typeof v) {
                    case 'string':
                        if (v === 'true')
                            return true;
                        if (v === 'false')
                            return false;
                        v = parseFloat(v);
                        return !!v;
                    case 'number':
                        break;
                    case 'boolean':
                        return v;
                    default:
                        return !!v;
                }
            };
            SQLInstructureBuilder.prototype.getJsValue = function (name, v) {
                var _this = this.params;
                var type = _this._map[name];
                switch (type) {
                    case String:
                        return v;
                    case Number:
                        return typeof v === 'string' ? parseFloat(v) : v;
                    case Boolean:
                        return SQLInstructureBuilder.parseBool(v);
                    case Date:
                        return v === null ? SQLInstructureBuilder.emptyDate : new Date(typeof v === 'string' ? parseInt(v) : v);
                    default:
                        if (Corelib_4.reflection.IsInstanceOf(type, System_2.sdata.DataRow)) {
                            var id = v && v.Id;
                            if (id == null)
                                return 'null';
                            return String(id);
                        }
                        else
                            return undefined;
                }
            };
            SQLInstructureBuilder.prototype.getAvaibleCmd = function (extCols) {
                if (extCols == null)
                    extCols = "[" + this._key.Name + "]";
                else if (extCols == '*')
                    extCols = "*";
                else if (typeof extCols !== 'string')
                    extCols = this.jointCols(extCols);
                return "SELECT " + extCols + " FROM [" + this.tableName + "]";
            };
            SQLInstructureBuilder.prototype.jointCols = function (cols) {
                if (cols.length == 0)
                    return "";
                if (cols.length == 1)
                    return "[" + cols[0] + "]";
                return "[" + cols.join("],[") + "]";
            };
            SQLInstructureBuilder.emptyDate = new Date(0);
            return SQLInstructureBuilder;
        }());
        db_1.SQLInstructureBuilder = SQLInstructureBuilder;
        var DatabaseTable = (function () {
            function DatabaseTable(database, tableName, type) {
                this.database = database;
                if (!Corelib_4.reflection.IsInstanceOf(type, Corelib_4.bind.DObject))
                    throw "Type not implimented";
                this.builder = new SQLInstructureBuilder(tableName, type);
            }
            DatabaseTable.prototype.Insert = function (row, callback) {
                this.database.syncExecute(this.builder.insertCmd.apply(row), callback);
            };
            DatabaseTable.prototype.Delete = function (row, callback) {
                this.database.syncExecute(this.builder.deleteCmd.apply(row), callback);
            };
            DatabaseTable.prototype.Update = function (row, callback) {
                this.database.syncExecute(this.builder.updateCmd.apply(row), callback);
            };
            DatabaseTable.prototype.Select = function (row, callback) {
                this.database.syncExecute(this.builder.selectCmd.apply(row), callback);
            };
            DatabaseTable.prototype.Create = function (callback) {
                this.database.syncExecute(this.builder.cretaeCmd.apply({}), callback);
            };
            DatabaseTable.prototype.ExecuteOperation = function (cm, callback) {
                var _this_1 = this;
                var cmd = this.getCmd(cm);
                var reExec;
                this.database.execute(false, cmd, reExec = function (iss, sb, sql, rslt) {
                    iss = iss && !((cm.op == Operation.Update || cm.op == Operation.UpdateOnly) && rslt.rowsAffected == 0);
                    if (!iss)
                        do {
                            if (cm.op == 2)
                                cm = { op: 4, row: cm.row };
                            else if (cm.op == 1)
                                cm = { op: 5, row: cm.row };
                            else
                                break;
                            return _this_1.database.execute(false, _this_1.getCmd(cm), reExec);
                        } while (false);
                    if (cm)
                        callback && callback(iss, sb, sql, rslt);
                });
            };
            DatabaseTable.prototype.getAvaible = function (exCols, callback) {
                this.database.execute(false, this.builder.getAvaibleCmd(exCols), callback);
            };
            DatabaseTable.prototype.ExecuteOperations = function (ops, callback) {
                var _this_1 = this;
                if (ops.length == 0)
                    return callback && callback(true, 0);
                var ccmds = 0;
                var nfails = 0;
                var reExec;
                this.ExecuteOperation(ops[ccmds], reExec = function (iss, db, sql, rslt) {
                    if (!iss)
                        nfails++;
                    ccmds++;
                    if (ops.length == ccmds)
                        return callback && callback(nfails == 0, nfails);
                    else
                        _this_1.ExecuteOperation(ops[ccmds], reExec);
                });
            };
            DatabaseTable.prototype.ExecuteOperations1 = function (ops, callback) {
                var id = DatabaseTable.__count;
                if (ops.length == 0)
                    return callback && callback(true, 0);
                for (var i = 0; i < ops.length; i++) {
                    ops[i] = this.getCmd(ops[i]);
                }
                var nsuccess = [];
                var reExec;
                this.database.executes(false, ops, reExec = function (j, iss, sb, sql, rslt) {
                    if (!iss)
                        nsuccess.push(ops[j]);
                    if (j == ops.length - 1)
                        return callback && callback(nsuccess.length != 0, nsuccess.length);
                });
            };
            DatabaseTable.prototype.UpdateTableToDB = function (tbl, callback, full) {
                var _this_1 = this;
                var tbls = tbl instanceof System_2.sdata.DataTable ? tbl.AsList() : tbl;
                var toInsert = tbls.slice(0);
                var eI = toInsert.map(function (c) { return c.Id; });
                var cmds = [];
                var toSkip = 0;
                if (!full && !eI.length)
                    return;
                this.getAvaible(["Id", "LastModified"], function (iss, s, sql, rslt) {
                    if (rslt == null)
                        return console.error('HardError');
                    var rs = rslt.rows;
                    for (var i = 0; i < rs.length; i++) {
                        var dbRow = rs[i];
                        var j = eI.indexOf(dbRow.Id);
                        if (j == -1) {
                            if (full)
                                cmds.push({ row: srcRow, op: 3 });
                        }
                        else {
                            var lm = dbRow.LastModified || 0;
                            var srcRow = tbls[j];
                            if (dbRow.LastModified < srcRow.LastModified) {
                                cmds.push({ row: srcRow, op: 1 });
                            }
                        }
                        var x;
                        while ((x = toInsert.indexOf(srcRow)) != -1)
                            toInsert.splice(x, 1);
                    }
                    for (var i = 0; i < toInsert.length; i++)
                        cmds.push({ row: toInsert[i], op: 2 });
                    _this_1.ExecuteOperations1(cmds, callback);
                });
            };
            DatabaseTable.prototype.LoadTableFromDB = function (tbl, callback) {
                var _this_1 = this;
                var x = new Corelib_4.encoding.SerializationContext(true);
                this.getAvaible('*', function (iss, s, sql, rslt) {
                    if (iss) {
                        var rs = rslt.rows;
                        var i = 0;
                        var async = function () {
                            var l = i + 100;
                            if (l > rs.length)
                                l = rs.length;
                            for (; i < l; i++) {
                                var dbRow = rs[i];
                                tbl.Add(tbl.CreateNewItem(dbRow.Id).FromJson(dbRow, x));
                            }
                            if (l < rs.length)
                                Corelib_4.thread.Dispatcher.call(this, async);
                            else
                                callback && callback(iss);
                        };
                        Corelib_4.thread.Dispatcher.call(_this_1, async);
                    }
                    else
                        callback && callback(iss);
                });
            };
            DatabaseTable.prototype.getCmd = function (op) {
                switch (op.op) {
                    case 0:
                        return null;
                    case 1:
                    case 4:
                        return this.builder.updateCmd.apply(op.row);
                    case 2:
                    case 5:
                        return this.builder.insertCmd.apply(op.row);
                    case 3:
                        return this.builder.deleteCmd.apply(op.row);
                    default:
                }
            };
            DatabaseTable.prototype.MakeUpdate = function (date) {
                this.database.MakeUpdate(this.builder.tableName, date);
            };
            DatabaseTable.prototype.IsExist = function (callback) {
                this.database.execute(false, "SELECT * FROM [" + this.builder.tableName + "] limit 0", function (iss, db) {
                    callback && callback(iss);
                });
            };
            DatabaseTable.prototype.CreateIfNotExist = function (callback) {
                var _this_1 = this;
                this.IsExist(function (exist) {
                    if (exist) {
                        _this_1.Created = true;
                        return callback && callback(true, _this_1);
                    }
                    _this_1.Create(function (iss, db, sql) {
                        _this_1.Created = iss;
                        return callback && callback(iss, _this_1);
                    });
                });
            };
            DatabaseTable.__count = 1;
            return DatabaseTable;
        }());
        db_1.DatabaseTable = DatabaseTable;
        var _Table__ = (function (_super) {
            __extends(_Table__, _super);
            function _Table__(table) {
                var _this_1 = _super.call(this, Corelib_4.basic.New()) || this;
                _this_1.table = table;
                if (table) {
                    _this_1.Type = context_4.context.NameOf(table.builder.type);
                    _this_1.TableName = table.builder.tableName;
                }
                return _this_1;
            }
            _Table__.prototype.getStore = function () {
                return _Table__.store;
            };
            _Table__.__fields__ = function () { return [this.DPTableName, this.DPType, this.DPLastUpdate]; };
            _Table__.prototype.onPropertyChanged = function (ev) {
            };
            _Table__.store = new Corelib_4.collection.Dictionary("_Table__");
            _Table__.DPTableName = Corelib_4.bind.DObject.CreateField("TableName", String);
            _Table__.DPType = Corelib_4.bind.DObject.CreateField("Type", String);
            _Table__.DPLastUpdate = Corelib_4.bind.DObject.CreateField("LastUpdate", Number);
            return _Table__;
        }(System_2.sdata.QShopRow));
        db_1._Table__ = _Table__;
        var _Tables__ = (function (_super) {
            __extends(_Tables__, _super);
            function _Tables__(database) {
                var _this_1 = _super.call(this, null, _Table__, function (id) { return new _Table__(null); }) || this;
                _this_1.database = database;
                return _this_1;
            }
            _Tables__.prototype.gettableByName = function (name, type) {
                for (var i = 0; i < this._list.length; i++) {
                    if (this._list[i].TableName == name)
                        return this._list[i];
                }
                var tbl = new _Table__(this.database.shemas);
                tbl.Id = Corelib_4.basic.New();
                tbl.Type = context_4.context.NameOf(type);
                tbl.TableName = name;
                tbl.LastUpdate = 1;
                tbl.LastModified = new Date(0);
                this.Add(tbl);
                this.database.shemas.ExecuteOperation({ op: Operation.Insert, row: tbl });
                return tbl;
            };
            return _Tables__;
        }(System_2.sdata.DataTable));
        db_1._Tables__ = _Tables__;
        var __ExeInfo__ = (function (_super) {
            __extends(__ExeInfo__, _super);
            function __ExeInfo__() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            __ExeInfo__.__fields__ = function () { return [this.DPCount]; };
            __ExeInfo__.prototype.getStore = function () {
                return null;
            };
            __ExeInfo__.prototype.Update = function () {
                throw new Error("Method not implemented.");
            };
            __ExeInfo__.prototype.Upload = function () {
                throw new Error("Method not implemented.");
            };
            __ExeInfo__.DPCount = Corelib_4.bind.DObject.CreateField("Count", Number);
            return __ExeInfo__;
        }(System_2.sdata.DataRow));
        db_1.__ExeInfo__ = __ExeInfo__;
        var __Info__ = (function (_super) {
            __extends(__Info__, _super);
            function __Info__() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            __Info__.prototype.c = function () {
            };
            return __Info__;
        }(System_2.sdata.DataTable));
        var Operation;
        (function (Operation) {
            Operation[Operation["None"] = 0] = "None";
            Operation[Operation["Update"] = 1] = "Update";
            Operation[Operation["Insert"] = 2] = "Insert";
            Operation[Operation["Delete"] = 3] = "Delete";
            Operation[Operation["UpdateOnly"] = 4] = "UpdateOnly";
            Operation[Operation["InsertOnly"] = 5] = "InsertOnly";
        })(Operation = db_1.Operation || (db_1.Operation = {}));
    })(db = exports.db || (exports.db = {}));
});
define("sys/Decorators", ["require", "exports", "sys/Corelib"], function (require, exports, corelib_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function AsAPI(apiName, __prototype__) {
        return function (target, propertyKey, descriptor) {
            target = target[propertyKey];
            if (!corelib_2.reflection.IsPrototype(target))
                throw 'Invalid Implimentation of property Attribute';
            if (corelib_2.reflection.IsClass(target))
                throw "invalid params type";
            if (typeof target !== 'function')
                throw "invalid params type";
            corelib_2.Api.RegisterApiCallback({
                Name: apiName,
                DoApiCallback: target,
            });
        };
    }
    exports.AsAPI = AsAPI;
});
define("sys/Dom", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var j = {
        "[object Boolean]": "boolean",
        "[object Number]": "number",
        "[object String]": "string",
        "[object Function]": "function",
        "[object Array]": "array",
        "[object Date]": "date",
        "[object RegExp]": "regexp",
        "[object Object]": "object",
        "[object Error]": "error",
        "[object Symbol]": "symbol"
    };
    var k = j.toString;
    var Dom;
    (function (Dom) {
        function isWindow(a) {
            return null != a && a === a.window;
        }
        function Sb(a) {
            return isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
        }
        function type(a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? j[k.call(a)] || "object" : typeof a;
        }
        function isFunction(a) {
            return "function" === type(a);
        }
        function offset(f) {
            if (f) {
                if (f.getClientRects().length) {
                    var d = f.getBoundingClientRect();
                    if (d.width || d.height) {
                        var e = f.ownerDocument;
                        var c = Sb(e);
                        var b = e.documentElement;
                        return {
                            top: d.top + c.pageYOffset - b.clientTop,
                            left: d.left + c.pageXOffset - b.clientLeft
                        };
                    }
                    return d;
                }
                return { top: 0, left: 0 };
            }
        }
        Dom.offset = offset;
        function elementInViewport(el) {
            var top = el.offsetTop;
            var left = el.offsetLeft;
            var width = el.offsetWidth;
            var height = el.offsetHeight;
            while (el.offsetParent) {
                el = el.offsetParent;
                top += el.offsetTop;
                left += el.offsetLeft;
            }
            return (top < (window.pageYOffset + window.innerHeight) &&
                left < (window.pageXOffset + window.innerWidth) &&
                (top + height) > window.pageYOffset &&
                (left + width) > window.pageXOffset);
        }
        Dom.elementInViewport = elementInViewport;
        function elementEntirelyInViewport(el) {
            var top = el.offsetTop;
            var left = el.offsetLeft;
            var width = el.offsetWidth;
            var height = el.offsetHeight;
            while (el.offsetParent) {
                el = el.offsetParent;
                top += el.offsetTop;
                left += el.offsetLeft;
            }
            return (top >= window.pageYOffset &&
                left >= window.pageXOffset &&
                (top + height) <= (window.pageYOffset + window.innerHeight) &&
                (left + width) <= (window.pageXOffset + window.innerWidth));
        }
        Dom.elementEntirelyInViewport = elementEntirelyInViewport;
    })(Dom = exports.Dom || (exports.Dom = {}));
});
define("sys/Encoding", ["require", "exports", "sys/Corelib"], function (require, exports, Corelib_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ;
    Corelib_5.encoding.SerializationContext.GlobalContext.Register(Number, {
        FromJson: function (a, c) {
            if (a == null)
                return 0;
            if (typeof a === 'number')
                return a;
            if (typeof a === 'string')
                return parseInt(a);
            throw "basic.Guid.FromNumber(parseInt(a));";
        },
        ToJson: function (a, c) { return a == null ? 0 : a.toString(); }
    });
    Corelib_5.encoding.SerializationContext.GlobalContext.Register(Date, {
        FromJson: function (a, c) {
            if (a == null)
                return null;
            if (typeof a === 'number')
                return new Date(a);
            if (typeof a === 'string')
                return new Date(a);
            else
                return undefined;
        },
        ToJson: function (a, c) { return a.toJSON(); }
    });
    function init() { }
    exports.init = init;
    var sprintf = function (format) {
        var var_arg = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            var_arg[_i - 1] = arguments[_i];
        }
        return vsprintf(format, Array.prototype.slice.call(arguments, 1));
    };
    var tokenizeFormatString = function (format, formatters) {
        var tokens = [];
        var substitutionIndex = 0;
        function addStringToken(str) {
            if (tokens.length && tokens[tokens.length - 1].type === "string")
                tokens[tokens.length - 1].value += str;
            else
                tokens.push({
                    type: "string",
                    value: str
                });
        }
        function addSpecifierToken(specifier, precision, substitutionIndex) {
            tokens.push({
                type: "specifier",
                specifier: specifier,
                precision: precision,
                substitutionIndex: substitutionIndex
            });
        }
        var index = 0;
        for (var precentIndex = format.indexOf("%", index); precentIndex !== -1; precentIndex = format.indexOf("%", index)) {
            if (format.length === index)
                break;
            addStringToken(format.substring(index, precentIndex));
            index = precentIndex + 1;
            if (format[index] === "%") {
                addStringToken("%");
                ++index;
                continue;
            }
            if (isDigitAt(format, index)) {
                var number = parseInt(format.substring(index), 10);
                while (isDigitAt(format, index))
                    ++index;
                if (number > 0 && format[index] === "$") {
                    substitutionIndex = (number - 1);
                    ++index;
                }
            }
            var precision = -1;
            if (format[index] === ".") {
                ++index;
                precision = parseInt(format.substring(index), 10);
                if (isNaN(precision))
                    precision = 0;
                while (isDigitAt(format, index))
                    ++index;
            }
            if (!(format[index] in formatters)) {
                addStringToken(format.substring(precentIndex, index + 1));
                ++index;
                continue;
            }
            addSpecifierToken(format[index], precision, substitutionIndex);
            ++substitutionIndex;
            ++index;
        }
        addStringToken(format.substring(index));
        return tokens;
    };
    var standardFormatters = {
        d: function (substitution) {
            return !isNaN(substitution) ? substitution : 0;
        },
        f: function (substitution, token) {
            if (substitution && token.precision > -1)
                substitution = substitution.toFixed(token.precision);
            return !isNaN(substitution) ? substitution : (token.precision > -1 ? Number(0).toFixed(token.precision) : 0);
        },
        s: function (substitution) {
            return substitution;
        }
    };
    var vsprintf = function (format, substitutions) {
        return format(format, substitutions, standardFormatters, "", function (a, b) {
            return a + b;
        }).formattedResult;
    };
    var format = function (format, substitutions, formatters, initialValue, append, tokenizedFormat) {
        if (!format || !substitutions || !substitutions.length)
            return {
                formattedResult: append(initialValue, format),
                unusedSubstitutions: substitutions
            };
        function prettyFunctionName() {
            return "String.format(\"" + format + "\", \"" + Array.prototype.join.call(substitutions, "\", \"") + "\")";
        }
        function warn(msg) {
            console.warn(prettyFunctionName() + ": " + msg);
        }
        function error(msg) {
            console.error(prettyFunctionName() + ": " + msg);
        }
        var result = initialValue;
        var tokens = tokenizedFormat || tokenizeFormatString(format, formatters);
        var usedSubstitutionIndexes = {};
        for (var i = 0; i < tokens.length; ++i) {
            var token = tokens[i];
            if (token.type === "string") {
                result = append(result, token.value);
                continue;
            }
            if (token.type !== "specifier") {
                error("Unknown token type \"" + token.type + "\" found.");
                continue;
            }
            if (token.substitutionIndex >= substitutions.length) {
                error("not enough substitution arguments. Had " + substitutions.length + " but needed " + (token.substitutionIndex + 1) + ", so substitution was skipped.");
                result = append(result, "%" + (token.precision > -1 ? token.precision : "") + token.specifier);
                continue;
            }
            usedSubstitutionIndexes[token.substitutionIndex] = true;
            if (!(token.specifier in formatters)) {
                warn("unsupported format character \u201C" + token.specifier + "\u201D. Treating as a string.");
                result = append(result, substitutions[token.substitutionIndex]);
                continue;
            }
            result = append(result, formatters[token.specifier](substitutions[token.substitutionIndex], token));
        }
        var unusedSubstitutions = [];
        for (var i = 0; i < substitutions.length; ++i) {
            if (i in usedSubstitutionIndexes)
                continue;
            unusedSubstitutions.push(substitutions[i]);
        }
        return {
            formattedResult: result,
            unusedSubstitutions: unusedSubstitutions
        };
    };
    String.prototype.unescapeHTML = function () {
        return this.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&#58;/g, ":").replace(/&quot;/g, "\"").replace(/&#60;/g, "<").replace(/&#62;/g, ">").replace(/&amp;/g, "&");
    };
    String.prototype.collapseWhitespace = function () {
        return this.replace(/[\s\xA0]+/g, " ");
    };
    String.prototype.trimMiddle = function (maxLength) {
        if (this.length <= maxLength)
            return String(this);
        var leftHalf = maxLength >> 1;
        var rightHalf = maxLength - leftHalf - 1;
        return this.substr(0, leftHalf) + "\u2026" + this.substr(this.length - rightHalf, rightHalf);
    };
    String.prototype.trimEnd = function (maxLength) {
        if (this.length <= maxLength)
            return String(this);
        return this.substr(0, maxLength - 1) + "\u2026";
    };
    String.prototype.trimURL = function (baseURLDomain) {
        var result = this.replace(/^(https|http|file):\/\//i, "");
        if (baseURLDomain) {
            if (result.toLowerCase().startsWith(baseURLDomain.toLowerCase()))
                result = result.substr(baseURLDomain.length);
        }
        return result;
    };
    String.prototype.toTitleCase = function () {
        return this.substring(0, 1).toUpperCase() + this.substring(1);
    };
    String.prototype.compareTo = function (other) {
        if (this > other)
            return 1;
        if (this < other)
            return -1;
        return 0;
    };
    function sanitizeHref(href) {
        return href && href.trim().toLowerCase().startsWith("javascript:") ? null : href;
    }
    ;
    String.prototype.removeURLFragment = function () {
        var fragmentIndex = this.indexOf("#");
        if (fragmentIndex == -1)
            fragmentIndex = this.length;
        return this.substring(0, fragmentIndex);
    };
    var hashCode = function (string) {
        if (!string)
            return 0;
        var result = 0;
        for (var i = 0; i < string.length; ++i)
            result = (result * 31 + string.charCodeAt(i)) | 0;
        return Math.abs(result);
    };
    var isDigitAt = function (string, index) {
        var c = string.charCodeAt(index);
        return 48 <= c && c <= 57;
    };
    String.prototype.toBase64 = function () {
        function encodeBits(b) {
            return b < 26 ? b + 65 : b < 52 ? b + 71 : b < 62 ? b - 4 : b === 62 ? 43 : b === 63 ? 47 : 65;
        }
        var encoder = new (window.TextEncoder)();
        var data = encoder.encode(this);
        var n = data.length;
        var encoded = "";
        if (n === 0)
            return encoded;
        var shift;
        var v = 0;
        for (var i = 0; i < n; i++) {
            shift = i % 3;
            v |= data[i] << (16 >>> shift & 24);
            if (shift === 2) {
                encoded += String.fromCharCode(encodeBits(v >>> 18 & 63), encodeBits(v >>> 12 & 63), encodeBits(v >>> 6 & 63), encodeBits(v & 63));
                v = 0;
            }
        }
        if (shift === 0)
            encoded += String.fromCharCode(encodeBits(v >>> 18 & 63), encodeBits(v >>> 12 & 63), 61, 61);
        else if (shift === 1)
            encoded += String.fromCharCode(encodeBits(v >>> 18 & 63), encodeBits(v >>> 12 & 63), encodeBits(v >>> 6 & 63), 61);
        return encoded;
    };
    var WebInspector = { Color: null };
    var Color = (function () {
        function Color(rgba, format, originalText) {
            this.Format = {
                Original: "original",
                Nickname: "nickname",
                HEX: "hex",
                ShortHEX: "shorthex",
                RGB: "rgb",
                RGBA: "rgba",
                HSL: "hsl",
                HSLA: "hsla"
            };
            this.prototype = {
                format: function () {
                    return this._format;
                },
                hsla: function () {
                    if (this._hsla)
                        return this._hsla;
                    var r = this._rgba[0];
                    var g = this._rgba[1];
                    var b = this._rgba[2];
                    var max = Math.max(r, g, b);
                    var min = Math.min(r, g, b);
                    var diff = max - min;
                    var add = max + min;
                    if (min === max)
                        var h = 0;
                    else if (r === max)
                        var h = ((1 / 6 * (g - b) / diff) + 1) % 1;
                    else if (g === max)
                        var h = (1 / 6 * (b - r) / diff) + 1 / 3;
                    else
                        var h = (1 / 6 * (r - g) / diff) + 2 / 3;
                    var l = 0.5 * add;
                    if (l === 0)
                        var s = 0;
                    else if (l === 1)
                        var s = 0;
                    else if (l <= 0.5)
                        var s = diff / add;
                    else
                        var s = diff / (2 - add);
                    this._hsla = [h, s, l, this._rgba[3]];
                    return this._hsla;
                },
                canonicalHSLA: function () {
                    var hsla = this.hsla();
                    return [Math.round(hsla[0] * 360), Math.round(hsla[1] * 100), Math.round(hsla[2] * 100), hsla[3]];
                },
                hsva: function () {
                    var hsla = this.hsla();
                    var h = hsla[0];
                    var s = hsla[1];
                    var l = hsla[2];
                    s *= l < 0.5 ? l : 1 - l;
                    return [h, s !== 0 ? 2 * s / (l + s) : 0, (l + s), hsla[3]];
                },
                hasAlpha: function () {
                    return this._rgba[3] !== 1;
                },
                canBeShortHex: function () {
                    if (this.hasAlpha())
                        return false;
                    for (var i = 0; i < 3; ++i) {
                        var c = Math.round(this._rgba[i] * 255);
                        if (c % 17)
                            return false;
                    }
                    return true;
                },
                asString: function (format) {
                    if (format === this._format && this._originalTextIsValid)
                        return this._originalText;
                    if (!format)
                        format = this._format;
                    function toRgbValue(value) {
                        return Math.round(value * 255);
                    }
                    function toHexValue(value) {
                        var hex = Math.round(value * 255).toString(16);
                        return hex.length === 1 ? "0" + hex : hex;
                    }
                    function toShortHexValue(value) {
                        return (Math.round(value * 255) / 17).toString(16);
                    }
                    switch (format) {
                        case WebInspector.Color.Format.Original:
                            return this._originalText;
                        case WebInspector.Color.Format.RGB:
                            if (this.hasAlpha())
                                return null;
                            return sprintf("rgb(%d, %d, %d)", toRgbValue(this._rgba[0]), toRgbValue(this._rgba[1]), toRgbValue(this._rgba[2]));
                        case WebInspector.Color.Format.RGBA:
                            return sprintf("rgba(%d, %d, %d, %f)", toRgbValue(this._rgba[0]), toRgbValue(this._rgba[1]), toRgbValue(this._rgba[2]), this._rgba[3]);
                        case WebInspector.Color.Format.HSL:
                            if (this.hasAlpha())
                                return null;
                            var hsl = this.hsla();
                            return sprintf("hsl(%d, %d%, %d%)", Math.round(hsl[0] * 360), Math.round(hsl[1] * 100), Math.round(hsl[2] * 100));
                        case WebInspector.Color.Format.HSLA:
                            var hsla = this.hsla();
                            return sprintf("hsla(%d, %d%, %d%, %f)", Math.round(hsla[0] * 360), Math.round(hsla[1] * 100), Math.round(hsla[2] * 100), hsla[3]);
                        case WebInspector.Color.Format.HEX:
                            if (this.hasAlpha())
                                return null;
                            return sprintf("#%s%s%s", toHexValue(this._rgba[0]), toHexValue(this._rgba[1]), toHexValue(this._rgba[2])).toUpperCase();
                        case WebInspector.Color.Format.ShortHEX:
                            if (!this.canBeShortHex())
                                return null;
                            return sprintf("#%s%s%s", toShortHexValue(this._rgba[0]), toShortHexValue(this._rgba[1]), toShortHexValue(this._rgba[2])).toUpperCase();
                        case WebInspector.Color.Format.Nickname:
                            return this.nickname();
                    }
                    return this._originalText;
                },
                rgba: function () {
                    return this._rgba.slice();
                },
                canonicalRGBA: function () {
                    var rgba = new Array(4);
                    for (var i = 0; i < 3; ++i)
                        rgba[i] = Math.round(this._rgba[i] * 255);
                    rgba[3] = this._rgba[3];
                    return rgba;
                },
                nickname: function () {
                    if (!WebInspector.Color._rgbaToNickname) {
                        WebInspector.Color._rgbaToNickname = {};
                        for (var nickname in WebInspector.Color.Nicknames) {
                            var rgba = WebInspector.Color.Nicknames[nickname];
                            if (rgba.length !== 4)
                                rgba = rgba.concat(1);
                            WebInspector.Color._rgbaToNickname[rgba] = nickname;
                        }
                    }
                    return WebInspector.Color._rgbaToNickname[this.canonicalRGBA()] || null;
                },
                toProtocolRGBA: function () {
                    var rgba = this.canonicalRGBA();
                    return {
                        r: rgba[0],
                        g: rgba[1],
                        b: rgba[2], a: rgba[3] != 1 ? rgba[3] : undefined
                    };
                },
                invert: function () {
                    var rgba = [];
                    rgba[0] = 1 - this._rgba[0];
                    rgba[1] = 1 - this._rgba[1];
                    rgba[2] = 1 - this._rgba[2];
                    rgba[3] = this._rgba[3];
                    return new WebInspector.Color(rgba, WebInspector.Color.Format.RGBA);
                },
                setAlpha: function (alpha) {
                    var rgba = this._rgba.slice();
                    rgba[3] = alpha;
                    return new WebInspector.Color(rgba, WebInspector.Color.Format.RGBA);
                }
            };
            this._tmpHSLA = [0, 0, 0, 0];
            this._blendedFg = [0, 0, 0, 0];
            this._rgba = rgba;
            this._originalText = originalText || null;
            this._originalTextIsValid = !!this._originalText;
            this._format = format;
            if (typeof this._rgba[3] === "undefined")
                this._rgba[3] = 1;
            for (var i = 0; i < 4; ++i) {
                if (this._rgba[i] < 0) {
                    this._rgba[i] = 0;
                    this._originalTextIsValid = false;
                }
                if (this._rgba[i] > 1) {
                    this._rgba[i] = 1;
                    this._originalTextIsValid = false;
                }
            }
        }
        Color.prototype.parse = function (text) {
            var value = text.toLowerCase().replace(/\s+/g, "");
            var simple = /^(?:#([0-9a-f]{3}|[0-9a-f]{6})|rgb\(((?:-?\d+%?,){2}-?\d+%?)\)|(\w+)|hsl\((-?\d+\.?\d*(?:,-?\d+\.?\d*%){2})\))$/i;
            var match = value.match(simple);
            if (match) {
                if (match[1]) {
                    var hex = match[1].toUpperCase();
                    var format;
                    if (hex.length === 3) {
                        format = WebInspector.Color.Format.ShortHEX;
                        hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);
                    }
                    else
                        format = WebInspector.Color.Format.HEX;
                    var r = parseInt(hex.substring(0, 2), 16);
                    var g = parseInt(hex.substring(2, 4), 16);
                    var b = parseInt(hex.substring(4, 6), 16);
                    return new WebInspector.Color([r / 255, g / 255, b / 255, 1], format, text);
                }
                if (match[2]) {
                    var rgbString = match[2].split(/\s*,\s*/);
                    var rgba = [WebInspector.Color._parseRgbNumeric(rgbString[0]), WebInspector.Color._parseRgbNumeric(rgbString[1]), WebInspector.Color._parseRgbNumeric(rgbString[2]), 1];
                    return new WebInspector.Color(rgba, WebInspector.Color.Format.RGB, text);
                }
                if (match[3]) {
                    var nickname = match[3].toLowerCase();
                    if (nickname in WebInspector.Color.Nicknames) {
                        var rgba = WebInspector.Color.Nicknames[nickname];
                        var color = WebInspector.Color.fromRGBA(rgba);
                        color._format = WebInspector.Color.Format.Nickname;
                        color._originalText = text;
                        return color;
                    }
                    return null;
                }
                if (match[4]) {
                    var hslString = match[4].replace(/%/g, "").split(/\s*,\s*/);
                    var hsla = [WebInspector.Color._parseHueNumeric(hslString[0]), WebInspector.Color._parseSatLightNumeric(hslString[1]), WebInspector.Color._parseSatLightNumeric(hslString[2]), 1];
                    var rgba = [];
                    WebInspector.Color.hsl2rgb(hsla, rgba);
                    return new WebInspector.Color(rgba, WebInspector.Color.Format.HSL, text);
                }
                return null;
            }
            var advanced = /^(?:rgba\(((?:-?\d+%?,){3}-?(?:\d+|\d*\.\d+))\)|hsla\((-?(?:\d+|\d*\.\d+)(?:,-?(?:\d+|\d*\.\d+)*%){2},-?(?:\d+|\d*\.\d+))\))$/;
            match = value.match(advanced);
            if (match) {
                if (match[1]) {
                    var rgbaString = match[1].split(/\s*,\s*/);
                    var rgba = [WebInspector.Color._parseRgbNumeric(rgbaString[0]), WebInspector.Color._parseRgbNumeric(rgbaString[1]), WebInspector.Color._parseRgbNumeric(rgbaString[2]), WebInspector.Color._parseAlphaNumeric(rgbaString[3])];
                    return new WebInspector.Color(rgba, WebInspector.Color.Format.RGBA, text);
                }
                if (match[2]) {
                    var hslaString = match[2].replace(/%/g, "").split(/\s*,\s*/);
                    var hsla = [WebInspector.Color._parseHueNumeric(hslaString[0]), WebInspector.Color._parseSatLightNumeric(hslaString[1]), WebInspector.Color._parseSatLightNumeric(hslaString[2]), WebInspector.Color._parseAlphaNumeric(hslaString[3])];
                    var rgba = [];
                    WebInspector.Color.hsl2rgb(hsla, rgba);
                    return new WebInspector.Color(rgba, WebInspector.Color.Format.HSLA, text);
                }
            }
            return null;
        };
        Color.prototype.fromRGBA = function (rgba) {
            return new WebInspector.Color([rgba[0] / 255, rgba[1] / 255, rgba[2] / 255, rgba[3]], WebInspector.Color.Format.RGBA);
        };
        Color.prototype.fromHSVA = function (hsva) {
            var rgba = [];
            WebInspector.Color.hsva2rgba(hsva, rgba);
            return new WebInspector.Color(rgba, WebInspector.Color.Format.HSLA);
        };
        Color.prototype._parseRgbNumeric = function (value) {
            var parsed = parseInt(value, 10);
            if (value.indexOf("%") !== -1)
                parsed /= 100;
            else
                parsed /= 255;
            return parsed;
        };
        Color.prototype._parseHueNumeric = function (value) {
            return isNaN(value) ? 0 : (parseFloat(value) / 360) % 1;
        };
        Color.prototype._parseSatLightNumeric = function (value) {
            return Math.min(1, parseFloat(value) / 100);
        };
        Color.prototype._parseAlphaNumeric = function (value) {
            return isNaN(value) ? 0 : parseFloat(value);
        };
        Color.prototype._hsva2hsla = function (hsva, out_hsla) {
            var h = hsva[0];
            var s = hsva[1];
            var v = hsva[2];
            var t = (2 - s) * v;
            if (v === 0 || s === 0)
                s = 0;
            else
                s *= v / (t < 1 ? t : 2 - t);
            out_hsla[0] = h;
            out_hsla[1] = s;
            out_hsla[2] = t / 2;
            out_hsla[3] = hsva[3];
        };
        Color.prototype.hsl2rgb = function (hsl, out_rgb) {
            var h = hsl[0];
            var s = hsl[1];
            var l = hsl[2];
            function hue2rgb(p, q, h) {
                if (h < 0)
                    h += 1;
                else if (h > 1)
                    h -= 1;
                if ((h * 6) < 1)
                    return p + (q - p) * h * 6;
                else if ((h * 2) < 1)
                    return q;
                else if ((h * 3) < 2)
                    return p + (q - p) * ((2 / 3) - h) * 6;
                else
                    return p;
            }
            if (s < 0)
                s = 0;
            if (l <= 0.5)
                var q = l * (1 + s);
            else
                var q = l + s - (l * s);
            var p = 2 * l - q;
            var tr = h + (1 / 3);
            var tg = h;
            var tb = h - (1 / 3);
            out_rgb[0] = hue2rgb(p, q, tr);
            out_rgb[1] = hue2rgb(p, q, tg);
            out_rgb[2] = hue2rgb(p, q, tb);
            out_rgb[3] = hsl[3];
        };
        Color.prototype.hsva2rgba = function (hsva, out_rgba) {
            WebInspector.Color._hsva2hsla(hsva, WebInspector.Color.hsva2rgba._tmpHSLA);
            WebInspector.Color.hsl2rgb(WebInspector.Color.hsva2rgba._tmpHSLA, out_rgba);
            for (var i = 0; i < WebInspector.Color.hsva2rgba._tmpHSLA.length; i++)
                this._tmpHSLA[i] = 0;
        };
        ;
        Color.prototype.luminance = function (rgba) {
            var rSRGB = rgba[0];
            var gSRGB = rgba[1];
            var bSRGB = rgba[2];
            var r = rSRGB <= 0.03928 ? rSRGB / 12.92 : Math.pow(((rSRGB + 0.055) / 1.055), 2.4);
            var g = gSRGB <= 0.03928 ? gSRGB / 12.92 : Math.pow(((gSRGB + 0.055) / 1.055), 2.4);
            var b = bSRGB <= 0.03928 ? bSRGB / 12.92 : Math.pow(((bSRGB + 0.055) / 1.055), 2.4);
            return 0.2126 * r + 0.7152 * g + 0.0722 * b;
        };
        Color.prototype.blendColors = function (fgRGBA, bgRGBA, out_blended) {
            var alpha = fgRGBA[3];
            out_blended[0] = ((1 - alpha) * bgRGBA[0]) + (alpha * fgRGBA[0]);
            out_blended[1] = ((1 - alpha) * bgRGBA[1]) + (alpha * fgRGBA[1]);
            out_blended[2] = ((1 - alpha) * bgRGBA[2]) + (alpha * fgRGBA[2]);
            out_blended[3] = alpha + (bgRGBA[3] * (1 - alpha));
        };
        Color.prototype.calculateContrastRatio = function (fgRGBA, bgRGBA) {
            WebInspector.Color.blendColors(fgRGBA, bgRGBA, WebInspector.Color.calculateContrastRatio._blendedFg);
            var fgLuminance = WebInspector.Color.luminance(WebInspector.Color.calculateContrastRatio._blendedFg);
            var bgLuminance = WebInspector.Color.luminance(bgRGBA);
            var contrastRatio = (Math.max(fgLuminance, bgLuminance) + 0.05) / (Math.min(fgLuminance, bgLuminance) + 0.05);
            for (var i = 0; i < WebInspector.Color.calculateContrastRatio._blendedFg.length; i++)
                WebInspector.Color.calculateContrastRatio._blendedFg[i] = 0;
            return contrastRatio;
        };
        Color.prototype.desiredLuminance = function (luminance, contrast, lighter) {
            function computeLuminance() {
                if (lighter)
                    return (luminance + 0.05) * contrast - 0.05;
                else
                    return (luminance + 0.05) / contrast - 0.05;
            }
            var desiredLuminance = computeLuminance();
            if (desiredLuminance < 0 || desiredLuminance > 1) {
                lighter = !lighter;
                desiredLuminance = computeLuminance();
            }
            return desiredLuminance;
        };
        return Color;
    }());
    var Base64;
    (function (Base64) {
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
        }
        revLookup['-'.charCodeAt(0)] = 62;
        revLookup['_'.charCodeAt(0)] = 63;
        function getLens(b64) {
            var len = b64.length;
            if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4');
            }
            var validLen = b64.indexOf('=');
            if (validLen === -1)
                validLen = len;
            var placeHoldersLen = validLen === len
                ? 0
                : 4 - (validLen % 4);
            return [validLen, placeHoldersLen];
        }
        function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen;
        }
        Base64.byteLength = byteLength;
        function _byteLength(b64, validLen, placeHoldersLen) {
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen;
        }
        function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
            var curByte = 0;
            var len = placeHoldersLen > 0
                ? validLen - 4
                : validLen;
            for (var i = 0; i < len; i += 4) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 18) |
                        (revLookup[b64.charCodeAt(i + 1)] << 12) |
                        (revLookup[b64.charCodeAt(i + 2)] << 6) |
                        revLookup[b64.charCodeAt(i + 3)];
                arr[curByte++] = (tmp >> 16) & 0xFF;
                arr[curByte++] = (tmp >> 8) & 0xFF;
                arr[curByte++] = tmp & 0xFF;
            }
            if (placeHoldersLen === 2) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 2) |
                        (revLookup[b64.charCodeAt(i + 1)] >> 4);
                arr[curByte++] = tmp & 0xFF;
            }
            if (placeHoldersLen === 1) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 10) |
                        (revLookup[b64.charCodeAt(i + 1)] << 4) |
                        (revLookup[b64.charCodeAt(i + 2)] >> 2);
                arr[curByte++] = (tmp >> 8) & 0xFF;
                arr[curByte++] = tmp & 0xFF;
            }
            return arr;
        }
        Base64.toByteArray = toByteArray;
        function tripletToBase64(num) {
            return lookup[num >> 18 & 0x3F] +
                lookup[num >> 12 & 0x3F] +
                lookup[num >> 6 & 0x3F] +
                lookup[num & 0x3F];
        }
        function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i = start; i < end; i += 3) {
                tmp =
                    ((uint8[i] << 16) & 0xFF0000) +
                        ((uint8[i + 1] << 8) & 0xFF00) +
                        (uint8[i + 2] & 0xFF);
                output.push(tripletToBase64(tmp));
            }
            return output.join('');
        }
        function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3;
            var parts = [];
            var maxChunkLength = 16383;
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
            }
            if (extraBytes === 1) {
                tmp = uint8[len - 1];
                parts.push(lookup[tmp >> 2] +
                    lookup[(tmp << 4) & 0x3F] +
                    '==');
            }
            else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                parts.push(lookup[tmp >> 10] +
                    lookup[(tmp >> 4) & 0x3F] +
                    lookup[(tmp << 2) & 0x3F] +
                    '=');
            }
            return parts.join('');
        }
        Base64.fromByteArray = fromByteArray;
    })(Base64 = exports.Base64 || (exports.Base64 = {}));
    var IEEE754;
    (function (IEEE754) {
        function read(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = (nBytes * 8) - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? (nBytes - 1) : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & ((1 << (-nBits)) - 1);
            s >>= (-nBits);
            nBits += eLen;
            for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }
            m = e & ((1 << (-nBits)) - 1);
            e >>= (-nBits);
            nBits += mLen;
            for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }
            if (e === 0) {
                e = 1 - eBias;
            }
            else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity);
            }
            else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        }
        IEEE754.read = read;
        function write(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = (nBytes * 8) - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
            var i = isLE ? 0 : (nBytes - 1);
            var d = isLE ? 1 : -1;
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
            }
            else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                }
                if (e + eBias >= 1) {
                    value += rt / c;
                }
                else {
                    value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                    e++;
                    c /= 2;
                }
                if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax;
                }
                else if (e + eBias >= 1) {
                    m = ((value * c) - 1) * Math.pow(2, mLen);
                    e = e + eBias;
                }
                else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0;
                }
            }
            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }
            e = (e << mLen) | m;
            eLen += mLen;
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }
            buffer[offset + i - d] |= s * 128;
        }
        IEEE754.write = write;
    })(IEEE754 = exports.IEEE754 || (exports.IEEE754 = {}));
});
define("sys/Jobs", ["require", "exports", "sys/Corelib", "context"], function (require, exports, Corelib_6, context_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var t = [1, 10, 100, 1000, 10000, 100000, 1e6, 1e7, 1e8, 1e9];
    function hasValueProperty(dom) {
        return dom instanceof HTMLInputElement || dom instanceof HTMLTextAreaElement;
    }
    function parseTarget(dom) {
        var href = dom.getAttribute('target');
        if (href == null)
            return;
        var cs = href.split('/');
        var x = dom;
        if (cs.length > 2)
            throw 'Error';
        if (cs.length > 1) {
            href = cs[1];
            var l = parseInt(cs[0]) + 1;
        }
        else
            l = 1;
        return { depth: l, href: href };
    }
    exports.parseTarget = parseTarget;
    function getTarget(dom, depth, id) {
        var x = dom;
        for (var i = 0; i < depth; i++)
            x = x.parentElement;
        if (!id || id == '')
            return x;
        var sd = $(id, x);
        if (sd) {
            if (sd instanceof Array) {
                if (sd.length != 0)
                    x = sd[0];
            }
            else
                x = sd;
        }
        return x;
    }
    exports.getTarget = getTarget;
    function getTargetFrom(dom) {
        var c = parseTarget(dom);
        return c ? getTarget(dom, c.depth, c.href) : dom;
    }
    exports.getTargetFrom = getTargetFrom;
    var Jobs;
    (function (Jobs) {
        function InputChecks(name, check) { }
        Jobs.InputChecks = InputChecks;
        function Load() { }
        Jobs.Load = Load;
        var InputJob;
        (function (InputJob) {
            function Register(name, check, freeze) {
                Object.defineProperty(checks, name, { value: check, configurable: !freeze, writable: !freeze, enumerable: false });
            }
            InputJob.Register = Register;
            var checks = {};
            var Name = 'input';
            function init() {
                var telM = /(0{1}[5|7|6|9]{1}\d{8})/;
                var telF = /(0{1}[2|3]{1}\d{7})/;
                var mail = /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/;
                var name = /^[a-z|A-Z\s]*$/;
                var username = /^([a-zA-Z\@][a-zA-Z\d\@\._]{5,20})$/;
                var dimention = /[\w\s\.\d\/\*\ \+\-\%\=°]*/;
                var url = /^(?!mailto:)(?:(?:https?|ftp):\/\/)?(?:\S+(?::\S*)?@)?(?:(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))|localhost)(?::\d{2,5})?(?:\/[^\s]*)?$/i;
                checks['readonly'] = function (i) { return false; };
                checks['alphanumeric'] = function (str) { return !!str.match(/^[a-zA-Z0-9]*$/); };
                checks['ip'] = function (str) { return !!str.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/); };
                checks['numeric'] = function (str) { return !!str.match(/^-?[0-9]+$/); };
                checks['int'] = function (str) { return !!str.match(/^(?:-?(?:0|[1-9][0-9]*))$/); };
                checks['decimal'] = function (str) { return !!str.match(/^(?:-?(?:0|[1-9][0-9]*))?(?:\.[0-9]*)?$/); };
                checks['text'] = function (str) { return true; };
                checks['password'] = function (str) { return !!str.match(/^[a-zA-Z0-9\s\.\@\!\?]+$/); };
                checks['any'] = function (str) { return true; };
                checks['ref'] = function (str) { return !!str.match(/^[A-Z]{2}[0-9]{1,5}$/); };
                checks['creditcard'] = function (str) {
                    str = str.replace(/[^0-9]+/g, "");
                    if (!str.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/)) {
                        return false;
                    }
                    var t = 0;
                    var r;
                    var e;
                    var i = false;
                    for (var s = str.length - 1; s >= 0; s--) {
                        r = str.substring(s, s + 1);
                        e = parseInt(r, 10);
                        if (i) {
                            e *= 2;
                            if (e >= 10) {
                                t += e % 10 + 1;
                            }
                            else {
                                t += e;
                            }
                        }
                        else {
                            t += e;
                        }
                        if (i) {
                            i = false;
                        }
                        else {
                            i = true;
                        }
                    }
                    if (t % 10 !== 0)
                        return false;
                    return true;
                };
                checks['tel'] = function (i) {
                    i = i.trim();
                    return (telF.test(i) && i.length === 9) || (telM.test(i) && i.length === 10);
                };
                checks['mail'] = function (i) {
                    var t = mail.exec(i);
                    return t !== null && t[0].length === i.length;
                };
                checks['name'] = function (i) {
                    var r = name.exec(i);
                    return r !== null && r[0].length === i.length;
                };
                checks['username'] = function (i) {
                    var r = username.exec(i);
                    return r !== null && r[0].length === i.length;
                };
                checks['dimention'] = function (i) {
                    var r = dimention.exec(i);
                    return r !== null && r[0].length === i.length;
                };
                checks['select'] = function (i) {
                    var r = username.exec(i);
                    return r !== null && r[0].length === i.length;
                };
                Object.freeze(InputJob);
                Object.freeze(telM);
                Object.freeze(telF);
            }
            InputJob.init = init;
            function Todo(job, e) {
                if (job.Ischanging)
                    return;
                job.Ischanging = true;
                try {
                    job.dom.value = job.Scop.Value || '';
                }
                catch (e) {
                }
                job.Ischanging = false;
            }
            function Check(job, e) {
                return true;
            }
            function OnError(job, e) {
            }
            function OnInitialize(ji, e) {
                var check = ji.dom.getAttribute('db-check');
                if (check === 'readonly')
                    ji.dom.contentEditable = 'false';
                ji.Checker = checks[check];
                ji.Handle = this.handleEvent;
                this.Todo(ji, e);
                ji.addEventListener('ochange', hasValueProperty(ji.dom) ? 'change' : 'textContentChanged', ji);
            }
            function handleEvent(t, e) {
                if (t.Ischanging)
                    return;
                t.Ischanging = true;
                try {
                    var b = t.dom.value;
                    if (t.Checker) {
                        if (!t.Checker(b))
                            t.dom.value = t.Scop.Value;
                        else
                            t.Scop.Value = b;
                    }
                    else
                        t.Scop.Value = b;
                }
                catch (e) {
                }
                t.Ischanging = false;
            }
            function callback(e) {
            }
            function OnDispose(job, e) {
                job.removeEventListener('ochange');
            }
            function Instance() {
                return { Name: Name, Todo: Todo, OnInitialize: OnInitialize, Check: Check, OnScopDisposing: OnDispose, OnError: OnError, handleEvent: handleEvent };
            }
            InputJob.Instance = Instance;
            init();
        })(InputJob || (InputJob = {}));
        var compiler = new Corelib_6.basic.CodeCompiler();
        var interpolation = (function () {
            function interpolation() {
                this.Name = "$";
            }
            interpolation.prototype.Todo = function (job, e) {
                var regs = job.getValue('regs');
                var scp = job.Scop;
                var val = job.Scop.Value;
                var params = [val, scp, undefined, job, undefined];
                for (var i = 0; i < regs.length; i++) {
                    var reg = regs[i];
                    params[2] = reg.stat || job.dom;
                    params[4] = reg.evalCode;
                    params[2].textContent = reg.evalCode.apply(scp, params);
                }
            };
            interpolation.prototype.OnError = function (job, e) {
            };
            interpolation.prototype.OnInitialize = function (job, e) {
                var _this = this;
                var d = job.dom.firstChild;
                var arr = [];
                job.addValue("regs", arr);
                do {
                    if (d instanceof Text) {
                        var reg = compiler.push(d.textContent);
                        if (reg.IsString)
                            compiler.remove(reg);
                        else {
                            reg.stat = d;
                            arr.push(reg);
                            Corelib_6.bind.Observer;
                        }
                    }
                } while ((d = d.nextSibling));
                compiler.onload = function (t) { t.reset(); _this.Todo(job, e); };
                compiler.Compile();
            };
            interpolation.prototype.OnScopDisposing = function (job, e) {
                var regs = job.getValue('regs');
                regs.length = 0;
            };
            return interpolation;
        }());
        Jobs.interpolation = interpolation;
        Corelib_6.bind.Register(new interpolation());
        var CheckBox = (function () {
            function CheckBox() {
                this.Name = 'checkbox';
            }
            CheckBox.prototype.Todo = function (job, e) {
                job.dom.checked = job.Scop.Value;
            };
            CheckBox.prototype.OnError = function (job, e) {
            };
            CheckBox.prototype.OnInitialize = function (job, e) {
                this.Todo(job, e);
                job.addEventListener('change', 'change', job);
                job.Handle = this.Handle;
            };
            CheckBox.prototype.OnScopDisposing = function (job, e) {
            };
            CheckBox.prototype.Handle = function (ji, e) {
                var v = ji.dom.checked;
                ji.Scop.Value = v == null ? null : !!v;
            };
            return CheckBox;
        }());
        Jobs.CheckBox = CheckBox;
        Corelib_6.bind.Register(new CheckBox());
        var FloatJob = (function () {
            function FloatJob() {
                this.checks = {};
                this.Name = 'number';
                this.reg = function (str) { return !!str.match(/^[+-]?\d+(?:\.\d+)?$/); };
            }
            FloatJob.prototype.Todo = function (job, e) {
                if (job.Ischanging)
                    return;
                job.Ischanging = true;
                try {
                    var val = job.Scop.Value;
                    val = val == null ? job._store.def : val;
                    if (job.dom instanceof HTMLInputElement)
                        job.dom.value = val;
                    else
                        job.dom.textContent = val;
                }
                catch (e) {
                }
                job.Ischanging = false;
            };
            FloatJob.prototype.OnInitialize = function (ji, e) {
                var _this = this;
                var d = ji.dom;
                var check = d.getAttribute('db-check');
                ji.addValue('max', parseFloat(d.getAttribute('max') || '9999999999'));
                ji.addValue('min', parseFloat(d.getAttribute('min') || '-9999999999'));
                ji.addValue('def', parseFloat(d.getAttribute('default') || '0.00'));
                if (check === 'readonly')
                    d.contentEditable = 'false';
                else {
                    ji.Handle = this.handleEvent;
                    ji.addEventListener('ochange', hasValueProperty(d) ? 'change' : 'textContentChanged', function (e) { _this.handleEvent(ji, e); });
                }
                this.Todo(ji, e);
            };
            FloatJob.prototype.handleEvent = function (ji, e) {
                if (ji.Ischanging)
                    return;
                ji.Ischanging = true;
                try {
                    var dm = ji.dom;
                    var b = dm.value;
                    if (this.reg(b)) {
                        var v = Math.round(parseFloat(b) * 1000) / 1000;
                        var nv = Math.max(ji.getValue('min'), Math.min(v, ji.getValue('max')));
                        ji.Scop.Value = nv;
                        if (v != nv)
                            dm.value = nv.toString();
                    }
                    else
                        dm.value = String(Math.round((ji.Scop.Value || 0) * 1000) / 1000);
                }
                catch (e) {
                }
                ji.Ischanging = false;
            };
            FloatJob.prototype.OnScopDisposing = function (job, e) {
                job.removeEventListener('ochange');
            };
            return FloatJob;
        }());
        Jobs.FloatJob = FloatJob;
        var AccordionSelectJob = (function () {
            function AccordionSelectJob() {
                this.checks = {};
                this.Name = 'select';
            }
            AccordionSelectJob.prototype.Todo = function (ji, e) {
                var val = ji.getValue('db-const');
                var style = ji.getValue('db-style');
                var dval = ji.Scop.Value;
                try {
                    var dm = ji.dom;
                    if (val === dval)
                        dm.classList.add(style);
                    else
                        dm.classList.remove(style);
                }
                catch (e) {
                }
            };
            AccordionSelectJob.prototype.OnError = function (job, e) {
            };
            AccordionSelectJob.prototype.OnInitialize = function (ji, e) {
                var dm = ji.dom;
                var t = this.callback.bind(ji);
                ji.addValue('__', t);
                ji.addValue('db-const', dm.getAttribute('db-const'));
                ji.addValue('db-style', dm.getAttribute('db-style'));
                this.Todo(ji, e);
                dm.addEventListener('click', t);
            };
            AccordionSelectJob.prototype.callback = function (e) {
                var t = this;
                try {
                    var val = t.getValue('db-const');
                    t.Scop.Value = val;
                }
                catch (e) {
                }
            };
            AccordionSelectJob.prototype.OnScopDisposing = function (job, e) {
            };
            return AccordionSelectJob;
        }());
        Jobs.AccordionSelectJob = AccordionSelectJob;
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "readonly",
            Todo: function (ji, e) {
                var dm = ji.getValue('target');
                var val = !ji.Scop.Value;
                var w = document.createTreeWalker(dm, NodeFilter.SHOW_ELEMENT);
                while (w.nextNode()) {
                    var node = w.currentNode;
                    typeof node.readOnly === 'boolean' && (node.readOnly = val);
                }
            },
            OnInitialize: function (ji, e) {
                ji.addValue('target', getTarget(ji));
                this.Todo(ji, e);
            }
        });
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "toggleText",
            Todo: function (ji, e) {
                var dm = ji.getValue('data');
                var v = ji.Scop.Value;
                ji.dom.textContent = dm[v];
            },
            OnInitialize: function (ji, e) {
                var c = ji.dom.attributes.getNamedItem('data');
                if (c)
                    try {
                        ji.addValue('data', JSON.parse(c.value));
                    }
                    catch (e) {
                        ji.addValue('data', {});
                    }
                else
                    ji.addValue('data', {});
                this.Todo(ji, e);
            }
        });
        Jobs.LabelJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("label", function (ji, e) {
            var dm = ji.dom;
            dm.textContent = ji.Scop.Value || '';
        }, null, null, function (ji, e) {
            var dm = ji.dom;
            dm.textContent = ji.Scop.Value || '';
        }, function (ji, e) {
        }));
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "html",
            Todo: function (ji, e) {
                var dm = ji.dom;
                dm.innerHTML = ji.Scop.Value || '';
            },
            OnInitialize: function (ji, e) {
                this.Todo(ji, e);
            }
        });
        function toDate(value) {
            return (value - 621355968000000000) / 10000;
        }
        var epochTicks = 621355968000000000;
        var ticksPerMillisecond = 10000;
        var maxDateMilliseconds = 8640000000000000;
        var congratulationsTimer;
        var ticksToDateString = function (ticks) {
            if (isNaN(ticks)) {
                return "NANA-NA-NATNA:NA:BA.TMAN";
            }
            var ticksSinceEpoch = ticks - epochTicks;
            var millisecondsSinceEpoch = ticksSinceEpoch / ticksPerMillisecond;
            if (millisecondsSinceEpoch > maxDateMilliseconds) {
                return "+WHOAWH-OA-ISTOO:FA:RA.WAYZ";
            }
            var date = new Date(millisecondsSinceEpoch);
            return date.toISOString();
        };
        Corelib_6.bind.Register({
            Name: 'cdate',
            OnInitialize: function (ji, e) {
                this.Todo(ji, e);
            }, Todo: function (ji, e) {
                var d = ji.dom;
                var v = ji.Scop.Value;
                var dt = new Date(toDate(v));
                if (d instanceof HTMLInputElement)
                    ji.dom.valueAsDate = dt;
                else
                    ji.dom.textContent = dt.toLocaleString();
            }
        });
        var tw = {
            "true": 3,
            2: 2,
            3: 3
        };
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: 'date',
            OnInitialize: function (ji, e) {
                var c = ji.dom;
                var _tw = tw[c.getAttribute('db-twoway')];
                ji._store['tw'] = _tw = (_tw === undefined ? 1 : parseInt(_tw));
                if ((_tw & 2) == 2)
                    ji.addEventListener('change', hasValueProperty(c) ? 'change' : 'textContentChanged', {
                        handleEvent: function (e) {
                            var d = ji.dom;
                            this.self.Scop.Value = d instanceof HTMLInputElement ? d.valueAsDate : new Date(d.textContent);
                        }, self: ji
                    });
                this.Todo(ji, e);
            }, Todo: function (ji, e) {
                var _tw = ji._store['tw'];
                if ((_tw & 1) !== 1)
                    return;
                var d = ji.dom;
                var v = ji.Scop.Value;
                var dt = (v == null ? new Date(0) : v instanceof Date ? v : typeof v === 'number' ? new Date(v) : typeof v === 'string' ? Date.parse(v) : new Date(0));
                if (d instanceof HTMLInputElement)
                    ji.dom.valueAsDate = dt;
                else
                    ji.dom.textContent = dt.toLocaleString();
            }
        });
        Jobs.LabelJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("rinput", function (ji, e) {
            ji.dom.value = ji.Scop.Value;
        }, null, null, function (ji, e) {
            ji.dom.value = ji.Scop.Value;
        }, function (ji, e) {
        }));
        Jobs.textboxJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("textbox", function (ji, e) {
            var dm = ji.dom;
            dm.innerText = ji.Scop.Value;
        }, null, null, function (ji, e) {
            var dm = ji.dom;
            dm.innerText = ji.Scop.Value;
        }, function (ji, e) {
        }));
        Jobs.LabelJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("price", function (ji, e) {
            var dm = ji.dom;
            dm.innerText = Corelib_6.math.round(ji.Scop.Value || 0, 2) + ' DZD';
        }, null, null, function (ji, e) {
            var dm = ji.dom;
            dm.innerText = Corelib_6.math.round(ji.Scop.Value || 0, 2) + ' DZD';
        }, function (ji, e) {
        }));
        Jobs.ratingJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("rateing", function (ji, e) {
            var dm = ji.dom;
            var v = Math.round(ji.Scop.Value || 0);
            var length = dm.childElementCount;
            for (var i = 0; i < v; i++) {
                dm.children[i].style.visibility = "visible";
            }
            for (var i = v; i < length; i++) {
                dm.children[i].style.visibility = "hidden";
            }
        }, null, null, function (ji, e) {
            Jobs.ratingJob.Todo(ji, e);
        }));
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "enable",
            Todo: function (ji, i) {
                ji.dom.style.pointerEvents = ji.Scop.Value ? 'all' : 'none';
            },
            OnInitialize: function (ji, e) {
                this.Todo(ji, e);
            }
        });
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "applyStyle",
            Todo: function (ji, i) {
                var d = ji.getValue('target');
                var dt = ji.getValue('data') || defaultDispaly;
                var type = this.getType(ji);
                var x = ji.Scop.Value;
                if (type)
                    x = x instanceof type;
                d.classList.add.apply(d.classList, x ? dt[1] : dt[0]);
                d.classList.remove.apply(d.classList, x ? dt[0] : dt[1]);
            },
            OnInitialize: function (ji, e) {
                var d = ji.dom;
                var dt = d.getAttribute('db-data');
                if (dt) {
                    dt = dt.split(',');
                    if (dt.length == 1)
                        dt = [dt[0].split(' '), 'none'];
                    else {
                        dt[0] = dt[0].split(' ');
                        dt[1] = dt[1].split(' ');
                    }
                    ji.addValue('data', dt);
                }
                var ofType = d.getAttribute('ofType');
                if (ofType)
                    ji.addValue('ofType', ofType);
                ji.addValue('target', getTarget(ji));
                this.Todo(ji, e);
            },
            getType: function (ji) {
                var type = ji.getValue('ofType');
                if (typeof type === 'string') {
                    type = context_5.context.GetType(type);
                    if (type instanceof Function)
                        ji.addValue('ofType', type);
                }
                return type;
            },
            getTarget: function (ji) {
                var target = ji.dom.getAttribute('target');
                if (!target)
                    return;
                var opt = target.split('/');
                var num = parseInt(opt[0]) || 0;
                var id = opt[1];
                var d = ji.dom;
                while (num != 0) {
                    num--;
                    d = d.parentElement || d;
                }
                if (id) {
                    var sd = $(id, d);
                    if (sd) {
                        if (sd instanceof Array) {
                            if (sd.length != 0)
                                d = sd[0];
                        }
                        else
                            d = sd;
                    }
                }
                ji.addValue('target', d || ji.dom.parentElement || ji.dom);
            }
        });
        function getTarget(ji) {
            var target = ji.dom.getAttribute('target');
            if (!target)
                return ji.dom;
            var opt = target.split('/');
            var num = parseInt(opt[0]) || 0;
            var id = opt[1];
            var d = ji.dom;
            while (num != 0) {
                num--;
                d = d.parentElement || d;
            }
            if (id) {
                var sd = $(id, d);
                if (sd) {
                    if (sd instanceof Array) {
                        if (sd.length != 0)
                            d = sd[0];
                    }
                    else
                        d = sd;
                }
            }
            return d || ji.dom;
        }
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "show",
            Todo: function (ji, i) {
                var d = ji.getValue('target');
                var dt = ji.getValue('data') || defaultDispaly;
                var type = this.getType(ji);
                var x = ji.Scop.Value;
                if (type)
                    x = x instanceof type;
                d.style.display = x ? dt[1] : dt[0];
            },
            OnInitialize: function (ji, e) {
                var d = ji.dom;
                var dt = d.getAttribute('db-data');
                if (dt) {
                    dt = dt.split(',');
                    if (dt.length == 1)
                        dt = [dt[0], 'none'];
                    ji.addValue('data', dt);
                }
                var ofType = d.getAttribute('ofType');
                if (ofType)
                    ji.addValue('ofType', ofType);
                ji.addValue('target', getTarget(ji));
                this.Todo(ji, e);
            },
            getType: function (ji) {
                var type = ji.getValue('ofType');
                if (typeof type === 'string') {
                    type = context_5.context.GetType(type);
                    if (type instanceof Function)
                        ji.addValue('ofType', type);
                }
                return type;
            }
        });
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "editable",
            Todo: function (ji, e) {
                var c = !ji.Scop.Value;
                var ins = $('input', ji.dom);
                for (var i = 0; i < ins.length; i++) {
                    var b = ins[i];
                    b.disabled = c;
                }
            },
            OnInitialize: function (ji, e) {
                this.Todo(ji);
            }, OnScopDisposing: function (ji, e) {
            }
        });
        var defaultDispaly = ['none', ''];
        Jobs.LabelJob = Corelib_6.bind.Register({
            Name: "toggle",
            Todo: function (ji, i) {
            },
            OnInitialize: function (ji, e) {
                ji.addEventListener('domclick', 'click', function (e) {
                    ji.Scop.Value = !!!ji.Scop.Value;
                });
            }, OnScopDisposing: function (ji, e) {
                ji.removeEventListener('domclick');
            }
        });
        Jobs.LabelJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("showIf", function (ji, e) {
            var dm = ji.dom;
            var d = dm.parentElement;
            var dsp = d.style.display;
            var val = ji.Scop.Value;
            if (val === false) {
                if (dsp == 'none')
                    return;
                ji.addValue('display', dsp);
                d.style.display = 'none';
            }
            else
                d.style.display = dsp == 'none' ? ji.getValue('display') : dsp;
        }, null, null, function (ji, e) {
            var dm = ji.dom;
            var d = dm.parentElement;
            var dsp = d.style.display;
            var val = ji.Scop.Value;
            { }
            if (val === false) {
                if (dsp == 'none')
                    return;
                ji.addValue('display', dsp);
                d.style.display = 'none';
            }
            else
                d.style.display = dsp == 'none' ? ji.getValue('display') : dsp;
        }, function (ji, e) {
        }));
        Jobs.LabelJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("hideIf", function (ji, e) {
            var dm = ji.dom;
            var d = dm.parentElement;
            var dsp = d.style.display;
            var val = ji.Scop.Value;
            if (val === true) {
                if (dsp == 'none')
                    return;
                ji.addValue('display', dsp);
                d.style.display = 'none';
            }
            else
                d.style.display = dsp == 'none' ? ji.getValue('display') : dsp;
        }, null, null, function (ji, e) {
            var dm = ji.dom;
            var d = dm.parentElement;
            var dsp = d.style.display;
            var val = ji.Scop.Value;
            if (val === true) {
                if (dsp == 'none')
                    return;
                ji.addValue('display', dsp);
                d.style.display = 'none';
            }
            else
                d.style.display = dsp == 'none' ? ji.getValue('display') : dsp;
        }, function (ji, e) {
        }));
        Jobs.TextJob = Corelib_6.bind.Register(InputJob.Instance());
        Jobs.TextJob = Corelib_6.bind.Register(new FloatJob());
        Jobs.TextJob = Corelib_6.bind.Register(new AccordionSelectJob());
        Jobs.CheckJob = Corelib_6.bind.Register(new Corelib_6.bind.Job("check", function (ji, e) {
            var dm = ji.dom;
            dm.innerText = ji.Scop.Value;
        }, null, null, function (ji, e) {
            var dm = ji.dom;
            dm.innerText = ji.Scop.Value;
        }, function (ji, e) {
        }));
    })(Jobs = exports.Jobs || (exports.Jobs = {}));
    function sealed(target) {
    }
});
define("sys/Thread", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    if (typeof exports === 'undefined')
        var exports = {};
    var isWorker = typeof importScripts === 'function' && !(typeof window !== 'undefined' && window instanceof Window);
    if (typeof exports === 'undefined' && typeof window !== 'undefined')
        window['exports'] = {};
    var Workers;
    (function (Workers) {
        var WebWorker;
        (function (WebWorker) {
            var _handlers = {};
            function registerHandler(name, handler) {
                if (!name)
                    return false;
                if (name.indexOf('__') === 0 && name.lastIndexOf('__') === name.length - 2)
                    return false;
                if (!handler)
                    return false;
                _handlers[name] = handler;
                return true;
            }
            WebWorker.registerHandler = registerHandler;
            function getHandler(name) {
                if (name.indexOf('__') === 0 && name.lastIndexOf('__') === name.length - 2)
                    return false;
                return _handlers[name];
            }
            WebWorker.getHandler = getHandler;
            function unregisterHandler(name) {
                if (!name)
                    return false;
                if (name.indexOf('__') === 0 && name.lastIndexOf('__') === name.length - 2)
                    return false;
                return delete _handlers[name];
            }
            WebWorker.unregisterHandler = unregisterHandler;
            var _private = false;
            var Server = (function () {
                function Server() {
                    this.onPostMessageError = function (e, data) {
                        this.postMessage({ Id: data.Id, IsError: true, Data: "UnExpectedError", keepAlive: false });
                    }.bind(this);
                    this.Start();
                }
                Server.prototype.Start = function () {
                    this._worker = self;
                    this._worker.addEventListener('error', this._onerror.bind(this), { capture: true });
                    this._worker.addEventListener('message', this._onmessage.bind(this), { capture: true });
                };
                Server.prototype._onerror = function (e) {
                };
                Server.prototype._onmessage = function (e) {
                    var data = e.data;
                    var handler = _handlers[data.Handler];
                    var event = { e: e, Msg: data, Result: undefined, Handled: false, Thread: this };
                    var rslt = tryCatch(handler, this._onHandlerError, [event], this);
                    if (event.Handled)
                        return;
                    this.postMessage({ Id: data.Id, Data: event.Result || rslt, keepAlive: event.keepAlive }, e.origin, e.ports, e.ports.slice());
                };
                Server.prototype._onHandlerError = function (e, v) {
                    v.Error = true;
                    v.Handled = true;
                    this.postMessage({ Id: v.Msg.Id, IsError: true, Data: e, keepAlive: false });
                };
                Server.prototype.postMessage = function (data, targetOrigin, transfers, ports) {
                    if (!ports || ports.length == 0) {
                        var p = isWorker ? [data, transfers] : [data, !targetOrigin ? void 0 : targetOrigin, transfers];
                        tryCatch(this._worker.postMessage, this.onPostMessageError, p, this._worker);
                    }
                    else {
                        p = [data];
                        for (var i = 0; i < ports.length; i++)
                            tryCatch(ports[i].postMessage, this.onPostMessageError, p, ports[i]);
                    }
                };
                Server.Start = function () {
                    this.Default = new Server();
                };
                return Server;
            }());
            WebWorker.Server = Server;
            var Client = (function () {
                function Client(_url) {
                    this._url = _url;
                    this._quee = {};
                    this.Start();
                }
                Client.prototype.Start = function () {
                    this._worker = new Worker(this._url);
                    this._worker.addEventListener('error', this._onerror.bind(this), { capture: true });
                    this._worker.addEventListener('message', this._onmessage.bind(this), { capture: true });
                };
                Client.prototype.Send = function (packet) {
                    var id = performance.now();
                    packet.Id = id;
                    this._quee[id] = packet;
                    this._worker.postMessage({ Id: id, Data: packet.data, Handler: packet.handler });
                };
                Client.prototype._onmessage = function (e) {
                    var data = e.data;
                    var q = this._quee[data.Id];
                    if (!q)
                        return;
                    tryCatch(q.callback, undefined, [q, data], q);
                    if (!data.keepAlive)
                        delete this._quee[data.Id];
                };
                Client.prototype._onerror = function (e) {
                };
                Client.counter = 0;
                return Client;
            }());
            WebWorker.Client = Client;
            function tryCatch(_try, _catch, params, owner) {
                try {
                    return _try && _try.apply(owner, params);
                }
                catch (e) {
                    (params = params.slice()).unshift(e);
                    return _catch && _catch.apply(owner, params);
                }
            }
            (function () {
                function registerHandler(name, handler) {
                    _handlers[name] = handler;
                }
                registerHandler('getValue', function (e) { return self[e.Msg.Data]; });
                registerHandler('__close__', function (e) { if (isWorker)
                    self.close(); return isWorker; });
                registerHandler('__loadScripts__', function (e) { importScripts(e.Msg.Data); });
                registerHandler('__hasHandler__', function (e) { return _handlers[e.Msg.Handler] instanceof Function; });
                registerHandler('__href__', function (e) { return location.href; });
                registerHandler('__getHandlers__', function (e) { return Object.keys(_handlers); });
                registerFetchHandler();
            })();
            function registerFetchHandler() {
                Workers.WebWorker.registerHandler('fetch', function (e) {
                    var dt = e.Msg.Data;
                    e.keepAlive = true;
                    e.Handled = true;
                    var pors = e.e.ports && e.e.ports.slice();
                    var org = e.e.origin;
                    fetch(new Request(dt.request.request)).then(function (e1) {
                        dt.response = { 'data': true };
                        e.Thread.postMessage({ Data: dt, Id: e.Msg.Id, IsError: false, keepAlive: false }, org, pors, pors);
                    });
                });
            }
        })(WebWorker = Workers.WebWorker || (Workers.WebWorker = {}));
    })(Workers = exports.Workers || (exports.Workers = {}));
    var swReg;
    function clone(obj) {
        if (!obj)
            return obj;
        if (typeof obj === 'object') {
            var copy = {};
            for (var attr in obj)
                if (obj.hasOwnProperty(attr))
                    copy[attr] = obj[attr];
            return copy;
        }
        else if (obj instanceof Array)
            return obj.splice(0);
        return obj;
    }
    ;
    var ServiceWorker = (function () {
        function ServiceWorker() {
        }
        ServiceWorker.Start = function (url, scope) {
            return navigator.serviceWorker.register(url, scope ? { scope: scope } : void 0).then(function (reg) {
                swReg = clone(swReg);
                console.log("SW registration succeeded. Scope is " + reg.scope);
            }).catch(function (err) {
                console.error("SW registration failed with error " + err);
            });
        };
        ServiceWorker.postMessageToSW = function (data) {
            return new Promise(function (onSucc, onErr) {
                navigator.serviceWorker.getRegistration().then(function (reg) {
                    var msg_chan = new MessageChannel();
                    reg.active.postMessage(data, [msg_chan.port2]);
                    msg_chan.port1.onmessage = function (e) {
                        var dt = e.data;
                        (dt.IsError ? onErr : onSucc)(dt.IsError ? { IsError: true, Action: data, Result: dt } : { Action: data, Result: dt });
                    };
                }).catch(function (e) {
                    onErr({ IsError: true, Action: data, Result: e });
                });
            });
        };
        return ServiceWorker;
    }());
    exports.ServiceWorker = ServiceWorker;
    if (typeof window !== 'undefined')
        window['SW'] = ServiceWorker;
    ServiceWorker.postMessageToSW({ Data: { request: '/index.html' } }).then(function (a, b) { debugger; });
});
define("sys/Facebook", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Scops;
    (function (Scops) {
        Scops[Scops["email"] = 0] = "email";
        Scops[Scops["public_profile"] = 1] = "public_profile";
        Scops[Scops["read_custom_friendlists"] = 2] = "read_custom_friendlists";
        Scops[Scops["user_about_me"] = 3] = "user_about_me";
        Scops[Scops["user_birthday"] = 4] = "user_birthday";
        Scops[Scops["user_education_history"] = 5] = "user_education_history";
        Scops[Scops["user_friends"] = 6] = "user_friends";
        Scops[Scops["user_hometown"] = 7] = "user_hometown";
        Scops[Scops["user_location"] = 8] = "user_location";
        Scops[Scops["user_relationship_details"] = 9] = "user_relationship_details";
        Scops[Scops["user_relationships"] = 10] = "user_relationships";
        Scops[Scops["user_religion_politics"] = 11] = "user_religion_politics";
        Scops[Scops["user_work_history"] = 12] = "user_work_history";
        Scops[Scops["publish_actions"] = 13] = "publish_actions";
        Scops[Scops["invitable_friends"] = 14] = "invitable_friends";
        Scops[Scops["manage_pages"] = 15] = "manage_pages";
        Scops[Scops["read_page_mailboxes"] = 16] = "read_page_mailboxes";
    })(Scops = exports.Scops || (exports.Scops = {}));
    var appTestID = '394907654315490';
    var appID = '1619534588085111';
    var Facebook = (function () {
        function Facebook(AppID, debug) {
            if (AppID === void 0) { AppID = appTestID; }
            if (debug === void 0) { debug = true; }
            this.AppID = AppID;
            this.scops = [];
            if (_default != null)
                throw null;
            _default = this;
            var js, fjs = document.getElementsByTagName('script')[0];
            if (!document.getElementById('facebook-jssdk')) {
                js = document.createElement('script');
                js.id = 'facebook-jssdk';
                var dbg = 'https://connect.facebook.net/en_US/all/debug.js';
                js.src = dbg || (debug ? "https://connect.facebook.net/en_US/sdk/debug.js" : "https://connect.facebook.net/en_US/sdk.js");
                fjs.parentNode.insertBefore(js, fjs);
            }
            this.init = this.init.bind(this);
            this.init();
        }
        Object.defineProperty(Facebook.prototype, "IsConnected", {
            get: function () { return this.status === 'connected' ? true : (this.status === 'not_authorized' ? false : null); },
            enumerable: true,
            configurable: true
        });
        Facebook.prototype._parseResponse = function (r) {
            this.status = r.status;
            if (r.authResponse)
                for (var i in r.authResponse)
                    this[i] = r.authResponse[i];
            else {
                this.accessToken = "";
                this.expiresIn = 0;
                this.grantedScopes = "";
                this.signedRequest = "";
                this.userID = "";
            }
        };
        Facebook.prototype.AsyncIsConnected = function (callback) {
            var _this = this;
            FB.getLoginStatus(function (response) {
                _this._parseResponse(response);
                callback && callback(_this, response.status === 'connected');
            });
        };
        Facebook.prototype.AllScops = function () {
            var scps = [];
            for (var i in Scops) {
                var v = Scops[i];
                if (typeof v === 'string')
                    scps.push(Scops[i]);
            }
            this.RegisterScop(scps);
        };
        Facebook.prototype.Connect = function (callback) {
            var _this = this;
            FB.login(function (r) {
                _this._parseResponse(r);
                callback && callback(_this);
            }, { scope: this.scops.join(','), enable_profile_selector: true, return_scopes: true, });
        };
        Facebook.prototype.fbAsyncInit = function () {
            FB.init({
                appId: this.AppID,
                cookie: true,
                xfbml: true,
                version: 'v2.8'
            });
            this.AsyncIsConnected();
        };
        Facebook.prototype.init = function () {
            var _this = this;
            if (window['fbAsyncInit'])
                setTimeout(this.init, 200);
            window['fbAsyncInit'] = function (x) {
                window['fbAsyncInit'] = undefined;
                _this.fbAsyncInit();
            };
        };
        Facebook.prototype.Login = function (callback) {
            FB.login(callback);
        };
        Facebook.prototype.getFriendsList = function (callback) {
            this.AsyncIsConnected(function (r) {
                if (r.IsConnected)
                    FB.api('/' + r.userID + '/friendlists', function (response) {
                        callback(r, response);
                    });
            });
        };
        Object.defineProperty(Facebook.prototype, "Scops", {
            get: function () { return this.scops; },
            enumerable: true,
            configurable: true
        });
        Facebook.prototype.RegisterScop = function (args) {
            var isn = this._processedArrays == null;
            if (isn)
                this._processedArrays = [];
            switch (typeof args) {
                case 'number':
                    var s = Scops[args];
                    if (typeof s === 'string')
                        this.scops.indexOf(s) === -1 && this.scops.push(s);
                    break;
                case 'string':
                    s = args;
                    var si = Scops[s];
                    if (typeof si === 'number')
                        this.scops.indexOf(args) === -1 && this.scops.push(args);
                    break;
                case 'object':
                    if (args instanceof Array) {
                        if (this._processedArrays.indexOf(args) !== -1)
                            return;
                        this._processedArrays.push(args);
                        for (var i = 0; i < args.length; i++)
                            this.RegisterScop(args[i]);
                    }
                    break;
                default:
            }
            if (isn)
                this._processedArrays = null;
        };
        Facebook.prototype.someApi = function () {
            var c = null;
            FB.login(function (r) { stop(); }, { scope: 'public_profile,email,invitable_friends' });
        };
        Facebook.Default = function (appId, debug) {
            return _default || (_default = new Facebook(appId, debug));
        };
        return Facebook;
    }());
    exports.Facebook = Facebook;
    var _default = null;
    exports.Fields_Names = ['about', 'id', 'address', 'admin_notes', 'age_range', 'birthday', 'can_review_measurement_request', 'context', 'cover', 'currency', 'devices', 'education', 'email', 'employee_number', 'favorite_athletes', 'favorite_teams', 'first_name', 'gender', 'hometown', 'inspirational_people', 'install_type', 'installed', 'interested_in', 'is_payment_enabled', 'is_shared_login', 'is_verified', 'labels', 'languages', 'last_ad_referral', 'last_name', 'link', 'local_news_megaphone_dismiss_status', 'local_news_subscription_status', 'locale', 'location', 'meeting_for', 'middle_name', 'name', 'name_format', 'payment_pricepoints', 'political', 'profile_pic', 'public_key', 'quotes', 'relationship_status', 'religion', 'security_settings', 'shared_login_upgrade_required_by', 'short_name', 'significant_other', 'sports', 'test_group', 'third_party_id', 'timezone', 'token_for_business', 'updated_time', 'verified', 'video_upload_limits', 'viewer_can_send_gift', 'website', 'work'];
    var EFields;
    (function (EFields) {
        EFields["about"] = "about";
        EFields["id"] = "id";
        EFields["address"] = "address";
        EFields["admin_notes"] = "admin_notes";
        EFields["age_range"] = "age_range";
        EFields["birthday"] = "birthday";
        EFields["can_review_measurement_request"] = "can_review_measurement_request";
        EFields["context"] = "context";
        EFields["cover"] = "cover";
        EFields["currency"] = "currency";
        EFields["devices"] = "devices";
        EFields["education"] = "education";
        EFields["email"] = "email";
        EFields["employee_number"] = "employee_number";
        EFields["favorite_athletes"] = "favorite_athletes";
        EFields["favorite_teams"] = "favorite_teams";
        EFields["first_name"] = "first_name";
        EFields["gender"] = "gender";
        EFields["hometown"] = "hometown";
        EFields["inspirational_people"] = "inspirational_people";
        EFields["install_type"] = "install_type";
        EFields["installed"] = "installed";
        EFields["interested_in"] = "interested_in";
        EFields["is_payment_enabled"] = "is_payment_enabled";
        EFields["is_shared_login"] = "is_shared_login";
        EFields["is_verified"] = "is_verified";
        EFields["labels"] = "labels";
        EFields["languages"] = "languages";
        EFields["last_ad_referral"] = "last_ad_referral";
        EFields["last_name"] = "last_name";
        EFields["link"] = "link";
        EFields["local_news_megaphone_dismiss_status"] = "local_news_megaphone_dismiss_status";
        EFields["local_news_subscription_status"] = "local_news_subscription_status";
        EFields["locale"] = "locale";
        EFields["location"] = "location";
        EFields["meeting_for"] = "meeting_for";
        EFields["middle_name"] = "middle_name";
        EFields["name"] = "name";
        EFields["name_format"] = "name_format";
        EFields["payment_pricepoints"] = "payment_pricepoints";
        EFields["political"] = "political";
        EFields["profile_pic"] = "profile_pic";
        EFields["public_key"] = "public_key";
        EFields["quotes"] = "quotes";
        EFields["relationship_status"] = "relationship_status";
        EFields["religion"] = "religion";
        EFields["security_settings"] = "security_settings";
        EFields["shared_login_upgrade_required_by"] = "shared_login_upgrade_required_by";
        EFields["short_name"] = "short_name";
        EFields["significant_other"] = "significant_other";
        EFields["sports"] = "sports";
        EFields["test_group"] = "test_group";
        EFields["third_party_id"] = "third_party_id";
        EFields["timezone"] = "timezone";
        EFields["token_for_business"] = "token_for_business";
        EFields["updated_time"] = "updated_time";
        EFields["verified"] = "verified";
        EFields["video_upload_limits"] = "video_upload_limits";
        EFields["viewer_can_send_gift"] = "viewer_can_send_gift";
        EFields["website"] = "website";
        EFields["work"] = "work";
    })(EFields = exports.EFields || (exports.EFields = {}));
    exports.Edges_fields = ['accounts', 'achievements', 'ad_studies', 'adaccounts', 'adcontracts', 'adnetworkanalytics', 'albums', 'apprequestformerrecipients', 'apprequests', 'asset3ds', 'assigned_ad_accounts', 'assigned_monetization_properties', 'assigned_pages', 'assigned_product_catalogs', 'books', 'business_activities', 'business_users', 'businesses', 'conversations', 'curated_collections', 'custom_labels', 'domains', 'events', 'family', 'favorite_requests', 'friendlists', 'friends', 'games', 'groups', 'ids_for_apps', 'ids_for_business', 'ids_for_pages', 'invitable_friends', 'leadgen_forms', 'likes', 'live_encoders', 'live_videos', 'movies', 'music', 'objects', 'permissions', 'personal_ad_accounts', 'photos', 'picture', 'promotable_domains', 'promotable_events', 'request_history', 'rich_media_documents', 'session_keys', 'stream_filters', 'taggable_friends', 'tagged_places', 'television', 'threads', 'video_broadcasts', 'videos', 'checkins', 'feed', 'friendrequests', 'home', 'inbox', 'locations', 'mutualfriends', 'notifications', 'outbox', 'questions', 'scores', 'subscribers', 'subscribedto'];
});
define("sys/Initializer", ["require", "exports", "sys/Corelib", "sys/UI"], function (require, exports, Corelib_7, UI_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function initTwoWay(xx, p) {
        return undefined;
    }
    function checkTwoWay(xx, p) {
        if (p.value == 'true')
            p.value = Corelib_7.bind.BindingMode.TwoWay;
        else if (p.value == 'false')
            p.value = Corelib_7.bind.BindingMode.SourceToTarget;
        else
            p.value = isNaN(Number(p.value)) ? Corelib_7.bind.BindingMode[p.value] || Corelib_7.bind.BindingMode.SourceToTarget : Number(p.value);
        return true;
    }
    function processComplicatedAttribute(xx, p) {
        var dom = xx.e.dom, parent = xx.parent.Scop, _scop = xx.Scop, tsm = xx.e.Jobs, attribute = p.value;
        var isCmd;
        var x = attribute.split("->");
        var _bind = x[0] || '';
        var job = x[1] || '';
        if (job.length === 0)
            return;
        if (job[0] === '#')
            isCmd = true, job = job.substr(1);
        if (job.length === 0)
            return;
        if (_bind[0] == '.') {
            parent = _scop || parent;
            _bind = _bind.substr(1);
        }
        else if (parent == null)
            parent = _scop;
        if (_bind.length > 0)
            _scop = Corelib_7.bind.Scop.Create(_bind, parent, attribute.indexOf('<->') !== -1 ? Corelib_7.bind.BindingMode.TwoWay :
                attribute.indexOf('->') ? Corelib_7.bind.BindingMode.SourceToTarget : Corelib_7.bind.BindingMode.TargetToSource);
        if (isCmd)
            return Corelib_7.ScopicCommand.Call(job, dom, _scop);
        var ijob = job == '.' ? _scop.GetJob(job.substring(1)) : Corelib_7.bind.GetJob(job);
        var ji = _scop.AddJob(ijob, dom);
        tsm.push(ji);
    }
    var bmode;
    (function (bmode) {
        bmode[bmode["<->"] = 3] = "<->";
        bmode[bmode["->"] = 1] = "->";
        bmode[bmode["<-"] = 2] = "<-";
    })(bmode || (bmode = {}));
    function bindString(x, p) {
        var scop = x.Scop, controller = x.controller;
        var s = "" + p.value;
        for (var i = 3; i > 0; i--) {
            if (s.indexOf(bmode[i]) != -1) {
                var bindMode = i;
                break;
            }
        }
        if (!bindMode)
            return;
        var x1 = s.split(bmode[bindMode]);
        var s1 = Corelib_7.bind.Scop.GenerateScop(x1[0], scop, 3, controller);
        var s2 = Corelib_7.bind.Scop.GenerateScop(x1[1], scop, 3, controller);
        if (!s1 || !s2)
            return;
        var tx = new Corelib_7.bind.TwoBind(bindMode, s1, s2, Corelib_7.bind.Scop.DPValue, Corelib_7.bind.Scop.DPValue);
        controller.OnDisposing = function (s) {
            tx.Dispose();
        };
    }
    function DeclareAttribute(x, p) {
        (x.parent.Scop || x.Scop) && (x.parent.Scop || x.Scop).setAttribute(p.value, undefined);
        return undefined;
    }
    function InitTemplate(x, p) {
        var createTemplate = function (templatePath, dom) {
            if (templatePath) {
                var template = Corelib_7.mvc.MvcDescriptor.Get(templatePath);
                dom = template.Create();
            }
            else
                throw "template args not setted";
            return dom;
        };
        var dom = x.e.dom;
        var ndom = createTemplate(p.value, dom);
        if (dom != ndom) {
            for (var i = 0; i < dom.attributes.length; i++) {
                var c = dom.attributes.item(i);
                if (c.name === 'compiled' || c.name.indexOf('db-') === 0) {
                    continue;
                }
                ndom.setAttribute(c.name, c.value);
            }
            dom.parentNode.replaceChild(ndom, dom);
            dom = ndom;
        }
        var e1 = Corelib_7.Processor.Compile(x.New(dom));
        if (!e1)
            stop();
        return { e: e1 || x.e, Break: true };
    }
    function extraxtScop(x, p) {
        var tw = p.manager.getProcessorByAttribute('db-twoway');
        x.e.Scop = p.value ? Corelib_7.bind.Scop.Create(p.value, x.parent.Scop, tw && tw.value, x.controller) || x.parent.Scop : x.parent.Scop;
        x.e.IsNew = x.e.Scop != x.parent.Scop;
        if (!x.e.Scop)
            x.e.Scop = x.parent.Scop || x.controller.Scop;
        return undefined;
    }
    function strTemplate(x, p) {
        var c = Corelib_7.bind.StringScop.GetStringScop(x.Dom.textContent, x.Scop, x.controller);
        if (typeof c === 'string')
            return undefined;
        c.AttacheTo(x.Dom);
        x.e.Scop = c;
        x.e.IsNew = true;
        if (!x.e.Scop)
            x.e.Scop = x.parent.Scop || x.controller.Scop;
        return undefined;
    }
    function initLocalValues(x, p) {
        for (var ic in p.value)
            x.Scop.setAttribute(ic, p.value[ic]);
        return undefined;
    }
    function executeFilter(x, p) {
        var tw = p.manager.getProcessorByAttribute('db-twoway');
        x.e.Scop = Corelib_7.bind.CreateFilter(p.value, x.Scop, tw && tw.value || 3);
        return undefined;
    }
    function execJobs(x, p) {
        var e = x.e, control = x.parent.Control, parentScop = x.parent.Scop;
        var tsm = e.Jobs;
        var ts = p.value.split('|');
        for (var i = 0, l = ts.length; i < l; i++) {
            var jn = ts[i];
            var job = jn[0] == '.' ? x.Scop.GetJob(jn.substring(1)) : Corelib_7.bind.GetJob(ts[i]);
            var ji = x.Scop.AddJob(job, e.dom);
            tsm.push(ji);
            if (!e.Control) {
                if (ji.Control instanceof UI_1.UI.JControl)
                    ji.Control.Parent = control;
                e.Control = ji.Control;
            }
        }
        return undefined;
    }
    function getFirstChild(dom) {
        var f = dom.firstChild;
        var node;
        while (f) {
            if (f instanceof Element)
                return f;
            if (!node && f instanceof Node)
                node = f;
            f = f.nextSibling;
        }
        return node;
    }
    function createControl(x, p) {
        var parentScop = x.parent.Scop, parentControl = x.parent.Control, controller = x.controller, e = x.e;
        var child = getFirstChild(e.dom);
        e.dom.removeAttribute('db-control');
        var cnt = Corelib_7.ScopicControl.create({ name: p.value, dom: child, currentScop: x.Scop || parentScop, parentScop: parentScop, parentControl: parentControl, controller: controller, e: e });
        e.Control = cnt;
        cnt.Parent = parentControl;
        var parent = e.dom.parentNode || e.dom.parentElement;
        if (parent && child !== e.dom) {
            parent.replaceChild(child, e.dom);
            e.dom = child;
        }
        return undefined;
    }
    function createList(x, p) {
        var parentScop = x.parent.Scop, parentControl = x.parent.Control, controller = x.controller, e = x.e;
        var tw = p.manager.getProcessorByAttribute('db-twoway');
        var scop = x.Scop || parentScop;
        if (p.value)
            scop = Corelib_7.bind.Scop.Create(p.value, scop, tw && tw.value, controller);
        var cnt = Corelib_7.ScopicControl.create({ name: 'foreach', dom: e.dom, currentScop: scop, parentScop: parentScop, parentControl: parentControl, controller: controller, e: e });
        e.Control = cnt;
        cnt.Parent = parentControl;
        var parent = e.dom.parentNode || e.dom.parentElement;
        return undefined;
    }
    function _setName(name, cnt, e) {
        var x = cnt;
        while (x) {
            try {
                if (x.setName) {
                    if (x.setName(name, e.dom, cnt, e) == false)
                        continue;
                    else
                        return true;
                }
            }
            catch (w) { }
            x = x.Parent;
        }
    }
    function setName(x, p) {
        var name = p.value, parentControl = x.controller.CurrentControl, e = x.e;
        _setName(name, e.Control, e) || _setName(name, parentControl, e);
        return undefined;
    }
    function setProp(x, p) {
        var name = p.value, parentControl = x.controller.CurrentControl, e = x.e;
        parentControl;
        _setName(name, e.Control, e) || _setName(name, parentControl, e);
        return undefined;
    }
    function Todo(x, p) {
        var parentScop = x.parent.Scop, e = x.e, controller = x.controller;
        var s = Corelib_7.bind.Scop.Create(p.value, parentScop, 0, controller);
        s &&
            x.Scop.AddJob({
                scopFunction: s,
                Todo: Corelib_7.bind.Todo.prototype.Todo,
            }, e.dom);
        return undefined;
    }
    function executeCommand(x, p) {
        for (var _i = 0, _a = p.value.split('|'); _i < _a.length; _i++) {
            var xi = _a[_i];
            Corelib_7.ScopicCommand.Call(xi, x.e.dom, x.Scop);
        }
        return undefined;
    }
    Corelib_7.Processor.Register({ name: 'twoway', attribute: 'db-twoway', execute: initTwoWay, check: checkTwoWay, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'bind', attribute: 'db-bind', execute: extraxtScop, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'str', attribute: 'db-str', execute: strTemplate, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'filter', attribute: 'db-filter', execute: executeFilter, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'init', attribute: 'db-init', execute: initLocalValues, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'dec', attribute: 'db-dec', execute: DeclareAttribute, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'set', attribute: 'db-set', execute: bindString, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'template', attribute: 'db-template', execute: InitTemplate, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'foreach', attribute: 'db-foreach', execute: createList, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'control', attribute: 'db-control', execute: createControl, isPrimitive: true });
    Corelib_7.Processor.Register({ name: 'cmd', attribute: 'db-cmd', execute: executeCommand, isFinalizer: true });
    Corelib_7.Processor.Register({ name: 'job', attribute: 'db-job', execute: execJobs, isFinalizer: true });
    Corelib_7.Processor.Register({ name: 'exec', attribute: 'db-exec', execute: processComplicatedAttribute, isFinalizer: true });
    Corelib_7.Processor.Register({ name: 'todo', attribute: 'db-todo', execute: Todo, isFinalizer: true });
    Corelib_7.Processor.Register({ name: 'prop', attribute: 'db-prop', execute: setName, isFinalizer: true, priority: 9007199254740991 });
    Corelib_7.Processor.Register({ name: 'name', attribute: 'db-name', execute: setName, isFinalizer: true, priority: Number.MAX_VALUE });
    var bom;
    (function (bom) {
        function load() {
        }
        bom.load = load;
    })(bom = exports.bom || (exports.bom = {}));
});
define("sys/Services", ["require", "exports", "sys/Corelib", "sys/System", "sys/UI", "sys/QModel"], function (require, exports, Corelib_8, System_3, UI_2, QModel_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var requester;
    var services;
    (function (services) {
        var AlertMessage = (function () {
            function AlertMessage() {
                this.Name = 'alert';
            }
            AlertMessage.prototype.OnResponse = function (proxy, webr, json) {
                UI_2.UI.Modal.ShowDialog(json.sdata.Title, json.sdata.Content, null, 'OK', null);
            };
            return AlertMessage;
        }());
        services.AlertMessage = AlertMessage;
        var ConfirmMessage = (function () {
            function ConfirmMessage() {
                this.Name = 'confirm';
            }
            ConfirmMessage.prototype.OnResponse = function (proxy, webr, json) {
                var _this = this;
                var c = new Corelib_8.encoding.SerializationContext(true);
                var e = c.FromJson(json.sdata, QModel_1.models.Message, null);
                c.Dispose();
                switch (e.Type) {
                    case 0:
                    case 1:
                        if (proxy.callBack)
                            proxy.callBack(proxy, json, undefined);
                        return;
                    case 2:
                    case 3:
                        e.Callback = {
                            ProxyCallback: proxy,
                            Request: webr.current,
                            QueeDownloader: webr,
                        };
                        var elm = document.createElement('div');
                        elm.innerHTML = e.Content;
                        var t = new UI_2.UI.TControl(elm, e.Data);
                        UI_2.UI.Modal.ShowDialog(e.Title, t, function (xx) { return _this.OnMessageClosed(xx, e); }, e.OKText, e.CancelText, e.AbortText);
                        return;
                }
            };
            ConfirmMessage.prototype.OnMessageClosed = function (xx, e) {
                e.Action = UI_2.UI.MessageResult[xx.Result].toLowerCase();
                requester.Post(QModel_1.models.Message, e, null, function (s, r, iss, req) {
                    if (iss) {
                        var t = e.Callback;
                        t.QueeDownloader.Insert(t.Request);
                        e.Dispose();
                    }
                    else
                        e.Dispose();
                });
            };
            return ConfirmMessage;
        }());
        services.ConfirmMessage = ConfirmMessage;
        var SpeechMessage = (function () {
            function SpeechMessage() {
                this.Name = 'speech';
            }
            SpeechMessage.prototype.OnResponse = function (proxy, webr, json) {
                var _this = this;
                var c = new Corelib_8.encoding.SerializationContext(true);
                var e = c.FromJson(json.sdata, QModel_1.models.Message, null);
                c.Dispose();
                switch (e.Type) {
                    case 0:
                    case 1:
                        if (proxy.callBack)
                            proxy.callBack(proxy, json, undefined);
                        return;
                    case 2:
                    case 3:
                        e.Callback = {
                            ProxyCallback: proxy,
                            Request: webr.current,
                            QueeDownloader: webr,
                        };
                        var elm = document.createElement('div');
                        elm.innerHTML = e.Content;
                        var t = new UI_2.UI.TControl(elm, e.Data);
                        UI_2.UI.Modal.ShowDialog(e.Title, t, function (xx) { return _this.OnMessageClosed(xx, e); }, e.OKText, e.CancelText, e.AbortText);
                        return;
                }
            };
            SpeechMessage.prototype.OnMessageClosed = function (xx, e) {
                e.Action = UI_2.UI.MessageResult[xx.Result].toLowerCase();
                e.privateDecompress = true;
                requester.Post(QModel_1.models.Message, e, null, function (s, r, iss, req) {
                    e.Callback.ProxyCallback.Callback(e.Callback.QueeDownloader, req);
                });
            };
            return SpeechMessage;
        }());
        services.SpeechMessage = SpeechMessage;
        var InfoNotification = (function () {
            function InfoNotification() {
                this.Name = 'notification';
            }
            InfoNotification.prototype.OnResponse = function (proxy, webr, json) {
                UI_2.UI.InfoArea.push(json.sdata.Content, json.sdata.IsInfo, json.sdata.Expire);
            };
            return InfoNotification;
        }());
        services.InfoNotification = InfoNotification;
        var notfication = (function () {
            function notfication() {
                this.Name = 'notfication';
            }
            notfication.prototype.OnResponse = function (proxy, webr, json) {
                var x = document.location.origin;
                window.location.assign(x + "/admin");
                localStorage.clear();
                document.cookie = 'id=;';
                document.close();
                json.dropRequest = true;
                UI_2.UI.InfoArea.push(json.sdata.Content, json.sdata.IsInfo, json.sdata.Expire);
            };
            return notfication;
        }());
        services.notfication = notfication;
    })(services || (services = {}));
    function Load(_requester) {
        requester = _requester;
        System_3.Controller.Register(new services.AlertMessage());
        System_3.Controller.Register(new services.ConfirmMessage());
        System_3.Controller.Register(new services.SpeechMessage());
        System_3.Controller.Register(new services.InfoNotification());
        System_3.Controller.Register(new services.notfication());
        System_3.Controller.Register({
            Name: 'guid', OnResponse: function (proxy, webr, json) {
                var d = json.sdata;
                if (typeof d === 'number') {
                    Corelib_8.basic.setGuidRange(d, d + 2000 - 1);
                }
                else if (d instanceof Array) {
                    Corelib_8.basic.setGuidRange(d[0], d[1]);
                }
                else
                    throw "Invalide Exception";
            }
        });
    }
    exports.Load = Load;
});
define("sys/Critere", ["require", "exports", "sys/Corelib", "sys/UI"], function (require, exports, Corelib_9, UI_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Bool = Boolean;
    var __typesDesc = new Corelib_9.collection.Dictionary("test");
    var Critere;
    (function (Critere_1) {
        var Critere = (function (_super) {
            __extends(Critere, _super);
            function Critere() {
                var _this = _super.call(this) || this;
                _this.Scop = new Corelib_9.bind.ValueScop(_this, Corelib_9.bind.BindingMode.TwoWay);
                return _this;
            }
            Critere.prototype.Check = function (s) {
                { }
                return this.isMatch(s);
            };
            Critere.prototype.convertFromString = function (x) {
                throw new Error("Method not implemented.");
            };
            Critere.prototype.Begin = function (deb, count) {
                this.deb = deb;
                this.fin = deb + count;
                return !this.IsQuerable();
            };
            Critere.prototype.IsMatch = function (i, item) {
                return i >= this.deb && i < this.fin && this.isMatch(item);
            };
            Critere.prototype.equals = function (p) {
                return p == this;
            };
            Critere.prototype.Activate = function () {
                this.Scop.setAttribute('activate', true);
                var s = this.Scop.getScop('activate');
            };
            Critere.prototype.Disactivate = function () {
                this.Scop.setAttribute('activate', false);
            };
            Critere.prototype.GetMatchs = function (p) {
                if (!this.IsQuerable())
                    return p;
                var v = [];
                for (var i = 0; i < p.length; i++) {
                    var x = p[i];
                    if (this.isMatch(x))
                        v.push(x);
                }
                return v;
            };
            Object.defineProperty(Critere.prototype, "View", {
                get: function () {
                    return this._view || (this._view = this.getView());
                },
                enumerable: true,
                configurable: true
            });
            Critere.prototype.isMatch = function (v) {
                return this._isMatch(v);
            };
            Critere.prototype.IsActivated = function () {
                var s = this.Scop.getScop('activate');
                return !!(s && s.Value);
            };
            Critere.prototype.init = function () {
                var vls = this.GetType().getFields();
                for (var i = 0; i < vls.length; i++) {
                    var p = vls[i];
                    if (Corelib_9.reflection.IsInstanceOf(p.Type, Text)) {
                        this.set(p, new Text(p.Name));
                    }
                    else if (Corelib_9.reflection.IsInstanceOf(p.Type, Vector)) {
                        this.set(p, new Vector(p.Name));
                    }
                    else if (Corelib_9.reflection.IsInstanceOf(p.Type, Period)) {
                        this.set(p, new Period(p.Name));
                    }
                    else if (Corelib_9.reflection.IsInstanceOf(p.Type, Boolean)) {
                        this.set(p, new Boolean(p.Name));
                    }
                    else
                        throw null;
                }
            };
            Critere.getTypeOf = function (type) {
                return this.Get(type).CritereType;
            };
            Critere.prototype.smartClear = function () {
                var vls = this.GetValues();
                for (var n in vls) {
                    var v = vls[n];
                    if (v instanceof Critere)
                        v.clear();
                }
            };
            Critere.ctor = function () {
                this.Register(String, Text, {}, function (o, dp, mvc, prm) { return new Text((prm && prm.label) || dp.Name); });
                this.Register(Bool, Boolean, {}, function (o, dp, mvc, prm) { return new Boolean((prm && prm.label) || dp.Name); });
                this.Register(Number, Vector, {}, function (o, dp, mvc, prm) { return new Vector((prm && prm.label) || dp.Name); });
                this.Register(Date, Period, {}, function (o, dp, mvc, prm) { return new Period((prm && prm.label) || dp.Name); });
            };
            Critere.Register = function (PropertyType, CritereType, Properties, CreateView) {
                __typesDesc.Set(PropertyType, { CritereType: CritereType, PropertyType: PropertyType, CreateView: CreateView, Properties: Properties });
            };
            Critere.Get = function (type, strict) {
                if (type instanceof Corelib_9.reflection.GenericType)
                    type = type.Constructor;
                else if (type instanceof Corelib_9.reflection.DelayedType)
                    type = type.Type;
                return __typesDesc.Get(type) || (strict ? null : __typesDesc.Get(String));
            };
            Critere.prototype.Open = function (callback) {
                var _this = this;
                if (!this.modal)
                    this.modal = new UI_3.UI.Modal();
                var m = this.modal;
                if (!m.IsInit)
                    m.OnInitialized = function (m) { m.Add(_this.View); m.OkTitle('Search'); m.Canceltitle('Cancel'); m.Title('QSearch'); };
                m.OnClosed.Add(function (m) {
                    if (m.Result == UI_3.UI.MessageResult.ok)
                        callback(_this);
                    m.Modal.OnClosed.Remove('');
                }, '');
                m.Open();
            };
            return Critere;
        }(Corelib_9.utils.Filter));
        Critere_1.Critere = Critere;
        var Unaire = (function (_super) {
            __extends(Unaire, _super);
            function Unaire() {
                return _super.call(this) || this;
            }
            Unaire.prototype.clear = function () {
                this.Value = null;
            };
            Unaire.__fields__ = function () { return [this.DPValue]; };
            Unaire.CheckType = function (e) {
                e.__this.CheckType(e);
            };
            Unaire.DPValue = Corelib_9.bind.DObject.CreateField('Value', Object, null, null, Unaire.CheckType);
            return Unaire;
        }(Critere));
        Critere_1.Unaire = Unaire;
        var Couple = (function (_super) {
            __extends(Couple, _super);
            function Couple() {
                return _super.call(this) || this;
            }
            Couple.__fields__ = function () { return [this.DPX, this.DPY]; };
            Couple.CheckType = function (e) {
                e.__this.CheckType(e);
            };
            Couple.DPX = Corelib_9.bind.DObject.CreateField('X', Object, null, null, Couple.CheckType);
            Couple.DPY = Corelib_9.bind.DObject.CreateField('Y', Object, null, null, Couple.CheckType);
            return Couple;
        }(Critere));
        Critere_1.Couple = Couple;
        var Text = (function (_super) {
            __extends(Text, _super);
            function Text(label) {
                var _this = _super.call(this) || this;
                _this.Label = label || "Label";
                return _this;
            }
            Text.prototype.clear = function () {
                this.Value = null;
            };
            Text.prototype.getView = function () {
                return new UI_3.UI.TControl('templates.crtText', this.Scop);
            };
            Object.defineProperty(Text.prototype, "Label", {
                set: function (v) {
                    this.Scop.setAttribute('label', v);
                },
                enumerable: true,
                configurable: true
            });
            Text.prototype.CheckType = function (e) {
                e._new = e._new == null ? null : String(e._new).toLowerCase();
            };
            Text.prototype._isMatch = function (v) {
                var sv = this.Value;
                if (sv == null || sv == "")
                    return true;
                if (v == null)
                    return false;
                if (v == sv)
                    return true;
                return String(v).toLowerCase().indexOf(sv) != -1;
            };
            Object.defineProperty(Text.prototype, "Value", {
                get: function () {
                    return this.get(Unaire.DPValue);
                },
                set: function (v) {
                    this.set(Unaire.DPValue, v);
                },
                enumerable: true,
                configurable: true
            });
            Text.prototype.IsQuerable = function () {
                return (this.Value != null && String(this.Value).trim() !== "");
            };
            return Text;
        }(Unaire));
        Critere_1.Text = Text;
        var Boolean = (function (_super) {
            __extends(Boolean, _super);
            function Boolean(label) {
                var _this = _super.call(this) || this;
                _this.Label = label || "Label";
                return _this;
            }
            Boolean.prototype.clear = function () {
                this.Value = undefined;
            };
            Boolean.prototype.getView = function () {
                return new UI_3.UI.TControl('templates.crtBool', this.Scop);
            };
            Object.defineProperty(Boolean.prototype, "Label", {
                set: function (v) {
                    this.Scop.setAttribute('label', v);
                },
                enumerable: true,
                configurable: true
            });
            Boolean.prototype.CheckType = function (e) {
                e._new = e._new == null ? null : e._new === undefined ? undefined : !!e._new;
            };
            Boolean.prototype._isMatch = function (v) {
                var sv = this.Value;
                if (sv === undefined)
                    return true;
                return sv === v;
            };
            Boolean.prototype.IsQuerable = function () {
                return this.Value != null;
            };
            return Boolean;
        }(Unaire));
        Critere_1.Boolean = Boolean;
        var Vector = (function (_super) {
            __extends(Vector, _super);
            function Vector(title) {
                var _this = _super.call(this) || this;
                _this.Title = title || "Vector Title";
                _this.clear();
                return _this;
            }
            Vector.prototype.getView = function () {
                return new UI_3.UI.TControl('templates.crtVector', this.Scop);
            };
            Vector.prototype.CheckType = function (e) {
                if (typeof e._new === 'number')
                    return;
                if (typeof e._new === 'string')
                    e._new = parseFloat(e._new);
                else if (e._new == null)
                    return;
                else
                    e._new = e._old;
            };
            Vector.prototype._isMatch = function (v) {
                if (isNaN(v))
                    return true;
                var a = isNaN(this.X) ? -Number.MAX_VALUE : this.X || 0;
                var b = isNaN(this.Y) ? Number.MAX_VALUE : this.Y || 0;
                return v >= a && v <= b;
            };
            Object.defineProperty(Vector.prototype, "Title", {
                get: function () {
                    var x = this.Scop.getScop('title', false);
                    if (x)
                        return x.Value;
                    return null;
                },
                set: function (v) {
                    this.Scop.setAttribute('title', v);
                },
                enumerable: true,
                configurable: true
            });
            Vector.prototype.clear = function () { this.X = 0; this.Y = 0; };
            Vector.prototype.IsQuerable = function () {
                return this.X != null || this.Y != null;
            };
            return Vector;
        }(Couple));
        Critere_1.Vector = Vector;
        var minDate = new Date("1/1/1000");
        var maxDate = new Date("12/12/9999");
        var Period = (function (_super) {
            __extends(Period, _super);
            function Period(title) {
                var _this = _super.call(this) || this;
                _this.Title = title || "Period Title";
                return _this;
            }
            Period.prototype.getView = function () {
                return new UI_3.UI.TControl('templates.crtPeriod', this.Scop);
            };
            Period.prototype.CheckType = function (e) {
                if (typeof e._new === 'number' || typeof e._new === 'string')
                    e._new = new Date(e._new);
                else if (e._new instanceof Date)
                    return;
                else if (e._new == null)
                    return e._new = new Date();
                else
                    e._new = e._old;
            };
            Period.prototype.IsQuerable = function () {
                return (this.X != null || this.Y != null);
            };
            Period.prototype._isMatch = function (v) {
                if (v == null)
                    return true;
                var iv = v && v.getTime();
                return iv >= this.X.getTime() && iv <= this.Y.getTime();
            };
            Object.defineProperty(Period.prototype, "Title", {
                get: function () {
                    var x = this.Scop.getScop('title', false);
                    if (x)
                        return x.Value;
                    return null;
                },
                set: function (v) {
                    this.Scop.setAttribute('title', v);
                },
                enumerable: true,
                configurable: true
            });
            Period.prototype.clear = function () { this.Y = new Date(Date.now()); this.Y = new Date(0); };
            return Period;
        }(Couple));
        Critere_1.Period = Period;
        var ComplexCritere = (function (_super) {
            __extends(ComplexCritere, _super);
            function ComplexCritere() {
                var _this = _super.call(this) || this;
                _this.init();
                return _this;
            }
            Object.defineProperty(ComplexCritere.prototype, "Shema", {
                get: function () { return this.constructor.__shema; },
                enumerable: true,
                configurable: true
            });
            ComplexCritere.generateFieldsFrom = function (type, fields) {
                fields = fields || Corelib_9.bind.DObject.getFields(type);
                var _flds = [];
                var _propertiesSheam = [];
                for (var i = 0; i < fields.length; i++) {
                    var fld = fields[i];
                    if (!Corelib_9.reflection.IsInstanceOf(fld.Type, Corelib_9.collection.List)) {
                        var crDP = Corelib_9.bind.DObject.CreateField(fld.Name, this.getTypeOf(fld.Type));
                        _flds.push(crDP);
                        _propertiesSheam.push({ critereDP: crDP, propertyDP: fld });
                    }
                }
                this.__shema = {
                    critereType: this,
                    proxyType: type,
                    critereProperties: _flds,
                    propertiesSheam: _propertiesSheam
                };
                return this.__shema.critereProperties;
            };
            ComplexCritere.prototype.InitProperties = function (prams) {
                prams = prams || {};
                var flds = this.Shema.propertiesSheam;
                for (var i = 0; i < flds.length; i++) {
                    var p = flds[i];
                    var mvc = Critere.Get(p.propertyDP.Type);
                    this.set(p.critereDP, mvc.CreateView(this, p.propertyDP, mvc, prams[p.propertyDP.Name]));
                }
            };
            ComplexCritere.prototype.init = function () {
                this.InitProperties();
            };
            ComplexCritere.prototype.getView = function (container) {
                var c = container || new UI_3.UI.DivControl('section');
                var flds = this.Shema.propertiesSheam;
                flds = flds.sort(function (a, b) { return __typesDesc.IndexOf(a.propertyDP.Type); });
                for (var i = 0; i < flds.length; i++) {
                    var p = flds[i].critereDP;
                    var v = this.get(p);
                    if (v instanceof Critere)
                        c.Add(v.View);
                }
                return c;
            };
            ComplexCritere.prototype.clear = function () {
                var flds = Corelib_9.bind.DObject.getFields(this.GetType());
                for (var i = 0; i < flds.length; i++) {
                    var p = flds[i];
                    var v = this.get(p);
                    if (v instanceof Critere)
                        v.clear();
                }
            };
            ComplexCritere.prototype.IsQuerable = function () {
                this.indexes = [];
                var crPrps = this.Shema.propertiesSheam;
                for (var i = 0; i < crPrps.length; i++) {
                    var prSch = crPrps[i];
                    var v = this.get(prSch.critereDP);
                    if (v.IsActivated() && v.IsQuerable())
                        this.indexes.push({ critereValue: v, propertyDP: prSch.propertyDP });
                }
                return this.indexes.length != 0;
            };
            ComplexCritere.prototype.isMatch = function (p) {
                for (var i = 0; i < this.indexes.length; i++) {
                    var v = this.indexes[i];
                    if (!v.critereValue.isMatch(p.GetValue(v.propertyDP)))
                        return false;
                }
                return true;
            };
            ComplexCritere.prototype._isMatch = function (v) {
                throw new Error("Method not implemented.");
            };
            return ComplexCritere;
        }(Critere));
        Critere_1.ComplexCritere = ComplexCritere;
    })(Critere = exports.Critere || (exports.Critere = {}));
    window['Critere'] = Critere;
});
define("components/ActionButton/script", ["require", "exports", "sys/UI", "sys/Corelib"], function (require, exports, UI_4, Corelib_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var components;
    (function (components) {
        var ActionButton = (function (_super) {
            __extends(ActionButton, _super);
            function ActionButton() {
                var _this = _super.call(this, document.createElement('div')) || this;
                _this.applyStyle('pull-right', 'flat');
                "\n            <div id=\"68\" class=\"pull-right flat\">\n                <label class=\"btn btn-default glyphicon glyphicon-filter\">  </label>\n                <input id=\"70\" autocomplete=\"off\" placeholder=\"Select a Client\" class=\"input form-control\" style=\"min-width: 300px; margin-top: 1px; float: left; width: auto;\">\n            </div>\n            ";
                return _this;
            }
            ActionButton.__fields__ = function () { return [this.DPSource, this.DPValue]; };
            Object.defineProperty(ActionButton.prototype, "Value", {
                get: function () { return this.get(ActionButton.DPValue); },
                set: function (v) { this.set(ActionButton.DPValue, v); },
                enumerable: true,
                configurable: true
            });
            ActionButton.prototype.initialize = function () {
                this.Caption = new UI_4.UI.Label("").applyStyle('btn', 'btn-default', 'glyphicon', 'glyphicon-filter');
                this.Box = new UI_4.UI.Input().applyStyle('input', 'form-control');
                this.Box.setAttribute('style', 'min-width: 300px; margin-top: 1px; float: left; width: auto;').setAttribute('autocomplete', 'off').setAttribute('placeholder', 'Search ...');
                this.AutocompleteBox = new UI_4.UI.ProxyAutoCompleteBox(this.Box, this.Source);
                this.AutocompleteBox.OnValueChanged(this, this.OnValueChanged);
                this.Add(this.Caption).Add(this.Box);
                this.AutocompleteBox.initialize();
            };
            ActionButton.prototype.OnSourceChanged = function (e) {
                this.AutocompleteBox.DataSource = e._new;
            };
            ActionButton.prototype.OnValueChanged = function (box, oldValue, newValue) {
                this.Value = newValue;
            };
            ActionButton.DPSource = Corelib_10.bind.DObject.CreateField("Source", Corelib_10.collection.List, undefined, ActionButton.prototype.OnSourceChanged);
            ActionButton.DPValue = Corelib_10.bind.DObject.CreateField("Value", Object);
            return ActionButton;
        }(UI_4.UI.JControl));
        components.ActionButton = ActionButton;
    })(components = exports.components || (exports.components = {}));
});
define("sys/AI", ["require", "exports", "json|../assets/Data/Primes.json", "sys/Corelib"], function (require, exports, Primes_json_1, corelib_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var $math = Math;
    var AI;
    (function (AI) {
        var tools;
        (function (tools) {
            var INFINITY = 1 / 0;
            var argsTag = '[object Arguments]';
            function isFlattenable(value) {
                return value instanceof Array || String(value) === argsTag;
            }
            tools.isFlattenable = isFlattenable;
            function baseFlatten(array, depth, predicate, isStrict, result) {
                var index = -1, length = array.length;
                predicate || (predicate = isFlattenable);
                result || (result = []);
                while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                        if (depth > 1) {
                            baseFlatten(value, depth - 1, predicate, isStrict, result);
                        }
                        else {
                            result.push(value);
                        }
                    }
                    else if (!isStrict) {
                        result[result.length] = value;
                    }
                }
                return result;
            }
            tools.baseFlatten = baseFlatten;
            function flattenDeep(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, INFINITY) : [];
            }
            tools.flattenDeep = flattenDeep;
            var SegmentRunner = (function () {
                function SegmentRunner(start, end) {
                    this.Disposed = [];
                    this.Last = this.Writer = new Segment(null, start, end);
                }
                SegmentRunner.prototype.Next = function () {
                    var s = this.Reader;
                    while (s)
                        if (this.Cursor <= s.End) {
                            return this.Cursor++;
                        }
                        else {
                            this.Disposed.push(s);
                            this.Reader = s = this.Reader.NextSegment;
                        }
                    return undefined;
                };
                return SegmentRunner;
            }());
            tools.SegmentRunner = SegmentRunner;
            var Iterator = (function () {
                function Iterator() {
                    this.runner = new SegmentRunner(0, 1999);
                    this.array = new Array(2000);
                }
                Iterator.prototype.Read = function () {
                    return this.runner.Next();
                };
                Iterator.prototype.Write = function () {
                };
                return Iterator;
            }());
            tools.Iterator = Iterator;
            var Segment = (function () {
                function Segment(parent, Start, End) {
                    if (Start === void 0) { Start = 0; }
                    if (End === void 0) { End = 0; }
                    this.Start = Start;
                    this.End = End;
                    if (parent)
                        parent.NextSegment = this;
                }
                return Segment;
            }());
            tools.Segment = Segment;
        })(tools = AI.tools || (AI.tools = {}));
        var StringSimiarity;
        (function (StringSimiarity) {
            function compareTwoStrings(str1, str2) {
                var result = null;
                result = calculateResultIfIdentical(str1, str2);
                if (result != null) {
                    return result;
                }
                result = calculateResultIfEitherIsEmpty(str1, str2);
                if (result != null) {
                    return result;
                }
                result = calculateResultIfBothAreSingleCharacter(str1, str2);
                if (result != null) {
                    return result;
                }
                var pairs1 = wordLetterPairs(str1.toUpperCase());
                var pairs2 = wordLetterPairs(str2.toUpperCase());
                var intersection = 0;
                var union = pairs1.length + pairs2.length;
                pairs1.forEach(function (pair1) {
                    for (var i = 0; i < pairs2.length; i++) {
                        var pair2 = pairs2[i];
                        if (pair1 === pair2) {
                            intersection++;
                            pairs2.splice(i, 1);
                            break;
                        }
                    }
                });
                return (2.0 * intersection) / union;
            }
            StringSimiarity.compareTwoStrings = compareTwoStrings;
            function findBestMatch(mainString, targetStrings) {
                var ratings = targetStrings.map(function (targetString) {
                    return {
                        target: targetString,
                        rating: compareTwoStrings(mainString, targetString)
                    };
                });
                return {
                    ratings: ratings,
                    bestMatch: bestMatch(ratings)
                };
            }
            StringSimiarity.findBestMatch = findBestMatch;
            function bestMatch(ratings) {
                var t = undefined;
                var cm = Number.NEGATIVE_INFINITY;
                for (var i = 0; i < ratings.length; i++) {
                    var c = ratings[i];
                    if (cm < c.rating) {
                        cm = c.rating;
                        t = c;
                    }
                }
                return t;
            }
            StringSimiarity.bestMatch = bestMatch;
            function letterPairs(str) {
                var numPairs = str.length - 1;
                var pairs = [];
                for (var i = 0; i < numPairs; i++) {
                    pairs[i] = str.substring(i, i + 2);
                }
                return pairs;
            }
            function wordLetterPairs(str) {
                return tools.flattenDeep(str.split(' ').map(letterPairs));
            }
            function isEdgeCaseWithOneOrZeroChars(str1, str2) {
                if (str1.length == str2.length && str1.length == 1) {
                    return true;
                }
                return false;
            }
            function calculateResultIfIdentical(str1, str2) {
                if (str1.toUpperCase() == str2.toUpperCase()) {
                    return 1;
                }
                return null;
            }
            function calculateResultIfBothAreSingleCharacter(str1, str2) {
                if (str1.length == 1 && str2.length == 1) {
                    return 0;
                }
            }
            function calculateResultIfEitherIsEmpty(str1, str2) {
                if (str1.length == 0 && str2.length == 0) {
                    return 1;
                }
                if ((str1.length + str2.length) > 0 && (str1.length * str2.length) == 0) {
                    return 0;
                }
                return null;
            }
            function Sort(rattings) {
                return rattings.ratings.sort(com);
            }
            StringSimiarity.Sort = Sort;
            function com(a, b) {
                return b.rating - a.rating;
            }
        })(StringSimiarity = AI.StringSimiarity || (AI.StringSimiarity = {}));
        var Math;
        (function (Math) {
            var GCDExtended = (function () {
                function GCDExtended(gcd, factorA, factorB) {
                    this.SetValues(gcd, factorA, factorB);
                }
                GCDExtended.prototype.SetValues = function (gcd, factorA, factorB) {
                    this.GCD = gcd;
                    this.FactorA = factorA;
                    this.FactorB = factorB;
                    return this;
                };
                return GCDExtended;
            }());
            Math.GCDExtended = GCDExtended;
            function mul_mod(a, b, m) {
                if (a >= m)
                    a %= m;
                if (b >= m)
                    b %= m;
                return (a + b) % m;
            }
            Math.mul_mod = mul_mod;
            function PowMod(base, exp, modulus) {
                base %= modulus;
                var result = 1;
                while (exp > 0) {
                    if (exp & 1)
                        result = (result * base) % modulus;
                    base = (base * base) % modulus;
                    exp >>= 1;
                }
                return result;
            }
            Math.PowMod = PowMod;
            var primes = Primes_json_1.value;
            function getRandomPrime(cond, maxIndex) {
                var time = performance.now();
                maxIndex || (maxIndex = primes.length - 1);
                do {
                    if (performance.now() - time > 5000)
                        throw null;
                    var p = primes[$math.floor($math.random() * maxIndex)];
                } while (!cond(p));
                return p;
            }
            Math.getRandomPrime = getRandomPrime;
            function get_common_denom(e, PHI) {
                var great, temp, a;
                if (e > PHI) {
                    while (e % PHI != 0) {
                        temp = e % PHI;
                        e = PHI;
                        PHI = temp;
                    }
                    great = PHI;
                }
                else {
                    while (PHI % e != 0) {
                        a = PHI % e;
                        PHI = e;
                        e = a;
                    }
                    great = e;
                }
                return great;
            }
            Math.get_common_denom = get_common_denom;
            function GCD(a1, b1) {
                var a = a1, b = b1;
                while (b) {
                    var c = a;
                    a = b;
                    b = c % b;
                }
                ;
                return a;
            }
            Math.GCD = GCD;
            ;
            function ExGCD(a1, b1, rem) {
                if (rem === void 0) { rem = 0; }
                var a = a1, b = b1;
                while (b != rem && b) {
                    var a1 = a;
                    var b1 = b;
                    a = b;
                    b = a1 % b1;
                }
                ;
                return { result: a1, factor: b1, rem: b, x: (a1 - rem) / b1 };
            }
            Math.ExGCD = ExGCD;
            function gcd_extended(p, q) {
                if (q == 0)
                    return new GCDExtended(p, 1, 0);
                var vals = gcd_extended(q, p.mod(q));
                var b = vals.FactorA - vals.FactorB * $math.floor(p / q);
                return vals.SetValues(vals.GCD, vals.FactorB, b);
            }
            Math.gcd_extended = gcd_extended;
            function divides(numerator, denominator) {
                if (numerator.mod(denominator) > 0)
                    return false;
                return true;
            }
            function SolveCongurentEqu(factor, rem, modulus) {
                var m = $math.abs(modulus);
                var a = factor.mod(m);
                var b = rem.mod(m);
                var result_extended = gcd_extended(a, m);
                var solutions = new Array();
                if (!divides(b, result_extended.GCD))
                    return solutions;
                var firstSolution = (result_extended.FactorA * (b / result_extended.GCD)).mod(m);
                for (var i = 0; i < result_extended.GCD; i++) {
                    var otherSolution = (firstSolution + i * (m / result_extended.GCD)).mod(m);
                    solutions.push(otherSolution);
                }
                return solutions.sort(function (a, b) { return b - a; });
            }
            Math.SolveCongurentEqu = SolveCongurentEqu;
            Number.prototype.mod = function (n) {
                return ((this % n) + n) % n;
            };
        })(Math = AI.Math || (AI.Math = {}));
        var Encryption;
        (function (Encryption) {
            var RSA = (function () {
                function RSA(key) {
                    this.key = key;
                }
                RSA.prototype.transform = function (byte) {
                    return Math.PowMod(byte, this.key.e, this.key.n);
                };
                RSA.prototype.isValideByte = function (byte) { return byte >= 0 && byte < this.key.n; };
                return RSA;
            }());
            Encryption.RSA = RSA;
            var FastRSA = (function () {
                function FastRSA(key) {
                    this.key = key;
                    this.array = [];
                }
                FastRSA.prototype.transform = function (byte) {
                    return this.array[byte] || (this.array[byte] = Math.PowMod(byte, this.key.e, this.key.n));
                };
                FastRSA.prototype.isValideByte = function (byte) { return byte >= 0 && byte < this.key.n; };
                return FastRSA;
            }());
            Encryption.FastRSA = FastRSA;
            function GenerateRSAKey(sourceMaxByte, transformedMaxByte) {
                var p = Math.getRandomPrime(function (p) { return p > 100; }, 100);
                var q = Math.getRandomPrime(function (t) {
                    if (t == p)
                        return false;
                    var n1 = t * p;
                    if (n1 < sourceMaxByte)
                        return false;
                    if (n1 > transformedMaxByte)
                        return false;
                    return true;
                }, 100);
                var n = p * q;
                var h = (p - 1) * (q - 1);
                var d;
                var time = performance.now();
                do {
                    if (performance.now() - time > 5000)
                        throw null;
                    var e = Math.getRandomPrime(function (p) { return p < h && p > 3; });
                    var sols = Math.SolveCongurentEqu(e, 1, h);
                    if (sols.length == 0)
                        continue;
                    d = sols[0];
                    break;
                } while (true);
                return {
                    Decripter: new RSA({ n: n, e: d }),
                    Encrypter: new RSA({ n: n, e: e })
                };
            }
            Encryption.GenerateRSAKey = GenerateRSAKey;
            function test(f, iter, args) {
                if (iter === void 0) { iter = 1e4; }
                var deb = performance.now();
                var i = iter;
                while (--i)
                    f.apply(null, args);
                return performance.now() - deb;
            }
            Encryption.test = test;
        })(Encryption = AI.Encryption || (AI.Encryption = {}));
    })(AI = exports.AI || (exports.AI = {}));
    var DataBindingQuee;
    (function (DataBindingQuee) {
        var quee;
        var isexec = false;
        function Exec(owner) {
            corelib_3.bind.DObject;
        }
        DataBindingQuee.Exec = Exec;
    })(DataBindingQuee = exports.DataBindingQuee || (exports.DataBindingQuee = {}));
});
define("Core", ["require", "exports", "context", "sys/Syntaxer", "sys/System", "sys/Filters", "sys/QModel", "sys/Corelib", "sys/Consts", "sys/db", "sys/Decorators", "sys/Dom", "sys/Encoding", "sys/Jobs", "sys/Thread", "sys/Facebook", "sys/Initializer", "sys/Services", "sys/Critere", "components/ActionButton/script", "sys/UI", "sys/AI"], function (require, exports, context_6, Syntaxer_2, System_4, Filters_2, QModel_2, Corelib_11, Consts_1, db_2, Decorators_1, Dom_1, Encoding_1, Jobs_1, Thread_1, Facebook_1, Initializer_1, Services_1, Critere_2, script_1, UI_5, AI_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(context_6);
    __export(Syntaxer_2);
    __export(System_4);
    __export(Filters_2);
    __export(QModel_2);
    __export(Corelib_11);
    __export(Consts_1);
    __export(db_2);
    __export(Decorators_1);
    __export(Dom_1);
    __export(Encoding_1);
    __export(Jobs_1);
    __export(Thread_1);
    __export(Facebook_1);
    __export(Initializer_1);
    __export(Services_1);
    __export(Critere_2);
    __export(script_1);
    __export(UI_5);
    __export(AI_1);
});
define("components/QSidebar/script", ["require", "exports", "sys/Corelib", "sys/UI", "components/QUI/script", "template|../../assets/Components/QSidebar/dom.html"], function (require, exports, Corelib_12, UI_6, script_2, tmpl) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ValidateImport(tmpl);
    if (typeof FB !== 'undefined') {
        FB.getLoginStatus(function (response) {
            switch (response.status) {
                case 'connected':
                    break;
                case 'not_authorized':
                    break;
                case 'unknown':
                    break;
            }
        });
        var callback = function (resp) {
            stop();
        };
        FB.login(callback, {});
    }
    var Material;
    (function (Material) {
        var SideNavItem = (function (_super) {
            __extends(SideNavItem, _super);
            function SideNavItem(item) {
                var _this = _super.call(this, document.createElement('li')) || this;
                _this.item = item;
                return _this;
            }
            SideNavItem.prototype.initialize = function () {
                this.anchore = document.createElement('a');
                if (this.item.Icon)
                    this._view.classList.add(this.item.Icon);
                this.anchore.innerText = this.item.Title;
                this.buildBadge();
                this.View.appendChild(this.anchore);
                this.buildChildren();
            };
            SideNavItem.ctor = function () {
                require('style|../../assets/Components/QSidebar/style.css');
            };
            SideNavItem.prototype.buildBadge = function () {
                var badge = this.item.Badge;
                if (badge == null || badge == '') {
                    this.badge && this.badge.remove();
                    return;
                }
                if (!this.badge) {
                    this.badge = document.createElement('span');
                    this.badge.classList.add('count');
                }
                if (this.badge.parentNode == null)
                    this.anchore.appendChild(this.badge);
                this.badge.innerText = String(badge);
            };
            SideNavItem.prototype.buildChildren = function () {
                var children = this.item.Children;
                if (children) {
                    this.applyStyle('has-children');
                    this.children = new UI_6.UI.Dom('ul');
                    this.Add(this.children);
                    for (var i = 0; i < children.length; i++)
                        this.children.Add(new SubsSideNavItem(children[i], this));
                }
                if (this.item.mode === 'pop') {
                    this.anchore.addEventListener('mouseenter', this);
                    this._view.addEventListener('mouseleave', this);
                    return;
                }
                this.anchore.addEventListener('click', this);
            };
            SideNavItem.prototype.handleEvent = function (e) {
                if (this.item.mode === 'pop')
                    switch (e.type) {
                        case 'mouseenter':
                            if (this.item.mode === 'pop' && e.currentTarget === this.anchore)
                                return this.IsActive = true;
                        case 'mouseleave':
                            if (this.item.mode === 'pop' && e.currentTarget === this._view)
                                return this.IsActive = false;
                        default: return _super.prototype.handleEvent.call(this, e);
                    }
                else if (e.type === 'click' && e.currentTarget === this.anchore)
                    if (!this.IsActive) {
                        Corelib_12.$$(this._view).toggleClass('active');
                        if (this.IsActive) {
                            var args = [this];
                            this.OnChildSelected(args);
                            this.OnSelected && this.OnSelected.Invoke.call(this.OnSelected.Owner, args);
                        }
                    }
                    else
                        _super.prototype.handleEvent.call(this, e);
            };
            Object.defineProperty(SideNavItem.prototype, "IsActive", {
                get: function () {
                    return this._view.classList.contains('active') || this._view.classList.contains('hover');
                },
                set: function (v) {
                    this._view.classList[v ? 'add' : 'remove'](this.item.mode === 'pop' ? 'hover' : 'active');
                },
                enumerable: true,
                configurable: true
            });
            return SideNavItem;
        }(UI_6.UI.JControl));
        Material.SideNavItem = SideNavItem;
        var SubsSideNavItem = (function (_super) {
            __extends(SubsSideNavItem, _super);
            function SubsSideNavItem(item, ParentNavItem) {
                var _this = _super.call(this, item) || this;
                _this.ParentNavItem = ParentNavItem;
                return _this;
            }
            SubsSideNavItem.prototype.OnChildSelected = function (nitems) {
                var p = this.ParentNavItem;
                if (!p)
                    return;
                nitems.push(p);
                p.OnChildSelected(nitems);
            };
            return SubsSideNavItem;
        }(SideNavItem));
        var MainSideNavItem = (function (_super) {
            __extends(MainSideNavItem, _super);
            function MainSideNavItem(item, ParentNav) {
                var _this = _super.call(this, item) || this;
                _this.ParentNav = ParentNav;
                return _this;
            }
            MainSideNavItem.prototype.OnChildSelected = function (nitems) {
                this.ParentNav.OnChildSelected(nitems);
            };
            return MainSideNavItem;
        }(SideNavItem));
        var SideNav = (function (_super) {
            __extends(SideNav, _super);
            function SideNav(data) {
                var _this = _super.call(this, document.createElement('nav')) || this;
                _this.data = data;
                return _this;
            }
            SideNav.prototype.initialize = function () {
                this.applyStyle('cd-side-nav');
                for (var i = 0; i < this.data.length; i++)
                    this.buildChild(this.data[i]);
            };
            SideNav.prototype.OnChildSelected = function (nitems) {
                this.OnItemSelected(nitems);
            };
            SideNav.prototype.buildChild = function (data) {
                var v = new UI_6.UI.Dom(document.createElement('ul'));
                var title = document.createElement('li');
                title.classList.add('cd-label');
                title.innerText = data.Title;
                v.View.appendChild(title);
                for (var i = 0; i < data.Items.length; i++) {
                    var l = data.Items[i];
                    var c = new MainSideNavItem(l, this);
                    v.Add(c);
                }
                this.Add(v);
            };
            SideNav.prototype.OnItemSelected = function (items) {
                if (this.currentItems) {
                    for (var i = 0; i < this.currentItems.length; i++) {
                        var c = this.currentItems[i];
                        c.IsActive = false;
                    }
                }
                for (var i = 0; i < items.length; i++) {
                    var c = items[i];
                    var t = c.item;
                    if (t.mode !== 'pop')
                        c.IsActive = true;
                }
                this.currentItems = items;
            };
            return SideNav;
        }(UI_6.UI.JControl));
        Material.SideNav = SideNav;
    })(Material = exports.Material || (exports.Material = {}));
    var data = {
        Title: "Main Menu",
        Items: [
            { Title: "Overview", Badge: '1', Icon: 'overview' },
            {
                Title: 'Menu', Badge: '2', Icon: 'comments',
                Children: [
                    {
                        Title: 'Item 1',
                    },
                    {
                        Title: 'Item 3',
                    },
                    {
                        Title: 'Item 2',
                    }
                ], mode: 'pop'
            },
            {
                Title: 'Menu', Badge: '2', Icon: 'notifications',
                Children: [
                    {
                        Title: 'Item 1',
                    },
                    {
                        Title: 'Item 3',
                    },
                    {
                        Title: 'Item 2',
                    }
                ], mode: 'sub'
            }
        ]
    };
    exports.counter = 0;
    function test() {
        var app = new script_2.Material.App();
        document.body.innerHTML = '';
        document.body.appendChild(app.View);
        var c = new UI_6.UI.Dom('div');
        app.OnInitialized = function (app) {
            ret.menu = new Material.SideNav([data]);
            app.Menu = ret.menu;
        };
        var ret = { app: app, container: c, menu: undefined, canvas: undefined };
        app.Parent = UI_6.UI.Desktop.Current;
        return ret;
    }
    exports.test = test;
});
define("components/QUI/script", ["require", "exports", "sys/Corelib", "sys/UI", "context", "components/Canvas3D/script", "template|../../assets/Components/QUI/dom.html"], function (require, exports, Corelib_13, UI_7, context_7, script_3, tmpl) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ValidateImport(tmpl);
    var Material;
    (function (Material) {
        var App = (function (_super) {
            __extends(App, _super);
            function App() {
                var _this = _super.call(this, App._getView()) || this;
                _this.searchWrapper = (function () { var t = document.createElement('li'); t.classList.add('cd-serch-wrapper'); return t; })();
                _this.resizing = false;
                _this.Controller = Corelib_13.bind.Controller.Attach(_this, _this);
                _this.Controller.OnCompiled = {
                    Invoke: _this.OnCompileEnd, Owner: _this
                };
                return _this;
            }
            Object.defineProperty(App.prototype, "IsAuthentication", {
                get: function () { return false; },
                enumerable: true,
                configurable: true
            });
            App.prototype.showPage = function (page) {
                this.Content = page;
            };
            App.prototype.OnKeyDown = function (e) {
                var s = this.SelectedPage;
                if (s)
                    s.OnKeyDown(e);
            };
            App.prototype.Check = function (child) {
                return child === this.Foot || child instanceof UI_7.UI.Page;
            };
            App.prototype._getView = function (data) {
                var tmp = UI_7.UI.Template.ToTemplate('templates.qui-app', false);
                var Shadow = tmp.CreateShadow();
                Shadow.Parent = this;
                return Shadow;
            };
            App._getView = function () {
                return UI_7.UI.ListAdapter._getTemplateShadow('templates.qui-app');
            };
            App.prototype.IsCompiled = function () { return this.Controller.getStat() >= 2; };
            Object.defineProperty(App.prototype, "Content", {
                get: function () { return this._content; },
                set: function (v) {
                    var _this = this;
                    if (v === this._content)
                        return;
                    if (this.IsCompiled && this._content) {
                        this._content.Parent = null;
                        this._content.View.remove();
                    }
                    if (v)
                        this.Controller.OnCompiled = {
                            Invoke: function (t) {
                                if (v.Parent)
                                    throw new Error('The Control has connection with other Control');
                                _this._pageContent.appendChild(v.View);
                                v.Parent = _this;
                                _this._content = v;
                            }, Owner: this
                        };
                    else
                        this._content = v;
                },
                enumerable: true,
                configurable: true
            });
            App.prototype.setContent = function (t) {
            };
            Object.defineProperty(App.prototype, "Menu", {
                get: function () { return this._menu; },
                set: function (v) {
                    var _this = this;
                    if (v === this._menu)
                        return;
                    if (this._menu) {
                        this._menu.Parent = null;
                    }
                    if (v)
                        this.Controller.OnCompiled = {
                            Invoke: function (t) {
                                _this._sideMenu.appendChild(v.View);
                                v.Parent = _this;
                                _this._menu = v;
                            }, Owner: this
                        };
                    else
                        this._menu = v;
                },
                enumerable: true,
                configurable: true
            });
            App.prototype.handleEvent = function (event) {
                var src = event.srcElement;
                var name = src.getAttribute('db-name');
                switch (name) {
                    case 'coverLayer':
                    case 'closeSuggetions':
                        this.toggleSearchForm(true);
                        break;
                    case 'searchTrigger':
                        event.preventDefault();
                        if (!this.toggleSearchForm())
                            this.onSearch();
                        break;
                    case 'navigationTrigger':
                        event.preventDefault();
                        Corelib_13.$$([this._mainHeader, this._navigation, this._pageContent]).toggleClass('nav-is-visible');
                        break;
                    default:
                }
            };
            App.prototype.setName = function (name, dom, cnt, e) {
                this['_'.concat(name)] = dom;
                if (name === 'searchTrigger')
                    this._searchTrigger.addEventListener('click', this);
                if (name === 'navigationWrapper')
                    this._pages = e.IsNew ? e.Control : null;
            };
            App.prototype.onSearch = function () {
                var c = this._txt_search.value;
                if (c && c.length > 5)
                    this.Suggestions.Add({ Data: "Iam", Title: c });
            };
            App.prototype.toggleSearchForm = function (close) {
                close = close === undefined ? this._searchTrigger.classList.contains('search-form-visible') : close;
                if (close) {
                    this._searchTrigger.classList.remove('search-form-visible');
                    this._searchForm.classList.remove('is-visible');
                    this._coverLayer.classList.remove('search-form-visible');
                    return false;
                }
                else {
                    this._searchTrigger.classList.add('search-form-visible');
                    this._coverLayer.classList.add('search-form-visible');
                    this._searchForm.classList.add('is-visible');
                    return true;
                }
            };
            Object.defineProperty(App.prototype, "NFBHeight", {
                set: function (v) {
                    if (!App.BlackAppRule) {
                        var t = App.links[1].sheet;
                        var rls = t.cssRules || t.rules;
                        for (var i = 0; i < rls.length; i++) {
                            var y = rls[i];
                            if (y.selectorText === '.BlackApp') {
                                App.BlackAppRule = y;
                                break;
                            }
                        }
                    }
                    if (App.BlackAppRule)
                        App.BlackAppRule.style.setProperty(App.navbarFixedBottomHeightName, v + 'px');
                    else
                        document.documentElement.style.setProperty(App.navbarFixedBottomHeightName, v + 'px');
                },
                enumerable: true,
                configurable: true
            });
            App.prototype.css = function (el) {
                var sheets = document.styleSheets, ret = [];
                el.matches = el.matches || el.webkitMatchesSelector || el.msMatchesSelector;
                return ret;
            };
            App.prototype.initialize = function () {
                var _this = this;
                window['k'] = this;
                _super.prototype.initialize.call(this);
                this.applyStyle('BlackApp');
                var app = UI_7.UI.Desktop.Current.CurrentApp;
                this.Foot = new UI_7.UI.ServiceNavBar(this, false);
                var pcon = new script_3.Material.Canvas3D();
                var page = new UI_7.UI.Page(this, "Canvas 3D", "Canvas 3D");
                page.Add(pcon);
                this.Pages = new Corelib_13.collection.List(Object, []);
                this.Suggestions = new Corelib_13.collection.List(Object, [{ Data: "Iam", Title: "Test Title then if you see this then you are ok" }]);
                if (!App.links) {
                    App.links = [UI_7.UI.JControl.LoadCss(context_7.context.GetPath('Reset.css')), UI_7.UI.JControl.LoadCss(context_7.context.GetPath('style.css'))];
                }
                else {
                    for (var i = 0; i < App.links.length; i++) {
                        var l = App.links[i];
                        if (l.parentNode == null)
                            document.head.appendChild(l);
                    }
                }
                this.moveNavigation = this.moveNavigation.bind(this);
                window.addEventListener('resize', function (e) { return _this.checkResize(); });
                this.Add(this.Foot);
            };
            App.prototype.OnCompileEnd = function (cnt) {
                var _this = this;
                this._navigationTrigger.addEventListener('click', this);
                this._closeSuggetions.addEventListener('click', this);
                this._closeSuggetions.addEventListener('click', this);
                this.checkResize();
                this._pages.OnItemSelected.On = function (a, b, c, d, f) { return _this.SelectedPage = _this.Pages.Get(b); };
            };
            App.prototype.checkResize = function () {
                if (!this.resizing) {
                    this.resizing = true;
                    (!window.requestAnimationFrame) ? setTimeout(this.moveNavigation, 300) : window.requestAnimationFrame(this.moveNavigation);
                }
            };
            App.prototype.checkWindowWidth = function () {
                var mq = window.getComputedStyle(this._mainHeader, '::before').getPropertyValue('content').replace(/"/g, '').replace(/'/g, "");
                return mq;
            };
            App.prototype.moveNavigation = function () {
                var screenSize = this.checkWindowWidth();
                if (screenSize == 'desktop' && (Corelib_13.$$(this._navigationTrigger).siblings(Corelib_13.query.hasClass, 'cd-main-search').length == 0)) {
                    Corelib_13.$$(this._searchForm).detach().insertBefore(this._navigationTrigger);
                    Corelib_13.$$(this._navigationWrapper).detach().insertBefore(this._searchForm);
                    this.searchWrapper.remove();
                }
                else if (screenSize == 'mobile' && !(Corelib_13.$$(this._mainHeader).children(Corelib_13.query.hasClass, 'cd-main-nav-wrapper').length == 0)) {
                    Corelib_13.$$(this._navigationWrapper).detach().insertAfter(this._pageContent);
                    var newListItem = this.searchWrapper;
                    Corelib_13.$$(this._searchForm).detach().appendTo(newListItem);
                    this._navigation.appendChild(this.searchWrapper);
                }
                this.resizing = false;
            };
            App.ctor = function () {
                this.DPCategories = App.CreateField("Categories", Corelib_13.collection.List);
                this.DPFastLinks = App.CreateField("FastLinks", Corelib_13.collection.List);
                this.DPSuggestions = App.CreateField("Suggestions", Corelib_13.collection.List);
                this.DPLogo = App.CreateField("Logo", String);
                require('style|./../../assets/Components/QUI/style.css');
                require('style|./../../assets/Components/QUI/Reset.css');
            };
            App.prototype.CloseMenu = function () { this._body.classList.add('hide-menu'); };
            App.prototype.OpenMenu = function () { this._body.classList.remove('hide-menu'); };
            Object.defineProperty(App.prototype, "IsMenuOpen", {
                get: function () { return this._body.classList.contains('hide-menu'); },
                enumerable: true,
                configurable: true
            });
            App.__fields__ = function () { return [this.DPCategories, this.DPFastLinks, this.DPSuggestions, this.DPLogo]; };
            App.navbarFixedBottomHeightName = '--navbar-fixed-bottom-height';
            return App;
        }(UI_7.UI.Layout));
        Material.App = App;
    })(Material = exports.Material || (exports.Material = {}));
});
define("components/Canvas3D/script", ["require", "exports", "sys/Corelib", "sys/UI", "template|../../assets/Components/Canvas3D/dom.html"], function (require, exports, Corelib_14, UI_8, tmpl) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ValidateImport(tmpl);
    var Material;
    (function (Material) {
        var c = { Title: "Achour", Data: null, Icon: null };
        var _template;
        var _stemplate;
        function getTemplate() {
            return _template || (_template = new Template());
        }
        function getSTemplate() {
            return _stemplate || (_stemplate = tmpl.template["qui-3ditem"]);
        }
        var Canvas3D = (function (_super) {
            __extends(Canvas3D, _super);
            function Canvas3D() {
                var _this = _super.call(this, tmpl.template["qui-Canvas3D"], UI_8.UI.TControl.Me) || this;
                _this.Items = new Corelib_14.collection.List(Object, [c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c]);
                _this.count = 0;
                return _this;
            }
            Canvas3D.prototype.setName = function (name, dom, cnt, e) {
                this[name] = dom;
                if (name === 'galleryItems') {
                    this.cnt_galleryItems = cnt;
                    this.cnt_galleryItems.Template = getTemplate();
                }
            };
            Canvas3D.prototype.initialize = function () {
                _super.prototype.initialize.call(this);
            };
            Canvas3D.ctor = function () {
                debugger;
                var df = tmpl.template;
                require('style|../../assets/Components/Canvas3D/style.css');
            };
            return Canvas3D;
        }(UI_8.UI.TControl));
        Material.Canvas3D = Canvas3D;
        var _classes = [["move-right", "hidden"], ["cd-item-front"], ["cd-item-middle"], ["cd-item-back"], ["cd-item-out"], []];
        var _sclasses = ["move-right", "hidden", "cd-item-front", "cd-item-middle", "cd-item-back", "cd-item-out"];
        var GalleryItem = (function (_super) {
            __extends(GalleryItem, _super);
            function GalleryItem(data, dom) {
                var _this = _super.call(this, dom || getSTemplate().Create(), GalleryItem._createScop(data)) || this;
                _this.data = data;
                _this.selectedIndex = 0;
                _this.items = [];
                return _this;
            }
            GalleryItem._createScop = function (item) {
                var isscop = item instanceof Corelib_14.bind.Scop;
                return isscop ? item : new Corelib_14.bind.ValueScop(item);
            };
            GalleryItem.prototype.setName = function (name, dom, cnt, e) {
                this[name] = dom;
                if (name === 'visionTrigger')
                    this.visionTrigger.addEventListener('click', this);
                else if (name === 'Next')
                    this.Next.addEventListener('click', this);
                else if (name === 'Prev')
                    this.Prev.addEventListener('click', this);
                else if (name === 'itemsWrapper') {
                    for (var i = 0; i < dom.children.length; i++) {
                        var c = dom.children[i];
                        this.items.push(c);
                    }
                }
            };
            GalleryItem.prototype.handleEvent = function (e) {
                var src = e.srcElement;
                var name = src.getAttribute('db-name');
                switch (name) {
                    case 'visionTrigger':
                        return this.onVisionTriggerClick(e);
                    case 'Next':
                        this.GoNext();
                        break;
                    case 'Prev':
                        this.GoPrev();
                        break;
                    default:
                }
            };
            GalleryItem.prototype.onVisionTriggerClick = function (e) {
                if (this._view.classList.contains('active')) {
                    this.View.classList.remove('active');
                    this.hideNavigation();
                }
                else {
                    this.View.classList.add('active');
                    this.updateNavigation();
                }
            };
            GalleryItem.prototype.hideNavigation = function () {
                this.Next.classList.remove('visible');
                this.Prev.classList.remove('visible');
            };
            GalleryItem.prototype.updateNavigation = function () {
                this.ActiveNext = this.IsNextActive;
                this.ActivePrev = this.IsPrevActive;
            };
            Object.defineProperty(GalleryItem.prototype, "ActiveNext", {
                set: function (v) {
                    this.Next.classList[v ? 'add' : 'remove']('visible');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GalleryItem.prototype, "ActivePrev", {
                set: function (v) {
                    this.Prev.classList[v ? 'add' : 'remove']('visible');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GalleryItem.prototype, "IsPrevActive", {
                get: function () {
                    return this.selectedIndex > 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GalleryItem.prototype, "IsNextActive", {
                get: function () {
                    return this.selectedIndex < this.items.length - 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GalleryItem.prototype, "SelectedIndex", {
                get: function () {
                    return this.selectedIndex;
                },
                set: function (v) {
                    if (v <= 0)
                        this.selectedIndex = 0;
                    else if (v >= this.items.length)
                        this.selectedIndex = this.items.length - 1;
                    else
                        this.selectedIndex = v;
                },
                enumerable: true,
                configurable: true
            });
            GalleryItem.prototype.Update = function () {
                var items = this.items;
                var osi = this.SelectedIndex;
                var si = osi + 1;
                for (var i = 0; i < items.length; i++) {
                    var ci = items[i];
                    ci.classList.remove("cd-item-front", "cd-item-middle", "cd-item-back", "cd-item-out", "move-right", "hidden");
                    if (i < si)
                        ci.classList.add('move-right', 'hidden');
                    else if (i === si)
                        ci.classList.add('cd-item-front');
                    else if (i === si + 1)
                        ci.classList.add('cd-item-middle');
                }
            };
            GalleryItem.prototype.GoNext = function () {
                var items = this.items;
                var osi = this.SelectedIndex;
                var csi = ++this.SelectedIndex;
                if (osi === csi || csi >= this.items.length)
                    return this.ActiveNext = false;
                this.showNextSlide(items[osi], items[osi + 1], items[osi + 2], items[osi + 3]);
                if (osi + 1 >= this.items.length - 1)
                    this.ActiveNext = false;
                if (osi >= 0)
                    this.ActivePrev = true;
            };
            GalleryItem.prototype.GoPrev = function () {
                var items = this.items;
                var osi = this.SelectedIndex;
                var csi = --this.SelectedIndex;
                if (osi === csi || osi <= 0)
                    return this.ActivePrev = false;
                this.showPreviousSlide(items[osi], items[osi + 1], items[csi], items[osi + 2]);
                if (csi <= 0)
                    this.ActivePrev = false;
                if (csi < items.length)
                    this.ActiveNext = true;
            };
            GalleryItem.prototype.updateCss = function (index, remove, add) {
                var i = this.items[index];
                if (!i)
                    return;
                if (add)
                    i.classList.add.apply(i.classList, add);
                if (remove)
                    i.classList.remove.apply(i.classList, remove);
            };
            GalleryItem.prototype.showNextSlide = function (itemToHide, itemToShow, itemMiddle, itemToBack) {
                if (itemToHide)
                    itemToHide.classList.add('move-right'), itemToHide.classList.remove('cd-item-front'),
                        this.createEvent(itemToHide, 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend'.split(' '), function (e, d) { d.itemToHide.classList.add('hidden'); d.data.swap(); }, this);
                if (itemToShow)
                    itemToShow.classList.add('cd-item-front'), itemToShow.classList.remove('cd-item-middle');
                if (itemMiddle)
                    itemMiddle.classList.add('cd-item-middle'), itemMiddle.classList.remove('cd-item-back');
                if (itemToBack)
                    itemToBack.classList.add('cd-item-back'), itemToBack.classList.remove('cd-item-out');
            };
            GalleryItem.prototype.showPreviousSlide = function (itemToMiddle, itemToBack, itemToShow, itemToOut) {
                if (itemToShow)
                    itemToShow.classList.remove('hidden'), itemToShow.classList.add('cd-item-front');
                if (itemToMiddle)
                    itemToMiddle.classList.remove('cd-item-front'), itemToMiddle.classList.add('cd-item-middle');
                if (itemToBack)
                    itemToBack.classList.remove('cd-item-middle'), itemToBack.classList.add('cd-item-back');
                if (itemToOut)
                    itemToOut.classList.remove('cd-item-back'), itemToOut.classList.add('cd-item-out');
                if (itemToShow) {
                    var r = { stop: 0, t: this };
                    r.stop = setInterval(this.myTimer, 100, itemToShow, r);
                }
            };
            GalleryItem.prototype.myTimer = function (itemToShow, stop) {
                if (!itemToShow.classList.contains('hidden')) {
                    itemToShow.classList.remove('move-right');
                    window.clearInterval(stop.stop);
                    stop.t.swap();
                }
            };
            GalleryItem.prototype.createEvent = function (itemToHide, events, callback, data) {
                if (!itemToHide)
                    return;
                var x = {
                    callback: callback,
                    events: events,
                    itemToHide: itemToHide,
                    handleEvent: one, data: data
                };
                for (var i = 0; i < events.length; i++) {
                    itemToHide.addEventListener(events[i], x);
                }
            };
            GalleryItem.prototype.swap = function () {
                if (0 === 0)
                    return;
                var si = this.SelectedIndex;
                var esi = si + 2;
                for (var i = 0; i < this.items.length; i++) {
                    var t = this.items[i];
                    if (i < si)
                        t.classList.remove("move-right", "hidden", "cd-item-front", "cd-item-middle", "cd-item-back", "cd-item-out"), t.classList.add("move-right", "hidden");
                    if (i > esi)
                        t.classList.remove("move-right", "hidden", "cd-item-front", "cd-item-middle", "cd-item-back", "cd-item-out"), t.classList.add("cd-item-out");
                }
            };
            return GalleryItem;
        }(UI_8.UI.ScopicTemplateShadow));
        Material.GalleryItem = GalleryItem;
        function one(e) {
            if (!this.events)
                return;
            e.preventDefault();
            e.stopImmediatePropagation();
            try {
                this.callback(e, this);
            }
            catch (e) {
            }
            for (var i = 0; i < this.events.length; i++)
                this.itemToHide.removeEventListener(this.events[i], this);
            delete this.events;
            delete this.itemToHide;
            delete this.handleEvent;
        }
        var Template = (function (_super) {
            __extends(Template, _super);
            function Template() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Template.prototype.CreateShadow = function (data) {
                return new GalleryItem(data);
            };
            return Template;
        }(UI_8.UI.Template));
        Material.Template = Template;
    })(Material = exports.Material || (exports.Material = {}));
    Corelib_14.ScopicControl.register("Material.Canvas3D", function (e) {
        return e.Result = new Material.Canvas3D();
    });
    Corelib_14.ScopicControl.register("Material.GalleryItem", function (e) {
        return e.Result = new Material.GalleryItem(e.currentScop || e.parentScop, e.dom);
    });
    window["C3D"] = function () {
        setTimeout(function () {
            var app = window['app'];
            var c3d = new Material.Canvas3D();
            window['c3d'] = c3d;
            c3d.Parent = UI_8.UI.Desktop.Current;
            document.body.appendChild(c3d.View);
        }, 2000);
    };
});
define("components/ClearTabe/script", ["require", "exports", "sys/UI", "sys/Corelib", "components/QSidebar/script", "context", "template|../../assets/Components/ClearTabe/dom.html"], function (require, exports, UI_9, Corelib_15, script_4, context_8, tmpl) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ValidateImport(tmpl);
    var ClearTable = (function (_super) {
        __extends(ClearTable, _super);
        function ClearTable(cols) {
            var _this = _super.call(this, "material.clearTable", UI_9.UI.help.createTemplate(cols)) || this;
            _this.cols = cols;
            UI_9.UI.JControl.LoadCss(context_8.context.GetPath('style.css'));
            _this.Controller = Corelib_15.bind.Controller.Attach(_this, _this);
            _this.Controller.OnCompiled = {
                Invoke: _this.OnCompileEnd, Owner: _this
            };
            return _this;
        }
        ClearTable.prototype.OnCompileEnd = function (cnt) {
        };
        ClearTable.prototype.setName = function (name, dom, cnt, e) {
            var t = this[name];
            this[name] = dom;
            if (name == '_tbl_head')
                UI_9.UI.help.createHeader(dom, this.cols);
        };
        ClearTable.ctor = function () {
            require('style|../../assets/Components/ClearTabe/style.css');
        };
        return ClearTable;
    }(UI_9.UI.ListAdapter));
    exports.ClearTable = ClearTable;
    exports.counter = 0;
    var textRight = { values: ['text-right'], spliter: " " };
    var cols = [
        {
            Header: {
                Attributes: { style: 'visibility: collapse;display:none;width:0px' }
            },
            Cell: {
                Attributes: { style: 'visibility: collapse;display:none;width:0px', 'db-job': "clientStat", 'db-bind': "SoldTotal" }
            }
        },
        {
            Header: "Full Name", Cell: {
                Attributes: { 'db-bind': 'FullName', 'db-job': 'label' }
            }
        },
        {
            Header: "Tel", Cell: {
                Attributes: { 'db-bind': 'Tel', 'db-job': 'label' }
            }
        },
        {
            Header: "Total Vendus", Cell: {
                Attributes: { 'db-bind': 'MontantTotal', 'db-job': 'number', 'db-twoway': false, 'class': textRight }
            }
        },
        {
            Header: "Total Versments", Cell: {
                Attributes: { 'db-bind': 'VersmentTotal', 'db-job': 'number', 'db-twoway': false, 'class': textRight }
            }
        },
        {
            Header: "Sold Total", Cell: {
                Attributes: { 'db-bind': 'SoldTotal', 'db-job': 'soldStatus', 'db-twoway': false, 'class': textRight }
            }
        }
    ];
    function test() {
        var t = script_4.test();
        var app = t.app;
        var x = new ClearTable(cols);
        app.Content = x;
        return x;
    }
    exports.test = test;
});
define("components/HeavyTable/script", ["require", "exports", "sys/UI", "sys/Corelib", "template|../../assets/Components/HeavyTable/dom.htm"], function (require, exports, UI_10, Corelib_16, dom_htm_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Material;
    (function (Material) {
        var HeavyTable = (function (_super) {
            __extends(HeavyTable, _super);
            function HeavyTable(cols) {
                var _this = _super.call(this, dom_htm_1.template.get("heavyTable"), UI_10.UI.help.createTemplate(cols)) || this;
                _this.cols = cols;
                _this.orderMap = {};
                _this._x = 0;
                _this._y = 0;
                _this.stat = [];
                _this.editCell = document.createElement('input');
                _this.Controller = Corelib_16.bind.Controller.Attach(_this, _this);
                _this.activateClass = 'selected';
                _this.Controller.OnCompiled = {
                    Invoke: _this.OnCompileEnd, Owner: _this
                };
                _this.OnPropertyChanged(UI_10.UI.ListAdapter.DPSelectedIndex, function (e, b) { this.setXY(undefined, b._new); }, _this);
                return _this;
            }
            HeavyTable.prototype.initialize = function () {
                var _this = this;
                _super.prototype.initialize.call(this);
                this.editCell.addEventListener('blur', function (e) {
                    if (_this.isfocussed)
                        _this.endEdit(true);
                });
            };
            HeavyTable.prototype.OnCompileEnd = function (cnt) {
            };
            HeavyTable.prototype.setName = function (name, dom, cnt, e) {
                if (name == '_tbl_head') {
                    UI_10.UI.help.createHeader(dom, this.cols, { Owner: this, Invoke: this.OnOrderBy });
                }
            };
            HeavyTable.prototype.OnOrderBy = function (sender, orderBy, col, view) {
                if (this._orderHandler && this._orderHandler.Invoke) {
                    var c = this.orderMap[orderBy];
                    if (!c)
                        this.orderMap[orderBy] = c = { factor: 1, lastStat: void 0 };
                    else if (!c.factorHandled)
                        c.factor *= -1;
                    var e = { col: col, state: c, orderBy: orderBy, sender: this, view: view, previous: this.currentOrderMap };
                    Corelib_16.helper.TryCatch(this._orderHandler.Owner, this._orderHandler.Invoke, void 0, [e]);
                    if (!c.factorHandled)
                        c.factor = c.factor < 0 ? -1 : 1;
                    this.currentOrderMap = e;
                    e.previous = void 0;
                }
            };
            HeavyTable.prototype.setOrderHandler = function (handler) {
                this._orderHandler = handler;
            };
            HeavyTable.prototype.endEdit = function (save) {
                if (!this.isfocussed)
                    return false;
                this.isfocussed = false;
                try {
                    this.editCell.remove();
                }
                catch (_a) { }
                if (save)
                    this._selectedCell.textContent = this.editCell.value;
                else
                    this._selectedCell.textContent = this.oldInnerText;
                return true;
            };
            HeavyTable.prototype.beginEdit = function () {
                return this.edit(this.selectCell());
            };
            HeavyTable.prototype.edit = function (currentElement) {
                if (!this.cols[this._x].editable)
                    return false;
                var input = this.editCell;
                this.oldInnerText = currentElement.textContent;
                input.value = this.oldInnerText;
                currentElement.innerText = "";
                currentElement.appendChild(input);
                input.focus();
                this.isfocussed = true;
                return true;
            };
            Object.defineProperty(HeavyTable.prototype, "EOF", {
                get: function () {
                    return this._x === this.ColCount() - 1 && this._y === this.Source.Count - 1;
                },
                enumerable: true,
                configurable: true
            });
            HeavyTable.prototype.OnKeyDown = function (e) {
                if (this.isfocussed && e.keyCode === 27) {
                    if (this.isfocussed)
                        this.endEdit(false);
                    else
                        return false;
                }
                else if (e.keyCode == 13) {
                    if (this.isfocussed) {
                        if (this.endEdit(true))
                            return true;
                    }
                    else if (this.beginEdit())
                        return true;
                }
                else if (e.keyCode == 9) {
                    if (this.isfocussed)
                        this.endEdit(true);
                    if (this.EOF)
                        return;
                    this.setXY(this.x + (e.shiftKey ? -1 : 1), undefined);
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    e.preventDefault();
                    return true;
                }
                else if (!this.isfocussed && e.keyCode >= 37 && e.keyCode <= 40) {
                    var r;
                    switch (e.keyCode) {
                        case 37:
                            r = this.setXY(this.x - 1, undefined);
                            break;
                        case 38:
                            r = this.setXY(undefined, this._y - 1);
                            break;
                        case 39:
                            r = this.setXY(this.x + 1, undefined);
                            break;
                        case 40:
                            r = this.setXY(undefined, this._y + 1);
                            break;
                        default: return false;
                    }
                    if (r)
                        return true;
                }
                else
                    return false;
                return _super.prototype.OnKeyDown.call(this, e);
            };
            Object.defineProperty(HeavyTable.prototype, "x", {
                get: function () { return this._x; },
                set: function (v) {
                    if (this.cols.length == 0)
                        return;
                    var vc = this.ColCount();
                    var i = v < 0 ? -1 : v < vc ? 0 : 1;
                    if (i === -1)
                        this._x = this.Rebound ? vc - 1 : 0;
                    else if (i === +1)
                        this._x = this.Rebound ? 0 : vc - 1;
                    else
                        this._x = v;
                    if (i && this.Rebound)
                        this.y += i;
                },
                enumerable: true,
                configurable: true
            });
            HeavyTable.prototype.ColCount = function () { return this.visibleCols ? this.visibleCols.length : this.cols.length; };
            Object.defineProperty(HeavyTable.prototype, "y", {
                get: function () { return this._y; },
                set: function (v) {
                    var vr = this.Source.Count;
                    if (vr == 0)
                        return;
                    var i = v < 0 ? -1 : v < vr ? 0 : 1;
                    if (i === -1)
                        this._y = this.Rebound ? vr - 1 : 0;
                    else if (i === +1)
                        this._y = this.Rebound ? 0 : vr - 1;
                    else
                        this._y = v;
                    if (i && this.Rebound)
                        this.x += i;
                },
                enumerable: true,
                configurable: true
            });
            HeavyTable.prototype.setXY = function (x, y) {
                if (!this.Rebound) {
                    if (x < 0)
                        return false;
                    if (x >= this.ColCount())
                        return false;
                    if (y >= this.Source.Count)
                        return false;
                }
                this.deselectCell();
                if (x != undefined)
                    this.x = x;
                if (y != undefined)
                    this.y = y;
                this._selectedCell = this.getCurrentCell();
                this.selectCell();
                this.SelectedIndex = this._y;
                return true;
            };
            HeavyTable.prototype.getStat = function () {
                return { x: this._x, y: this._y };
            };
            HeavyTable.prototype.getCurrentCell = function () {
                var t = this.Content.getChild(this._y);
                if (!t)
                    return;
                return t.View.children.item(this.visibleCols == null ? this.x : this.visibleCols[this.x]);
            };
            HeavyTable.prototype.selectCell = function () {
                this._selectedCell && this._selectedCell.classList.add('selected');
                return this._selectedCell;
            };
            HeavyTable.prototype.deselectCell = function () {
                this._selectedCell && this._selectedCell.classList.remove('selected');
            };
            HeavyTable.ctor = function () {
                require('style|../../assets/Components/HeavyTable/style.css');
            };
            return HeavyTable;
        }(UI_10.UI.ListAdapter));
        Material.HeavyTable = HeavyTable;
    })(Material = exports.Material || (exports.Material = {}));
    Corelib_16.ScopicControl.register('heavytable', function (e) {
        var tableDef = e.dom.getAttribute('tableDef');
        var tableDEF = e.currentScop.getScop(tableDef, false);
        var x = new Material.HeavyTable(tableDEF.Value);
        tableDEF.Dispose();
        if (e.dom.hasAttribute('bind-to-scop')) {
            if (e.currentScop)
                e.currentScop.OnPropertyChanged(Corelib_16.bind.Scop.DPValue, function (s, e) {
                    x.Source = e._new;
                }, x);
            x.OnInitialized = function (x) { return x.Source = e.currentScop.Value; };
        }
        return x;
    });
});
define("components/StrechyButton/script", ["require", "exports", "sys/Corelib", "sys/UI", "context", "template|../../assets/Components/StrechyButton/dom.html"], function (require, exports, Corelib_17, UI_11, context_9, tmpl) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ValidateImport(tmpl);
    var t = [1, 2, 4];
    var t1 = t.concat([1, 2, 4]);
    var Replit = (function () {
        function Replit() {
            this.auth = { "command": "auth", "data": "ZXlKamNtVmhkR1ZrSWpveE5URTBNak0yT1RJNU5Ea3hmUT09OlFLU2hySi9IczRONVQ5MDVrSmErZDJmK0hhTHNvN2FRdVJmUFZaVCtwUHc9" };
            this.select = { "command": "select_language", "data": "csharp" };
            this.stat = 0;
            this.ws = new WebSocket(Replit.url);
            this.ws.onopen = this._onopen.bind(this);
            this.ws.onclose = this._onclose.bind(this);
            this.ws.onmessage = this._onmessage.bind(this);
        }
        Replit.prototype.send = function (data) {
            var _this = this;
            data = JSON.stringify(data);
            setTimeout(function () {
                console.log('sending data', data);
                _this.ws.send(data);
            }, 1000);
        };
        Replit.prototype._onopen = function (t, e) {
            switch (this.stat) {
                case 0:
                    this.stat++;
                    this.send(this.auth);
                default:
            }
        };
        Replit.prototype._onclose = function (t, e) {
            console.log("Disconnected");
            this.stat = -1;
        };
        Replit.prototype._onmessage = function (t, e) {
            switch (this.stat) {
                case 0:
                    break;
                case 1:
                    this.stat++;
                    this.send(this.select);
                    break;
                case 2:
                    console.log("Connected");
                    break;
                case 0:
                    break;
                default:
            }
        };
        Replit.prototype.OnMessage = function () {
        };
        Replit.url = "wss://eval.repl.it/ws";
        return Replit;
    }());
    exports.Replit = Replit;
    var Material;
    (function (Material) {
        var StrechyButton = (function (_super) {
            __extends(StrechyButton, _super);
            function StrechyButton() {
                return _super.call(this, tmpl.template.get('strechy-button'), UI_11.UI.TControl.Me) || this;
            }
            StrechyButton.prototype.setName = function (name, dom, cnt, e) {
                this['_'.concat(name)] = dom;
            };
            StrechyButton.prototype.initialize = function () {
                UI_11.UI.JControl.LoadCss(context_9.context.GetPath('style.css'));
            };
            StrechyButton.prototype.OnCompileEnd = function () {
                this._Trigger.addEventListener('click', this);
            };
            StrechyButton.prototype.handleEvent = function (event) {
                Corelib_17.$$(this.View).toggleClass('nav-is-visible');
            };
            StrechyButton.ctor = function () {
                require('style|../../assets/Components/StrechyButton/style.css');
            };
            return StrechyButton;
        }(UI_11.UI.TControl));
        Material.StrechyButton = StrechyButton;
    })(Material = exports.Material || (exports.Material = {}));
    var Css = (function () {
        function Css(style) {
            if (style === void 0)
                style = Css.create();
            if (style && style.sheet instanceof CSSStyleSheet)
                this.sheet = style.sheet;
            else
                throw null;
            this.style = style;
        }
        Css.create = function () {
            var style = document.createElement("style");
            style.appendChild(document.createTextNode(""));
            document.head.appendChild(style);
            return style;
        };
        Css.prototype.add = function (selector) {
        };
        return Css;
    }());
    exports.Css = Css;
});
define("components/UniqueForm/script", ["require", "exports", "template|../../assets/Components/UniqueForm/dom.html", "sys/UI"], function (require, exports, template, UI_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ValidateImport(template);
    var LightForm = (function (_super) {
        __extends(LightForm, _super);
        function LightForm() {
            return _super.call(this, null) || this;
        }
        LightForm.prototype.initialize = function () {
            throw new Error("Method not implemented.");
        };
        LightForm.ctor = function () {
            require('style|../../assets/Components/UniqueForm/style.css');
        };
        return LightForm;
    }(UI_12.UI.JControl));
    exports.LightForm = LightForm;
});
define("sys/Components", ["require", "exports", "sys/UI", "sys/Corelib", "context", "template|../assets/templates/Components.html"], function (require, exports, UI_13, corelib_4, context_10, Components_html_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ValidateImport(Components_html_1.template);
    var Components;
    (function (Components) {
        var MdTextbox = (function (_super) {
            __extends(MdTextbox, _super);
            function MdTextbox(_view) {
                var _this = _super.call(this, _view || document.createElement('md-textbox')) || this;
                _this.applyStyle('md-textbox');
                _this._input = _this.createElemnt('input');
                _this._input.setAttribute('required', "");
                _this._input.type = 'text';
                _this.createElemnt('span', "highlight");
                _this.createElemnt('span', "bar");
                _this._label = _this.createElemnt('label');
                _this._label.classList.add('mdlabel');
                _this.InputBox = new UI_13.UI.Input(_this._input);
                return _this;
            }
            MdTextbox_1 = MdTextbox;
            MdTextbox.prototype._hasValue_ = function () { return true; };
            MdTextbox.prototype._OnValueChanged = function (e) {
                if (this._isChanging)
                    return;
                this._isChanging = true;
                switch (this._input.type) {
                    case 'date':
                        this._input.valueAsDate = e._new;
                        break;
                    case 'number':
                        this._input.valueAsNumber = e._new;
                        break;
                    default:
                        this._input.value = e._new || '';
                }
                this._auto && (this._auto.Value = e._new);
                this._isChanging = false;
            };
            MdTextbox.prototype.OnLabelChanged = function (e) {
                this._label.textContent = e._new;
            };
            MdTextbox.prototype.createElemnt = function (tag, _class) {
                var f = document.createElement(tag);
                if (_class)
                    f.classList.add(_class);
                this.View.appendChild(f);
                return f;
            };
            MdTextbox.prototype.initialize = function () {
                if (!this._auto)
                    this._input.addEventListener('change', this);
            };
            MdTextbox.prototype.handleEvent = function (e) {
                if (e.type == "change")
                    return this.onInputChanged(e);
            };
            MdTextbox.prototype.onInputChanged = function (e) {
                if (this._isChanging)
                    return;
                this._isChanging = true;
                switch (this._input.type) {
                    case 'date':
                        this.Value = this._input.valueAsDate;
                        break;
                    case 'number':
                        this.Value = this._input.valueAsNumber;
                        break;
                    default:
                        this.Value = this._input.value;
                }
                this._isChanging = false;
            };
            Object.defineProperty(MdTextbox.prototype, "Type", {
                get: function () {
                    return this._input.type;
                },
                set: function (v) {
                    this._input.type = v;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MdTextbox.prototype, "AutoCompleteBox", {
                get: function () {
                    return this._auto;
                },
                enumerable: true,
                configurable: true
            });
            MdTextbox.prototype.OnSuggesionsChanged = function (e) {
                var _this = this;
                if (!this._auto) {
                    this._input.removeEventListener('change', this);
                    this._auto = new UI_13.UI.ProxyAutoCompleteBox(this.InputBox, e._new);
                    this._auto.initialize();
                    this._auto.OnValueChanged(this, function (box, oldVal, newVal) { _this.Value = newVal; });
                }
                else
                    this._auto.DataSource = e._new;
            };
            var MdTextbox_1;
            __decorate([
                corelib_4.attributes.property(String, "Label", void 0, MdTextbox_1.prototype.OnLabelChanged),
                __metadata("design:type", String)
            ], MdTextbox.prototype, "Label", void 0);
            __decorate([
                corelib_4.attributes.property(corelib_4.collection.List, void 0, void 0, MdTextbox_1.prototype.OnSuggesionsChanged),
                __metadata("design:type", corelib_4.collection.List)
            ], MdTextbox.prototype, "Suggestions", void 0);
            MdTextbox = MdTextbox_1 = __decorate([
                corelib_4.attributes.ComponentParser('md-textbox', function (x, p) {
                    var dom = x.Dom;
                    var c = new MdTextbox_1(dom);
                    var tw = p.manager.getProcessorByAttribute('db-twoway');
                    var ds = dom.getAttribute('data-source');
                    if (ds) {
                        var datasource = corelib_4.bind.Scop.Create(ds, x.parent.Scop, corelib_4.bind.BindingMode.SourceToTarget, x.controller);
                        if (datasource) {
                            datasource.OnPropertyChanged(corelib_4.bind.Scop.DPValue, function (s, e) { c.Suggestions = e._new; });
                            c.Suggestions = datasource.Value;
                        }
                    }
                    x.e.Control = c;
                    c.Parent = x.controller.CurrentControl;
                    c.Label = c.View.getAttribute('label');
                    c.Type = c.View.getAttribute('type');
                    if (dom.hasAttribute('bind-to-scop') && x.Scop) {
                        var xs = new corelib_4.bind.TwoBind(tw && tw.value, x.Scop, c, corelib_4.bind.Scop.DPValue, corelib_4.bind.Scop.DPValue);
                        c.OnDisposing = function (c) { xs.Dispose(); };
                        c.Value = x.Scop.Value;
                    }
                    return { Break: false };
                }),
                __metadata("design:paramtypes", [HTMLElement])
            ], MdTextbox);
            return MdTextbox;
        }(UI_13.UI.JControl));
        Components.MdTextbox = MdTextbox;
        var MdIconGroup = (function (_super) {
            __extends(MdIconGroup, _super);
            function MdIconGroup() {
                return _super.call(this, document.createElement('div'), 'IconGroup.Item') || this;
            }
            MdIconGroup.prototype.setDataContext = function (data) {
                var s = this.Source;
                if (s) {
                    s.Clear();
                    s.AddRange(data.value);
                }
                else {
                    this.Source = new corelib_4.collection.List(Object, data.value);
                }
                this._data = data;
            };
            MdIconGroup.prototype.getDataContext = function () {
                return this._data;
            };
            MdIconGroup.prototype.initialize = function () {
                this.applyStyle('icon-group');
            };
            return MdIconGroup;
        }(UI_13.UI.ListAdapter));
        Components.MdIconGroup = MdIconGroup;
        var ContextMenuTemplate = (function (_super) {
            __extends(ContextMenuTemplate, _super);
            function ContextMenuTemplate() {
                var _this = _super.call(this) || this;
                _this.garbage = {};
                if (!ContextMenuTemplate.store)
                    ContextMenuTemplate.ctor();
                return _this;
            }
            ContextMenuTemplate.ctor = function () {
                this.store = {};
                this._labelTemplate = UI_13.UI.Template.ToTemplate("MdContextMenu.label", true);
                this._menuItemTemplate = UI_13.UI.Template.ToTemplate("MdContextMenu.menuitem", true);
                this.store['label'] = {
                    template: this._labelTemplate,
                    create: function (data, cnt) {
                        return this.template.CreateShadow(data);
                    }
                };
                this.store['menu-item'] = {
                    template: this._menuItemTemplate,
                    create: function (data, cnt) {
                        return this.template.CreateShadow(data);
                    }
                };
                var sep = document.createElement('div');
                sep.classList.add('separator');
                this.store['separator'] = {
                    template: new UI_13.UI.HtmlTemplate(sep, true),
                    create: function (data, cnt) {
                        return this.template.CreateShadow(data, cnt);
                    }
                };
                this.store['icongroup'] = {
                    create: function (data, cnt) {
                        var cv = new MdIconGroup();
                        cv.setDataContext(data);
                        return cv;
                    }, template: void 0
                };
            };
            ContextMenuTemplate.prototype.CreateShadow = function (data, cnt) {
                var item = data instanceof corelib_4.bind.Scop ? data.Value : data;
                var x = (this.garbage[item.type] || ContextMenuTemplate.EmptyArray).pop();
                if (x)
                    x.setDataContext(data);
                else
                    x = ContextMenuTemplate.store[item.type].create(item, cnt);
                return x;
            };
            ContextMenuTemplate.prototype.CacheTemplateShadow = function (item, child) {
                var g = this.garbage[item.type];
                g.push(child);
            };
            ContextMenuTemplate.EmptyArray = [];
            return ContextMenuTemplate;
        }(UI_13.UI.Template));
        Components.ContextMenuTemplate = ContextMenuTemplate;
        var MdContextMenu = (function (_super) {
            __extends(MdContextMenu, _super);
            function MdContextMenu(items) {
                var _this = _super.call(this, document.createElement('md-contextmenu'), new ContextMenuTemplate()) || this;
                _this.Source = new corelib_4.collection.List(Object);
                if (items && items.length)
                    _this.OnInitialized = function (n) { return n.Source.AddRange(items); };
                _this.OnIconGroupItemCliced = _this.OnIconGroupItemCliced.bind(_this);
                return _this;
            }
            MdContextMenu.prototype.OnClosed = function (result, e) {
                e.selectedItem = result || this.SelectedItem;
                corelib_4.helper.TryCatch(e, e.callback, void 0, [e]);
                return e.cancel;
            };
            MdContextMenu.prototype.getView = function () {
                return this;
            };
            MdContextMenu.ctor = function () {
                var csses = ['../assets/fonts/robotoFamily.css', '../assets/icons/roboto-icons.css', '../assets/style/Components.css'];
                for (var _i = 0, csses_2 = csses; _i < csses_2.length; _i++) {
                    var i = csses_2[_i];
                    require('style|' + i, void 0, void 0, context_10.context);
                }
            };
            MdContextMenu.prototype.getItemShadow = function (item, i) {
                var x = this.Template.CreateShadow(item, void 0);
                if (item.type === 'icongroup')
                    x.OnChildClicked.Remove('icon-group-clicked'), x.OnChildClicked.Add(this.OnIconGroupItemCliced, 'icon-group-clicked');
                return x;
            };
            MdContextMenu.prototype.OnIconGroupItemCliced = function (e) {
                UI_13.UI.Desktop.Current.CurrentApp.CloseContextMenu(e.template.getDataContext());
                e.Cancel = true;
            };
            MdContextMenu.prototype.disposeItemShadow = function (item, child, i) {
                var t = this.Template;
                t.CacheTemplateShadow(item, child);
                return child;
            };
            MdContextMenu.prototype.disposeItemsShadow = function (items, childs) {
                if (!items && !childs)
                    return;
                var t = this.Template;
                if (!items) {
                    for (var i = 0; i < childs.length; i++) {
                        var child = childs[i];
                        var c = child.getDataContext();
                        if (c == void 0)
                            corelib_4.helper.TryCatch(child, child.Dispose);
                        else
                            t.CacheTemplateShadow(c, child);
                    }
                }
                else if (!childs) {
                    return;
                }
                else if (items.length == childs.length) {
                    for (var i = 0; i < childs.length; i++) {
                        var child = childs[i];
                        var item = items[i];
                        var c = child.getDataContext();
                        if (c == item || c == void 0)
                            t.CacheTemplateShadow(item, child);
                        else
                            t.CacheTemplateShadow(c || item, child);
                    }
                }
                else
                    for (var i = 0; i < childs.length; i++) {
                        var c = childs[i].getDataContext();
                        t.CacheTemplateShadow(c, childs[i]);
                    }
            };
            MdContextMenu.prototype.initialize = function () {
                this.applyStyle('rc-context-menu');
                this._view.style.top = "100px";
                this._view.style.left = "300px";
            };
            MdContextMenu.prototype.getTarget = function () {
                throw new Error("Method not implemented.");
            };
            MdContextMenu.prototype._revalidate = function (e) {
                if (e.x || e.y)
                    return;
                e.x = e.e.x;
                e.y = e.e.y;
            };
            MdContextMenu.prototype.OnAttached = function (e) {
                this._revalidate(e);
                this.disapplyStyle('hidden');
                this._view.style.left = e.x + "px";
                this._view.style.top = e.y + "px";
            };
            MdContextMenu.prototype.OnItemClicked = function (s, e, t) {
                _super.prototype.OnItemClicked.call(this, s, e, t);
                var i = t.SelectedItem;
                if (i && i.type !== 'icongroup' && !i.nonSelectable)
                    UI_13.UI.Desktop.Current.CurrentApp.CloseContextMenu(i);
            };
            __decorate([
                corelib_4.attributes.property(corelib_4.collection.List),
                __metadata("design:type", corelib_4.collection.List)
            ], MdContextMenu.prototype, "ItemsSource", void 0);
            return MdContextMenu;
        }(UI_13.UI.ListAdapter));
        Components.MdContextMenu = MdContextMenu;
    })(Components = exports.Components || (exports.Components = {}));
});
